"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/axios-retry";
exports.ids = ["vendor-chunks/axios-retry"];
exports.modules = {

/***/ "(rsc)/./node_modules/axios-retry/dist/cjs/index.js":
/*!****************************************************!*\
  !*** ./node_modules/axios-retry/dist/cjs/index.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DEFAULT_OPTIONS = exports.linearDelay = exports.exponentialDelay = exports.retryAfter = exports.isNetworkOrIdempotentRequestError = exports.isIdempotentRequestError = exports.isSafeRequestError = exports.isRetryableError = exports.isNetworkError = exports.namespace = void 0;\nconst is_retry_allowed_1 = __importDefault(__webpack_require__(/*! is-retry-allowed */ \"(rsc)/./node_modules/is-retry-allowed/index.js\"));\nexports.namespace = 'axios-retry';\nfunction isNetworkError(error) {\n    const CODE_EXCLUDE_LIST = ['ERR_CANCELED', 'ECONNABORTED'];\n    if (error.response) {\n        return false;\n    }\n    if (!error.code) {\n        return false;\n    }\n    // Prevents retrying timed out & cancelled requests\n    if (CODE_EXCLUDE_LIST.includes(error.code)) {\n        return false;\n    }\n    // Prevents retrying unsafe errors\n    return (0, is_retry_allowed_1.default)(error);\n}\nexports.isNetworkError = isNetworkError;\nconst SAFE_HTTP_METHODS = ['get', 'head', 'options'];\nconst IDEMPOTENT_HTTP_METHODS = SAFE_HTTP_METHODS.concat(['put', 'delete']);\nfunction isRetryableError(error) {\n    return (error.code !== 'ECONNABORTED' &&\n        (!error.response ||\n            error.response.status === 429 ||\n            (error.response.status >= 500 && error.response.status <= 599)));\n}\nexports.isRetryableError = isRetryableError;\nfunction isSafeRequestError(error) {\n    var _a;\n    if (!((_a = error.config) === null || _a === void 0 ? void 0 : _a.method)) {\n        // Cannot determine if the request can be retried\n        return false;\n    }\n    return isRetryableError(error) && SAFE_HTTP_METHODS.indexOf(error.config.method) !== -1;\n}\nexports.isSafeRequestError = isSafeRequestError;\nfunction isIdempotentRequestError(error) {\n    var _a;\n    if (!((_a = error.config) === null || _a === void 0 ? void 0 : _a.method)) {\n        // Cannot determine if the request can be retried\n        return false;\n    }\n    return isRetryableError(error) && IDEMPOTENT_HTTP_METHODS.indexOf(error.config.method) !== -1;\n}\nexports.isIdempotentRequestError = isIdempotentRequestError;\nfunction isNetworkOrIdempotentRequestError(error) {\n    return isNetworkError(error) || isIdempotentRequestError(error);\n}\nexports.isNetworkOrIdempotentRequestError = isNetworkOrIdempotentRequestError;\nfunction retryAfter(error = undefined) {\n    var _a;\n    const retryAfterHeader = (_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.headers['retry-after'];\n    if (!retryAfterHeader) {\n        return 0;\n    }\n    // if the retry after header is a number, convert it to milliseconds\n    let retryAfterMs = (Number(retryAfterHeader) || 0) * 1000;\n    // If the retry after header is a date, get the number of milliseconds until that date\n    if (retryAfterMs === 0) {\n        retryAfterMs = (new Date(retryAfterHeader).valueOf() || 0) - Date.now();\n    }\n    return Math.max(0, retryAfterMs);\n}\nexports.retryAfter = retryAfter;\nfunction noDelay(_retryNumber = 0, error = undefined) {\n    return Math.max(0, retryAfter(error));\n}\nfunction exponentialDelay(retryNumber = 0, error = undefined, delayFactor = 100) {\n    const calculatedDelay = Math.pow(2, retryNumber) * delayFactor;\n    const delay = Math.max(calculatedDelay, retryAfter(error));\n    const randomSum = delay * 0.2 * Math.random(); // 0-20% of the delay\n    return delay + randomSum;\n}\nexports.exponentialDelay = exponentialDelay;\n/**\n * Linear delay\n * @param {number | undefined} delayFactor - delay factor in milliseconds (default: 100)\n * @returns {function} (retryNumber: number, error: AxiosError | undefined) => number\n */\nfunction linearDelay(delayFactor = 100) {\n    return (retryNumber = 0, error = undefined) => {\n        const delay = retryNumber * delayFactor;\n        return Math.max(delay, retryAfter(error));\n    };\n}\nexports.linearDelay = linearDelay;\nexports.DEFAULT_OPTIONS = {\n    retries: 3,\n    retryCondition: isNetworkOrIdempotentRequestError,\n    retryDelay: noDelay,\n    shouldResetTimeout: false,\n    onRetry: () => { },\n    onMaxRetryTimesExceeded: () => { },\n    validateResponse: null\n};\nfunction getRequestOptions(config, defaultOptions) {\n    return Object.assign(Object.assign(Object.assign({}, exports.DEFAULT_OPTIONS), defaultOptions), config[exports.namespace]);\n}\nfunction setCurrentState(config, defaultOptions, resetLastRequestTime = false) {\n    const currentState = getRequestOptions(config, defaultOptions || {});\n    currentState.retryCount = currentState.retryCount || 0;\n    if (!currentState.lastRequestTime || resetLastRequestTime) {\n        currentState.lastRequestTime = Date.now();\n    }\n    config[exports.namespace] = currentState;\n    return currentState;\n}\nfunction fixConfig(axiosInstance, config) {\n    // @ts-ignore\n    if (axiosInstance.defaults.agent === config.agent) {\n        // @ts-ignore\n        delete config.agent;\n    }\n    if (axiosInstance.defaults.httpAgent === config.httpAgent) {\n        delete config.httpAgent;\n    }\n    if (axiosInstance.defaults.httpsAgent === config.httpsAgent) {\n        delete config.httpsAgent;\n    }\n}\nfunction shouldRetry(currentState, error) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { retries, retryCondition } = currentState;\n        const shouldRetryOrPromise = (currentState.retryCount || 0) < retries && retryCondition(error);\n        // This could be a promise\n        if (typeof shouldRetryOrPromise === 'object') {\n            try {\n                const shouldRetryPromiseResult = yield shouldRetryOrPromise;\n                // keep return true unless shouldRetryPromiseResult return false for compatibility\n                return shouldRetryPromiseResult !== false;\n            }\n            catch (_err) {\n                return false;\n            }\n        }\n        return shouldRetryOrPromise;\n    });\n}\nfunction handleRetry(axiosInstance, currentState, error, config) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n        currentState.retryCount += 1;\n        const { retryDelay, shouldResetTimeout, onRetry } = currentState;\n        const delay = retryDelay(currentState.retryCount, error);\n        // Axios fails merging this configuration to the default configuration because it has an issue\n        // with circular structures: https://github.com/mzabriskie/axios/issues/370\n        fixConfig(axiosInstance, config);\n        if (!shouldResetTimeout && config.timeout && currentState.lastRequestTime) {\n            const lastRequestDuration = Date.now() - currentState.lastRequestTime;\n            const timeout = config.timeout - lastRequestDuration - delay;\n            if (timeout <= 0) {\n                return Promise.reject(error);\n            }\n            config.timeout = timeout;\n        }\n        config.transformRequest = [(data) => data];\n        yield onRetry(currentState.retryCount, error, config);\n        if ((_a = config.signal) === null || _a === void 0 ? void 0 : _a.aborted) {\n            return Promise.resolve(axiosInstance(config));\n        }\n        return new Promise((resolve) => {\n            var _a;\n            const abortListener = () => {\n                clearTimeout(timeout);\n                resolve(axiosInstance(config));\n            };\n            const timeout = setTimeout(() => {\n                var _a;\n                resolve(axiosInstance(config));\n                if ((_a = config.signal) === null || _a === void 0 ? void 0 : _a.removeEventListener) {\n                    config.signal.removeEventListener('abort', abortListener);\n                }\n            }, delay);\n            if ((_a = config.signal) === null || _a === void 0 ? void 0 : _a.addEventListener) {\n                config.signal.addEventListener('abort', abortListener, { once: true });\n            }\n        });\n    });\n}\nfunction handleMaxRetryTimesExceeded(currentState, error) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (currentState.retryCount >= currentState.retries)\n            yield currentState.onMaxRetryTimesExceeded(error, currentState.retryCount);\n    });\n}\nconst axiosRetry = (axiosInstance, defaultOptions) => {\n    const requestInterceptorId = axiosInstance.interceptors.request.use((config) => {\n        var _a;\n        setCurrentState(config, defaultOptions, true);\n        if ((_a = config[exports.namespace]) === null || _a === void 0 ? void 0 : _a.validateResponse) {\n            // by setting this, all HTTP responses will be go through the error interceptor first\n            config.validateStatus = () => false;\n        }\n        return config;\n    });\n    const responseInterceptorId = axiosInstance.interceptors.response.use(null, (error) => __awaiter(void 0, void 0, void 0, function* () {\n        var _a;\n        const { config } = error;\n        // If we have no information to retry the request\n        if (!config) {\n            return Promise.reject(error);\n        }\n        const currentState = setCurrentState(config, defaultOptions);\n        if (error.response && ((_a = currentState.validateResponse) === null || _a === void 0 ? void 0 : _a.call(currentState, error.response))) {\n            // no issue with response\n            return error.response;\n        }\n        if (yield shouldRetry(currentState, error)) {\n            return handleRetry(axiosInstance, currentState, error, config);\n        }\n        yield handleMaxRetryTimesExceeded(currentState, error);\n        return Promise.reject(error);\n    }));\n    return { requestInterceptorId, responseInterceptorId };\n};\n// Compatibility with CommonJS\naxiosRetry.isNetworkError = isNetworkError;\naxiosRetry.isSafeRequestError = isSafeRequestError;\naxiosRetry.isIdempotentRequestError = isIdempotentRequestError;\naxiosRetry.isNetworkOrIdempotentRequestError = isNetworkOrIdempotentRequestError;\naxiosRetry.exponentialDelay = exponentialDelay;\naxiosRetry.linearDelay = linearDelay;\naxiosRetry.isRetryableError = isRetryableError;\nexports[\"default\"] = axiosRetry;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/axios-retry/dist/cjs/index.js\n");

/***/ })

};
;