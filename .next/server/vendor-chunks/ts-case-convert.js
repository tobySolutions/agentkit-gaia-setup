"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ts-case-convert";
exports.ids = ["vendor-chunks/ts-case-convert"];
exports.modules = {

/***/ "(rsc)/./node_modules/ts-case-convert/lib/caseConvert.js":
/*!*********************************************************!*\
  !*** ./node_modules/ts-case-convert/lib/caseConvert.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.objectToPascal = exports.toPascal = exports.objectToSnake = exports.toSnake = exports.objectToCamel = exports.toCamel = void 0;\nfunction convertObject(obj, keyConverter) {\n    if (obj === null || typeof obj === 'undefined' || typeof obj !== 'object') {\n        return obj;\n    }\n    const out = (Array.isArray(obj) ? [] : {});\n    for (const [k, v] of Object.entries(obj)) {\n        // eslint-disable-next-line\n        // @ts-ignore\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        out[keyConverter(k)] = Array.isArray(v)\n            ? v.map((item) => typeof item === 'object' &&\n                !(item instanceof Uint8Array) &&\n                !(item instanceof Date)\n                ? convertObject(item, keyConverter)\n                : item)\n            : v instanceof Uint8Array || v instanceof Date\n                ? v\n                : typeof v === 'object'\n                    ? convertObject(v, keyConverter)\n                    : v;\n    }\n    return out;\n}\nfunction toCamel(term) {\n    return (term.length === 1\n        ? term.toLowerCase()\n        : term\n            .replace(/^([A-Z])/, (m) => m[0].toLowerCase())\n            .replace(/[_-]([a-z0-9])/g, (m) => m[1].toUpperCase()));\n}\nexports.toCamel = toCamel;\nfunction objectToCamel(obj) {\n    return convertObject(obj, toCamel);\n}\nexports.objectToCamel = objectToCamel;\nfunction toSnake(term) {\n    var _a, _b;\n    let result = term;\n    let circuitBreaker = 0;\n    while ((((_a = /([a-z])([0-9])/.exec(result)) === null || _a === void 0 ? void 0 : _a.length) || 0) > 2 &&\n        circuitBreaker < 10) {\n        result = result.replace(/([a-z])([0-9])/, (_all, $1, $2) => `${$1.toLowerCase()}_${$2.toLowerCase()}`);\n        circuitBreaker += 1;\n    }\n    while ((((_b = /(.+?)([A-Z])/.exec(result)) === null || _b === void 0 ? void 0 : _b.length) || 0) > 2 &&\n        circuitBreaker < 10) {\n        result = result.replace(/(.+?)([A-Z])/, (_all, $1, $2) => `${$1.toLowerCase()}_${$2.toLowerCase()}`);\n        circuitBreaker += 1;\n    }\n    return result.toLowerCase();\n}\nexports.toSnake = toSnake;\nfunction objectToSnake(obj) {\n    return convertObject(obj, toSnake);\n}\nexports.objectToSnake = objectToSnake;\nfunction toPascal(term) {\n    return toCamel(term).replace(/^([a-z])/, (m) => m[0].toUpperCase());\n}\nexports.toPascal = toPascal;\nfunction objectToPascal(obj) {\n    return convertObject(obj, toPascal);\n}\nexports.objectToPascal = objectToPascal;\n//# sourceMappingURL=data:application/json;base64,# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ts-case-convert/lib/caseConvert.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ts-case-convert/lib/index.js":
/*!***************************************************!*\
  !*** ./node_modules/ts-case-convert/lib/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.objectToPascal = exports.toPascal = exports.toCamel = exports.toSnake = exports.objectToSnake = exports.objectToCamel = void 0;\nvar caseConvert_1 = __webpack_require__(/*! ./caseConvert */ \"(rsc)/./node_modules/ts-case-convert/lib/caseConvert.js\");\nObject.defineProperty(exports, \"objectToCamel\", ({ enumerable: true, get: function () { return caseConvert_1.objectToCamel; } }));\nObject.defineProperty(exports, \"objectToSnake\", ({ enumerable: true, get: function () { return caseConvert_1.objectToSnake; } }));\nObject.defineProperty(exports, \"toSnake\", ({ enumerable: true, get: function () { return caseConvert_1.toSnake; } }));\nObject.defineProperty(exports, \"toCamel\", ({ enumerable: true, get: function () { return caseConvert_1.toCamel; } }));\nObject.defineProperty(exports, \"toPascal\", ({ enumerable: true, get: function () { return caseConvert_1.toPascal; } }));\nObject.defineProperty(exports, \"objectToPascal\", ({ enumerable: true, get: function () { return caseConvert_1.objectToPascal; } }));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBT3VCO0FBTnJCLDRHQUFBLGFBQWEsT0FBQTtBQUNiLDRHQUFBLGFBQWEsT0FBQTtBQUNiLHNHQUFBLE9BQU8sT0FBQTtBQUNQLHNHQUFBLE9BQU8sT0FBQTtBQUNQLHVHQUFBLFFBQVEsT0FBQTtBQUNSLDZHQUFBLGNBQWMsT0FBQSIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7XG4gIG9iamVjdFRvQ2FtZWwsXG4gIG9iamVjdFRvU25ha2UsXG4gIHRvU25ha2UsXG4gIHRvQ2FtZWwsXG4gIHRvUGFzY2FsLFxuICBvYmplY3RUb1Bhc2NhbCxcbn0gZnJvbSAnLi9jYXNlQ29udmVydCc7XG5cbmV4cG9ydCB0eXBlIHtcbiAgT2JqZWN0VG9DYW1lbCxcbiAgT2JqZWN0VG9TbmFrZSxcbiAgVG9TbmFrZSxcbiAgVG9DYW1lbCxcbiAgVG9QYXNjYWwsXG4gIE9iamVjdFRvUGFzY2FsLFxufSBmcm9tICcuL2Nhc2VDb252ZXJ0JztcbiJdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdHMtY2FzZS1jb252ZXJ0L2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0IsR0FBRyxnQkFBZ0IsR0FBRyxlQUFlLEdBQUcsZUFBZSxHQUFHLHFCQUFxQixHQUFHLHFCQUFxQjtBQUM3SCxvQkFBb0IsbUJBQU8sQ0FBQyw4RUFBZTtBQUMzQyxpREFBZ0QsRUFBRSxxQ0FBcUMsdUNBQXVDLEVBQUM7QUFDL0gsaURBQWdELEVBQUUscUNBQXFDLHVDQUF1QyxFQUFDO0FBQy9ILDJDQUEwQyxFQUFFLHFDQUFxQyxpQ0FBaUMsRUFBQztBQUNuSCwyQ0FBMEMsRUFBRSxxQ0FBcUMsaUNBQWlDLEVBQUM7QUFDbkgsNENBQTJDLEVBQUUscUNBQXFDLGtDQUFrQyxFQUFDO0FBQ3JILGtEQUFpRCxFQUFFLHFDQUFxQyx3Q0FBd0MsRUFBQztBQUNqSSwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZHAtdGVzdC1hZ2VudC8uL25vZGVfbW9kdWxlcy90cy1jYXNlLWNvbnZlcnQvbGliL2luZGV4LmpzP2NkNDUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm9iamVjdFRvUGFzY2FsID0gZXhwb3J0cy50b1Bhc2NhbCA9IGV4cG9ydHMudG9DYW1lbCA9IGV4cG9ydHMudG9TbmFrZSA9IGV4cG9ydHMub2JqZWN0VG9TbmFrZSA9IGV4cG9ydHMub2JqZWN0VG9DYW1lbCA9IHZvaWQgMDtcbnZhciBjYXNlQ29udmVydF8xID0gcmVxdWlyZShcIi4vY2FzZUNvbnZlcnRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJvYmplY3RUb0NhbWVsXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjYXNlQ29udmVydF8xLm9iamVjdFRvQ2FtZWw7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJvYmplY3RUb1NuYWtlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjYXNlQ29udmVydF8xLm9iamVjdFRvU25ha2U7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ0b1NuYWtlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjYXNlQ29udmVydF8xLnRvU25ha2U7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ0b0NhbWVsXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjYXNlQ29udmVydF8xLnRvQ2FtZWw7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ0b1Bhc2NhbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY2FzZUNvbnZlcnRfMS50b1Bhc2NhbDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm9iamVjdFRvUGFzY2FsXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjYXNlQ29udmVydF8xLm9iamVjdFRvUGFzY2FsOyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYVc1a1pYZ3Vhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOXpjbU12YVc1a1pYZ3VkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3TzBGQlFVRXNOa05CVDNWQ08wRkJUbkpDTERSSFFVRkJMR0ZCUVdFc1QwRkJRVHRCUVVOaUxEUkhRVUZCTEdGQlFXRXNUMEZCUVR0QlFVTmlMSE5IUVVGQkxFOUJRVThzVDBGQlFUdEJRVU5RTEhOSFFVRkJMRTlCUVU4c1QwRkJRVHRCUVVOUUxIVkhRVUZCTEZGQlFWRXNUMEZCUVR0QlFVTlNMRFpIUVVGQkxHTkJRV01zVDBGQlFTSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbVY0Y0c5eWRDQjdYRzRnSUc5aWFtVmpkRlJ2UTJGdFpXd3NYRzRnSUc5aWFtVmpkRlJ2VTI1aGEyVXNYRzRnSUhSdlUyNWhhMlVzWEc0Z0lIUnZRMkZ0Wld3c1hHNGdJSFJ2VUdGelkyRnNMRnh1SUNCdlltcGxZM1JVYjFCaGMyTmhiQ3hjYm4wZ1puSnZiU0FuTGk5allYTmxRMjl1ZG1WeWRDYzdYRzVjYm1WNGNHOXlkQ0IwZVhCbElIdGNiaUFnVDJKcVpXTjBWRzlEWVcxbGJDeGNiaUFnVDJKcVpXTjBWRzlUYm1GclpTeGNiaUFnVkc5VGJtRnJaU3hjYmlBZ1ZHOURZVzFsYkN4Y2JpQWdWRzlRWVhOallXd3NYRzRnSUU5aWFtVmpkRlJ2VUdGelkyRnNMRnh1ZlNCbWNtOXRJQ2N1TDJOaGMyVkRiMjUyWlhKMEp6dGNiaUpkZlE9PSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ts-case-convert/lib/index.js\n");

/***/ })

};
;