"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@alloralabs";
exports.ids = ["vendor-chunks/@alloralabs"];
exports.modules = {

/***/ "(rsc)/./node_modules/@alloralabs/allora-sdk/dist/src/v2/api-client.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@alloralabs/allora-sdk/dist/src/v2/api-client.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AlloraAPIClient = exports.SignatureFormat = exports.PriceInferenceTimeframe = exports.PriceInferenceToken = exports.ChainID = exports.ChainSlug = void 0;\nvar ChainSlug;\n(function (ChainSlug) {\n    ChainSlug[\"TESTNET\"] = \"testnet\";\n    ChainSlug[\"MAINNET\"] = \"mainnet\";\n})(ChainSlug || (exports.ChainSlug = ChainSlug = {}));\nvar ChainID;\n(function (ChainID) {\n    ChainID[\"TESTNET\"] = \"allora-testnet-1\";\n    ChainID[\"MAINNET\"] = \"allora-mainnet-1\";\n})(ChainID || (exports.ChainID = ChainID = {}));\nvar PriceInferenceToken;\n(function (PriceInferenceToken) {\n    PriceInferenceToken[\"BTC\"] = \"BTC\";\n    PriceInferenceToken[\"ETH\"] = \"ETH\";\n})(PriceInferenceToken || (exports.PriceInferenceToken = PriceInferenceToken = {}));\nvar PriceInferenceTimeframe;\n(function (PriceInferenceTimeframe) {\n    PriceInferenceTimeframe[\"FIVE_MIN\"] = \"5m\";\n    PriceInferenceTimeframe[\"EIGHT_HOURS\"] = \"8h\";\n})(PriceInferenceTimeframe || (exports.PriceInferenceTimeframe = PriceInferenceTimeframe = {}));\nvar SignatureFormat;\n(function (SignatureFormat) {\n    SignatureFormat[\"ETHEREUM_SEPOLIA\"] = \"ethereum-11155111\";\n})(SignatureFormat || (exports.SignatureFormat = SignatureFormat = {}));\nclass AlloraAPIClient {\n    constructor(config) {\n        this.chainID =\n            config.chainSlug === ChainSlug.TESTNET\n                ? ChainID.TESTNET\n                : ChainID.MAINNET;\n        this.apiKey = config.apiKey || \"UP-8cbc632a67a84ac1b4078661\";\n        this.baseAPIUrl = config.baseAPIUrl || \"https://api.upshot.xyz/v2\";\n    }\n    /**\n     * Fetches all available topics from the Allora API.\n     * This method handles pagination automatically by following continuation tokens\n     * until all topics have been retrieved.\n     *\n     * @returns {Promise<AlloraTopic[]>} A promise that resolves to an array of all available topics\n     * @throws {Error} If the API request fails or returns an unsuccessful status\n     */\n    getAllTopics() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const allTopics = [];\n            let continuationToken = null;\n            do {\n                const response = yield this.fetchAPIResponse(`allora/${this.chainID}/topics`, continuationToken\n                    ? {\n                        continuation_token: continuationToken,\n                    }\n                    : {});\n                allTopics.push(...response.data.topics);\n                continuationToken = response.data.continuation_token;\n            } while (continuationToken);\n            return allTopics;\n        });\n    }\n    /**\n     * Fetches an inference for a specific topic from the Allora API.\n     *\n     * @param {number} topicID - The unique identifier of the topic to get inference for\n     * @returns {Promise<AlloraInference>} A promise that resolves to the inference data\n     * @throws {Error} If the API request fails or returns an unsuccessful status\n     */\n    getInferenceByTopicID(topicID_1) {\n        return __awaiter(this, arguments, void 0, function* (topicID, signatureFormat = SignatureFormat.ETHEREUM_SEPOLIA) {\n            var _a;\n            const response = yield this.fetchAPIResponse(`allora/consumer/${signatureFormat}?allora_topic_id=${topicID}&inference_value_type=uint256`);\n            if (!((_a = response.data) === null || _a === void 0 ? void 0 : _a.inference_data)) {\n                throw new Error(\"Failed to fetch price inference\");\n            }\n            return response.data;\n        });\n    }\n    /**\n     * Fetches a price inference for a specific asset and timeframe from the Allora API.\n     *\n     * @param {PriceInferenceToken} asset - The asset to get price inference for\n     * @param {PriceInferenceTimeframe} timeframe - The timeframe to get price inference for\n     * @returns {Promise<AlloraInference>} A promise that resolves to the inference data\n     * @throws {Error} If the API request fails or returns an unsuccessful status\n     */\n    getPriceInference(asset_1, timeframe_1) {\n        return __awaiter(this, arguments, void 0, function* (asset, timeframe, signatureFormat = SignatureFormat.ETHEREUM_SEPOLIA) {\n            var _a;\n            const response = yield this.fetchAPIResponse(`allora/consumer/price/${signatureFormat}/${asset}/${timeframe}`);\n            if (!((_a = response.data) === null || _a === void 0 ? void 0 : _a.inference_data)) {\n                throw new Error(\"Failed to fetch price inference\");\n            }\n            return response.data;\n        });\n    }\n    getRequestUrl(endpoint) {\n        // Remove trailing slash from baseAPIUrl if it exists\n        const apiUrl = this.baseAPIUrl.endsWith(\"/\")\n            ? this.baseAPIUrl.slice(0, -1)\n            : this.baseAPIUrl;\n        // Remove leading slash from endpoint if it exists\n        endpoint = endpoint.startsWith(\"/\") ? endpoint.slice(1) : endpoint;\n        return `${apiUrl}/${endpoint}`;\n    }\n    fetchAPIResponse(endpoint_1) {\n        return __awaiter(this, arguments, void 0, function* (endpoint, params = {}) {\n            const queryString = new URLSearchParams(params).toString();\n            const requestUrl = this.getRequestUrl(endpoint) + (queryString ? `?${queryString}` : \"\");\n            const response = yield fetch(requestUrl, {\n                method: \"GET\",\n                headers: {\n                    Accept: \"application/json\",\n                    \"Content-Type\": \"application/json\",\n                    \"x-api-key\": this.apiKey,\n                },\n            });\n            const responseBody = yield response.json();\n            if (!response.ok) {\n                throw new Error(`Failed to fetch from Allora API:  url=${requestUrl} status=${response.status} body=${JSON.stringify(responseBody, null, 4)}`);\n            }\n            return responseBody;\n        });\n    }\n}\nexports.AlloraAPIClient = AlloraAPIClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFsbG9yYWxhYnMvYWxsb3JhLXNkay9kaXN0L3NyYy92Mi9hcGktY2xpZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw0QkFBNEIsK0RBQStELGlCQUFpQjtBQUM1RztBQUNBLG9DQUFvQyxNQUFNLCtCQUErQixZQUFZO0FBQ3JGLG1DQUFtQyxNQUFNLG1DQUFtQyxZQUFZO0FBQ3hGLGdDQUFnQztBQUNoQztBQUNBLEtBQUs7QUFDTDtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUIsR0FBRyx1QkFBdUIsR0FBRywrQkFBK0IsR0FBRywyQkFBMkIsR0FBRyxlQUFlLEdBQUcsaUJBQWlCO0FBQ3ZKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxnQkFBZ0IsaUJBQWlCLGlCQUFpQjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsY0FBYyxlQUFlLGVBQWU7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDBCQUEwQiwyQkFBMkIsMkJBQTJCO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw4QkFBOEIsK0JBQStCLCtCQUErQjtBQUM3RjtBQUNBO0FBQ0E7QUFDQSxDQUFDLHNCQUFzQix1QkFBdUIsdUJBQXVCO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsd0JBQXdCO0FBQ3pDLGdCQUFnQixPQUFPO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVFQUF1RSxhQUFhO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQiwwQkFBMEI7QUFDM0MsZ0JBQWdCLE9BQU87QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0RUFBNEUsZ0JBQWdCLG1CQUFtQixRQUFRO0FBQ3ZIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxxQkFBcUI7QUFDcEMsZUFBZSx5QkFBeUI7QUFDeEMsaUJBQWlCLDBCQUEwQjtBQUMzQyxnQkFBZ0IsT0FBTztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtGQUFrRixnQkFBZ0IsR0FBRyxNQUFNLEdBQUcsVUFBVTtBQUN4SDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLE9BQU8sR0FBRyxTQUFTO0FBQ3JDO0FBQ0E7QUFDQSxrRkFBa0Y7QUFDbEY7QUFDQSxpRkFBaUYsWUFBWTtBQUM3RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQSx5RUFBeUUsWUFBWSxTQUFTLGlCQUFpQixPQUFPLHNDQUFzQztBQUM1SjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSx1QkFBdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZHAtdGVzdC1hZ2VudC8uL25vZGVfbW9kdWxlcy9AYWxsb3JhbGFicy9hbGxvcmEtc2RrL2Rpc3Qvc3JjL3YyL2FwaS1jbGllbnQuanM/NjE3NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BbGxvcmFBUElDbGllbnQgPSBleHBvcnRzLlNpZ25hdHVyZUZvcm1hdCA9IGV4cG9ydHMuUHJpY2VJbmZlcmVuY2VUaW1lZnJhbWUgPSBleHBvcnRzLlByaWNlSW5mZXJlbmNlVG9rZW4gPSBleHBvcnRzLkNoYWluSUQgPSBleHBvcnRzLkNoYWluU2x1ZyA9IHZvaWQgMDtcbnZhciBDaGFpblNsdWc7XG4oZnVuY3Rpb24gKENoYWluU2x1Zykge1xuICAgIENoYWluU2x1Z1tcIlRFU1RORVRcIl0gPSBcInRlc3RuZXRcIjtcbiAgICBDaGFpblNsdWdbXCJNQUlOTkVUXCJdID0gXCJtYWlubmV0XCI7XG59KShDaGFpblNsdWcgfHwgKGV4cG9ydHMuQ2hhaW5TbHVnID0gQ2hhaW5TbHVnID0ge30pKTtcbnZhciBDaGFpbklEO1xuKGZ1bmN0aW9uIChDaGFpbklEKSB7XG4gICAgQ2hhaW5JRFtcIlRFU1RORVRcIl0gPSBcImFsbG9yYS10ZXN0bmV0LTFcIjtcbiAgICBDaGFpbklEW1wiTUFJTk5FVFwiXSA9IFwiYWxsb3JhLW1haW5uZXQtMVwiO1xufSkoQ2hhaW5JRCB8fCAoZXhwb3J0cy5DaGFpbklEID0gQ2hhaW5JRCA9IHt9KSk7XG52YXIgUHJpY2VJbmZlcmVuY2VUb2tlbjtcbihmdW5jdGlvbiAoUHJpY2VJbmZlcmVuY2VUb2tlbikge1xuICAgIFByaWNlSW5mZXJlbmNlVG9rZW5bXCJCVENcIl0gPSBcIkJUQ1wiO1xuICAgIFByaWNlSW5mZXJlbmNlVG9rZW5bXCJFVEhcIl0gPSBcIkVUSFwiO1xufSkoUHJpY2VJbmZlcmVuY2VUb2tlbiB8fCAoZXhwb3J0cy5QcmljZUluZmVyZW5jZVRva2VuID0gUHJpY2VJbmZlcmVuY2VUb2tlbiA9IHt9KSk7XG52YXIgUHJpY2VJbmZlcmVuY2VUaW1lZnJhbWU7XG4oZnVuY3Rpb24gKFByaWNlSW5mZXJlbmNlVGltZWZyYW1lKSB7XG4gICAgUHJpY2VJbmZlcmVuY2VUaW1lZnJhbWVbXCJGSVZFX01JTlwiXSA9IFwiNW1cIjtcbiAgICBQcmljZUluZmVyZW5jZVRpbWVmcmFtZVtcIkVJR0hUX0hPVVJTXCJdID0gXCI4aFwiO1xufSkoUHJpY2VJbmZlcmVuY2VUaW1lZnJhbWUgfHwgKGV4cG9ydHMuUHJpY2VJbmZlcmVuY2VUaW1lZnJhbWUgPSBQcmljZUluZmVyZW5jZVRpbWVmcmFtZSA9IHt9KSk7XG52YXIgU2lnbmF0dXJlRm9ybWF0O1xuKGZ1bmN0aW9uIChTaWduYXR1cmVGb3JtYXQpIHtcbiAgICBTaWduYXR1cmVGb3JtYXRbXCJFVEhFUkVVTV9TRVBPTElBXCJdID0gXCJldGhlcmV1bS0xMTE1NTExMVwiO1xufSkoU2lnbmF0dXJlRm9ybWF0IHx8IChleHBvcnRzLlNpZ25hdHVyZUZvcm1hdCA9IFNpZ25hdHVyZUZvcm1hdCA9IHt9KSk7XG5jbGFzcyBBbGxvcmFBUElDbGllbnQge1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgICAgICB0aGlzLmNoYWluSUQgPVxuICAgICAgICAgICAgY29uZmlnLmNoYWluU2x1ZyA9PT0gQ2hhaW5TbHVnLlRFU1RORVRcbiAgICAgICAgICAgICAgICA/IENoYWluSUQuVEVTVE5FVFxuICAgICAgICAgICAgICAgIDogQ2hhaW5JRC5NQUlOTkVUO1xuICAgICAgICB0aGlzLmFwaUtleSA9IGNvbmZpZy5hcGlLZXkgfHwgXCJVUC04Y2JjNjMyYTY3YTg0YWMxYjQwNzg2NjFcIjtcbiAgICAgICAgdGhpcy5iYXNlQVBJVXJsID0gY29uZmlnLmJhc2VBUElVcmwgfHwgXCJodHRwczovL2FwaS51cHNob3QueHl6L3YyXCI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZldGNoZXMgYWxsIGF2YWlsYWJsZSB0b3BpY3MgZnJvbSB0aGUgQWxsb3JhIEFQSS5cbiAgICAgKiBUaGlzIG1ldGhvZCBoYW5kbGVzIHBhZ2luYXRpb24gYXV0b21hdGljYWxseSBieSBmb2xsb3dpbmcgY29udGludWF0aW9uIHRva2Vuc1xuICAgICAqIHVudGlsIGFsbCB0b3BpY3MgaGF2ZSBiZWVuIHJldHJpZXZlZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPEFsbG9yYVRvcGljW10+fSBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhbiBhcnJheSBvZiBhbGwgYXZhaWxhYmxlIHRvcGljc1xuICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgQVBJIHJlcXVlc3QgZmFpbHMgb3IgcmV0dXJucyBhbiB1bnN1Y2Nlc3NmdWwgc3RhdHVzXG4gICAgICovXG4gICAgZ2V0QWxsVG9waWNzKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgYWxsVG9waWNzID0gW107XG4gICAgICAgICAgICBsZXQgY29udGludWF0aW9uVG9rZW4gPSBudWxsO1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5mZXRjaEFQSVJlc3BvbnNlKGBhbGxvcmEvJHt0aGlzLmNoYWluSUR9L3RvcGljc2AsIGNvbnRpbnVhdGlvblRva2VuXG4gICAgICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWF0aW9uX3Rva2VuOiBjb250aW51YXRpb25Ub2tlbixcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA6IHt9KTtcbiAgICAgICAgICAgICAgICBhbGxUb3BpY3MucHVzaCguLi5yZXNwb25zZS5kYXRhLnRvcGljcyk7XG4gICAgICAgICAgICAgICAgY29udGludWF0aW9uVG9rZW4gPSByZXNwb25zZS5kYXRhLmNvbnRpbnVhdGlvbl90b2tlbjtcbiAgICAgICAgICAgIH0gd2hpbGUgKGNvbnRpbnVhdGlvblRva2VuKTtcbiAgICAgICAgICAgIHJldHVybiBhbGxUb3BpY3M7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGZXRjaGVzIGFuIGluZmVyZW5jZSBmb3IgYSBzcGVjaWZpYyB0b3BpYyBmcm9tIHRoZSBBbGxvcmEgQVBJLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRvcGljSUQgLSBUaGUgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIHRvcGljIHRvIGdldCBpbmZlcmVuY2UgZm9yXG4gICAgICogQHJldHVybnMge1Byb21pc2U8QWxsb3JhSW5mZXJlbmNlPn0gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIGluZmVyZW5jZSBkYXRhXG4gICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBBUEkgcmVxdWVzdCBmYWlscyBvciByZXR1cm5zIGFuIHVuc3VjY2Vzc2Z1bCBzdGF0dXNcbiAgICAgKi9cbiAgICBnZXRJbmZlcmVuY2VCeVRvcGljSUQodG9waWNJRF8xKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgYXJndW1lbnRzLCB2b2lkIDAsIGZ1bmN0aW9uKiAodG9waWNJRCwgc2lnbmF0dXJlRm9ybWF0ID0gU2lnbmF0dXJlRm9ybWF0LkVUSEVSRVVNX1NFUE9MSUEpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5mZXRjaEFQSVJlc3BvbnNlKGBhbGxvcmEvY29uc3VtZXIvJHtzaWduYXR1cmVGb3JtYXR9P2FsbG9yYV90b3BpY19pZD0ke3RvcGljSUR9JmluZmVyZW5jZV92YWx1ZV90eXBlPXVpbnQyNTZgKTtcbiAgICAgICAgICAgIGlmICghKChfYSA9IHJlc3BvbnNlLmRhdGEpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pbmZlcmVuY2VfZGF0YSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZmV0Y2ggcHJpY2UgaW5mZXJlbmNlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGZXRjaGVzIGEgcHJpY2UgaW5mZXJlbmNlIGZvciBhIHNwZWNpZmljIGFzc2V0IGFuZCB0aW1lZnJhbWUgZnJvbSB0aGUgQWxsb3JhIEFQSS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UHJpY2VJbmZlcmVuY2VUb2tlbn0gYXNzZXQgLSBUaGUgYXNzZXQgdG8gZ2V0IHByaWNlIGluZmVyZW5jZSBmb3JcbiAgICAgKiBAcGFyYW0ge1ByaWNlSW5mZXJlbmNlVGltZWZyYW1lfSB0aW1lZnJhbWUgLSBUaGUgdGltZWZyYW1lIHRvIGdldCBwcmljZSBpbmZlcmVuY2UgZm9yXG4gICAgICogQHJldHVybnMge1Byb21pc2U8QWxsb3JhSW5mZXJlbmNlPn0gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIGluZmVyZW5jZSBkYXRhXG4gICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBBUEkgcmVxdWVzdCBmYWlscyBvciByZXR1cm5zIGFuIHVuc3VjY2Vzc2Z1bCBzdGF0dXNcbiAgICAgKi9cbiAgICBnZXRQcmljZUluZmVyZW5jZShhc3NldF8xLCB0aW1lZnJhbWVfMSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIGFyZ3VtZW50cywgdm9pZCAwLCBmdW5jdGlvbiogKGFzc2V0LCB0aW1lZnJhbWUsIHNpZ25hdHVyZUZvcm1hdCA9IFNpZ25hdHVyZUZvcm1hdC5FVEhFUkVVTV9TRVBPTElBKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuZmV0Y2hBUElSZXNwb25zZShgYWxsb3JhL2NvbnN1bWVyL3ByaWNlLyR7c2lnbmF0dXJlRm9ybWF0fS8ke2Fzc2V0fS8ke3RpbWVmcmFtZX1gKTtcbiAgICAgICAgICAgIGlmICghKChfYSA9IHJlc3BvbnNlLmRhdGEpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pbmZlcmVuY2VfZGF0YSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZmV0Y2ggcHJpY2UgaW5mZXJlbmNlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXRSZXF1ZXN0VXJsKGVuZHBvaW50KSB7XG4gICAgICAgIC8vIFJlbW92ZSB0cmFpbGluZyBzbGFzaCBmcm9tIGJhc2VBUElVcmwgaWYgaXQgZXhpc3RzXG4gICAgICAgIGNvbnN0IGFwaVVybCA9IHRoaXMuYmFzZUFQSVVybC5lbmRzV2l0aChcIi9cIilcbiAgICAgICAgICAgID8gdGhpcy5iYXNlQVBJVXJsLnNsaWNlKDAsIC0xKVxuICAgICAgICAgICAgOiB0aGlzLmJhc2VBUElVcmw7XG4gICAgICAgIC8vIFJlbW92ZSBsZWFkaW5nIHNsYXNoIGZyb20gZW5kcG9pbnQgaWYgaXQgZXhpc3RzXG4gICAgICAgIGVuZHBvaW50ID0gZW5kcG9pbnQuc3RhcnRzV2l0aChcIi9cIikgPyBlbmRwb2ludC5zbGljZSgxKSA6IGVuZHBvaW50O1xuICAgICAgICByZXR1cm4gYCR7YXBpVXJsfS8ke2VuZHBvaW50fWA7XG4gICAgfVxuICAgIGZldGNoQVBJUmVzcG9uc2UoZW5kcG9pbnRfMSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIGFyZ3VtZW50cywgdm9pZCAwLCBmdW5jdGlvbiogKGVuZHBvaW50LCBwYXJhbXMgPSB7fSkge1xuICAgICAgICAgICAgY29uc3QgcXVlcnlTdHJpbmcgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3RVcmwgPSB0aGlzLmdldFJlcXVlc3RVcmwoZW5kcG9pbnQpICsgKHF1ZXJ5U3RyaW5nID8gYD8ke3F1ZXJ5U3RyaW5nfWAgOiBcIlwiKTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgZmV0Y2gocmVxdWVzdFVybCwge1xuICAgICAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgIEFjY2VwdDogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgICAgICAgICAgICBcIngtYXBpLWtleVwiOiB0aGlzLmFwaUtleSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZUJvZHkgPSB5aWVsZCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZmV0Y2ggZnJvbSBBbGxvcmEgQVBJOiAgdXJsPSR7cmVxdWVzdFVybH0gc3RhdHVzPSR7cmVzcG9uc2Uuc3RhdHVzfSBib2R5PSR7SlNPTi5zdHJpbmdpZnkocmVzcG9uc2VCb2R5LCBudWxsLCA0KX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZUJvZHk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuQWxsb3JhQVBJQ2xpZW50ID0gQWxsb3JhQVBJQ2xpZW50O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@alloralabs/allora-sdk/dist/src/v2/api-client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@alloralabs/allora-sdk/dist/src/v2/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@alloralabs/allora-sdk/dist/src/v2/index.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./api-client */ \"(rsc)/./node_modules/@alloralabs/allora-sdk/dist/src/v2/api-client.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFsbG9yYWxhYnMvYWxsb3JhLXNkay9kaXN0L3NyYy92Mi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMsMkZBQWMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZHAtdGVzdC1hZ2VudC8uL25vZGVfbW9kdWxlcy9AYWxsb3JhbGFicy9hbGxvcmEtc2RrL2Rpc3Qvc3JjL3YyL2luZGV4LmpzPzQzZjgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9hcGktY2xpZW50XCIpLCBleHBvcnRzKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@alloralabs/allora-sdk/dist/src/v2/index.js\n");

/***/ })

};
;