"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/opensea-js";
exports.ids = ["vendor-chunks/opensea-js"];
exports.modules = {

/***/ "(rsc)/./node_modules/opensea-js/lib/api/api.js":
/*!************************************************!*\
  !*** ./node_modules/opensea-js/lib/api/api.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OpenSeaAPI = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(rsc)/./node_modules/ethers/lib.commonjs/index.js\");\nconst apiPaths_1 = __webpack_require__(/*! ./apiPaths */ \"(rsc)/./node_modules/opensea-js/lib/api/apiPaths.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/opensea-js/lib/api/types.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(rsc)/./node_modules/opensea-js/lib/constants.js\");\nconst utils_1 = __webpack_require__(/*! ../orders/utils */ \"(rsc)/./node_modules/opensea-js/lib/orders/utils.js\");\nconst types_2 = __webpack_require__(/*! ../types */ \"(rsc)/./node_modules/opensea-js/lib/types.js\");\nconst utils_2 = __webpack_require__(/*! ../utils/utils */ \"(rsc)/./node_modules/opensea-js/lib/utils/utils.js\");\n/**\n * The API class for the OpenSea SDK.\n * @category Main Classes\n */\nclass OpenSeaAPI {\n    /**\n     * Create an instance of the OpenSeaAPI\n     * @param config OpenSeaAPIConfig for setting up the API, including an optional API key, Chain name, and base URL\n     * @param logger Optional function for logging debug strings before and after requests are made. Defaults to no logging\n     */\n    constructor(config, logger) {\n        /**\n         * Default size to use for fetching orders\n         */\n        this.pageSize = 20;\n        this.apiKey = config.apiKey;\n        this.chain = config.chain ?? types_2.Chain.Mainnet;\n        if (config.apiBaseUrl) {\n            this.apiBaseUrl = config.apiBaseUrl;\n        }\n        else {\n            this.apiBaseUrl = (0, utils_2.isTestChain)(this.chain)\n                ? constants_1.API_BASE_TESTNET\n                : constants_1.API_BASE_MAINNET;\n        }\n        // Debugging: default to nothing\n        this.logger = logger ?? ((arg) => arg);\n    }\n    /**\n     * Gets an order from API based on query options.\n     * @param options\n     * @param options.side The side of the order (listing or offer)\n     * @param options.protocol The protocol, typically seaport, to query orders for\n     * @param options.orderDirection The direction to sort the orders\n     * @param options.orderBy The field to sort the orders by\n     * @param options.limit The number of orders to retrieve\n     * @param options.maker Filter by the wallet address of the order maker\n     * @param options.taker Filter by  wallet address of the order taker\n     * @param options.asset_contract_address Address of the NFT's contract\n     * @param options.token_ids String array of token IDs to filter by.\n     * @param options.listed_after Filter by orders listed after the Unix epoch timestamp in seconds\n     * @param options.listed_before Filter by orders listed before the Unix epoch timestamp in seconds\n     * @returns The first {@link OrderV2} returned by the API\n     *\n     * @throws An error if there are no matching orders.\n     */\n    async getOrder({ side, protocol = \"seaport\", orderDirection = \"desc\", orderBy = \"created_date\", ...restOptions }) {\n        const { orders } = await this.get((0, apiPaths_1.getOrdersAPIPath)(this.chain, protocol, side), (0, utils_1.serializeOrdersQueryOptions)({\n            limit: 1,\n            orderBy,\n            orderDirection,\n            ...restOptions,\n        }));\n        if (orders.length === 0) {\n            throw new Error(\"Not found: no matching order found\");\n        }\n        return (0, utils_1.deserializeOrder)(orders[0]);\n    }\n    /**\n     * Gets a list of orders from API based on query options.\n     * @param options\n     * @param options.side The side of the order (buy or sell)\n     * @param options.protocol The protocol, typically seaport, to query orders for\n     * @param options.orderDirection The direction to sort the orders\n     * @param options.orderBy The field to sort the orders by\n     * @param options.limit The number of orders to retrieve\n     * @param options.maker Filter by the wallet address of the order maker\n     * @param options.taker Filter by  wallet address of the order taker\n     * @param options.asset_contract_address Address of the NFT's contract\n     * @param options.token_ids String array of token IDs to filter by.\n     * @param options.listed_after Filter by orders listed after the Unix epoch timestamp in seconds\n     * @param options.listed_before Filter by orders listed before the Unix epoch timestamp in seconds\n     * @returns The {@link GetOrdersResponse} returned by the API.\n     */\n    async getOrders({ side, protocol = \"seaport\", orderDirection = \"desc\", orderBy = \"created_date\", ...restOptions }) {\n        const response = await this.get((0, apiPaths_1.getOrdersAPIPath)(this.chain, protocol, side), (0, utils_1.serializeOrdersQueryOptions)({\n            limit: this.pageSize,\n            orderBy,\n            orderDirection,\n            ...restOptions,\n        }));\n        return {\n            ...response,\n            orders: response.orders.map(utils_1.deserializeOrder),\n        };\n    }\n    /**\n     * Gets all offers for a given collection.\n     * @param collectionSlug The slug of the collection.\n     * @param limit The number of offers to return. Must be between 1 and 100. Default: 100\n     * @param next The cursor for the next page of results. This is returned from a previous request.\n     * @returns The {@link GetOffersResponse} returned by the API.\n     */\n    async getAllOffers(collectionSlug, limit, next) {\n        const response = await this.get((0, apiPaths_1.getAllOffersAPIPath)(collectionSlug), {\n            limit,\n            next,\n        });\n        return response;\n    }\n    /**\n     * Gets all listings for a given collection.\n     * @param collectionSlug The slug of the collection.\n     * @param limit The number of listings to return. Must be between 1 and 100. Default: 100\n     * @param next The cursor for the next page of results. This is returned from a previous request.\n     * @returns The {@link GetListingsResponse} returned by the API.\n     */\n    async getAllListings(collectionSlug, limit, next) {\n        const response = await this.get((0, apiPaths_1.getAllListingsAPIPath)(collectionSlug), {\n            limit,\n            next,\n        });\n        return response;\n    }\n    /**\n     * Gets the best offer for a given token.\n     * @param collectionSlug The slug of the collection.\n     * @param tokenId The token identifier.\n     * @returns The {@link GetBestOfferResponse} returned by the API.\n     */\n    async getBestOffer(collectionSlug, tokenId) {\n        const response = await this.get((0, apiPaths_1.getBestOfferAPIPath)(collectionSlug, tokenId));\n        return response;\n    }\n    /**\n     * Gets the best listing for a given token.\n     * @param collectionSlug The slug of the collection.\n     * @param tokenId The token identifier.\n     * @returns The {@link GetBestListingResponse} returned by the API.\n     */\n    async getBestListing(collectionSlug, tokenId) {\n        const response = await this.get((0, apiPaths_1.getBestListingAPIPath)(collectionSlug, tokenId));\n        return response;\n    }\n    /**\n     * Gets the best listings for a given collection.\n     * @param collectionSlug The slug of the collection.\n     * @param limit The number of listings to return. Must be between 1 and 100. Default: 100\n     * @param next The cursor for the next page of results. This is returned from a previous request.\n     * @returns The {@link GetListingsResponse} returned by the API.\n     */\n    async getBestListings(collectionSlug, limit, next) {\n        const response = await this.get((0, apiPaths_1.getBestListingsAPIPath)(collectionSlug), {\n            limit,\n            next,\n        });\n        return response;\n    }\n    /**\n     * Generate the data needed to fulfill a listing or an offer onchain.\n     * @param fulfillerAddress The wallet address which will be used to fulfill the order\n     * @param orderHash The hash of the order to fulfill\n     * @param protocolAddress The address of the seaport contract\n     * @side The side of the order (buy or sell)\n     * @returns The {@link FulfillmentDataResponse}\n     */\n    async generateFulfillmentData(fulfillerAddress, orderHash, protocolAddress, side) {\n        let payload = null;\n        if (side === types_2.OrderSide.LISTING) {\n            payload = (0, utils_1.getFulfillListingPayload)(fulfillerAddress, orderHash, protocolAddress, this.chain);\n        }\n        else {\n            payload = (0, utils_1.getFulfillOfferPayload)(fulfillerAddress, orderHash, protocolAddress, this.chain);\n        }\n        const response = await this.post((0, utils_1.getFulfillmentDataPath)(side), payload);\n        return response;\n    }\n    /**\n     * Post an order to OpenSea.\n     * @param order The order to post\n     * @param apiOptions\n     * @param apiOptions.protocol The protocol, typically seaport, to post the order to.\n     * @param apiOptions.side The side of the order (buy or sell).\n     * @param apiOptions.protocolAddress The address of the seaport contract.\n     * @param options\n     * @returns The {@link OrderV2} posted to the API.\n     */\n    async postOrder(order, apiOptions) {\n        const { protocol = \"seaport\", side, protocolAddress } = apiOptions;\n        // Validate required fields\n        if (!side) {\n            throw new Error(\"apiOptions.side is required\");\n        }\n        if (!protocolAddress) {\n            throw new Error(\"apiOptions.protocolAddress is required\");\n        }\n        if (!order) {\n            throw new Error(\"order data is required\");\n        }\n        // Validate protocol value\n        if (protocol !== \"seaport\") {\n            throw new Error(\"Currently only 'seaport' protocol is supported\");\n        }\n        // Validate side value\n        if (side !== \"ask\" && side !== \"bid\") {\n            throw new Error(\"side must be either 'ask' or 'bid'\");\n        }\n        // Validate protocolAddress format\n        if (!/^0x[a-fA-F0-9]{40}$/.test(protocolAddress)) {\n            throw new Error(\"Invalid protocol address format\");\n        }\n        const response = await this.post((0, apiPaths_1.getOrdersAPIPath)(this.chain, protocol, side), { ...order, protocol_address: protocolAddress });\n        return (0, utils_1.deserializeOrder)(response.order);\n    }\n    /**\n     * Build a OpenSea collection offer.\n     * @param offererAddress The wallet address which is creating the offer.\n     * @param quantity The number of NFTs requested in the offer.\n     * @param collectionSlug The slug (identifier) of the collection to build the offer for.\n     * @param offerProtectionEnabled Build the offer on OpenSea's signed zone to provide offer protections from receiving an item which is disabled from trading.\n     * @param traitType If defined, the trait name to create the collection offer for.\n     * @param traitValue If defined, the trait value to create the collection offer for.\n     * @returns The {@link BuildOfferResponse} returned by the API.\n     */\n    async buildOffer(offererAddress, quantity, collectionSlug, offerProtectionEnabled = true, traitType, traitValue) {\n        if (traitType || traitValue) {\n            if (!traitType || !traitValue) {\n                throw new Error(\"Both traitType and traitValue must be defined if one is defined.\");\n            }\n        }\n        const payload = (0, utils_1.getBuildCollectionOfferPayload)(offererAddress, quantity, collectionSlug, offerProtectionEnabled, traitType, traitValue);\n        const response = await this.post((0, apiPaths_1.getBuildOfferPath)(), payload);\n        return response;\n    }\n    /**\n     * Get a list collection offers for a given slug.\n     * @param slug The slug (identifier) of the collection to list offers for\n     * @returns The {@link ListCollectionOffersResponse} returned by the API.\n     */\n    async getCollectionOffers(slug) {\n        return await this.get((0, apiPaths_1.getCollectionOffersPath)(slug));\n    }\n    /**\n     * Post a collection offer to OpenSea.\n     * @param order The collection offer to post.\n     * @param slug The slug (identifier) of the collection to post the offer for.\n     * @param traitType If defined, the trait name to create the collection offer for.\n     * @param traitValue If defined, the trait value to create the collection offer for.\n     * @returns The {@link Offer} returned to the API.\n     */\n    async postCollectionOffer(order, slug, traitType, traitValue) {\n        const payload = (0, utils_1.getPostCollectionOfferPayload)(slug, order, traitType, traitValue);\n        return await this.post((0, apiPaths_1.getPostCollectionOfferPath)(), payload);\n    }\n    /**\n     * Fetch multiple NFTs for a collection.\n     * @param slug The slug (identifier) of the collection\n     * @param limit The number of NFTs to retrieve. Must be greater than 0 and less than 51.\n     * @param next Cursor to retrieve the next page of NFTs\n     * @returns The {@link ListNFTsResponse} returned by the API.\n     */\n    async getNFTsByCollection(slug, limit = undefined, next = undefined) {\n        const response = await this.get((0, apiPaths_1.getListNFTsByCollectionPath)(slug), {\n            limit,\n            next,\n        });\n        return response;\n    }\n    /**\n     * Fetch multiple NFTs for a contract.\n     * @param address The NFT's contract address.\n     * @param limit The number of NFTs to retrieve. Must be greater than 0 and less than 51.\n     * @param next Cursor to retrieve the next page of NFTs.\n     * @param chain The NFT's chain.\n     * @returns The {@link ListNFTsResponse} returned by the API.\n     */\n    async getNFTsByContract(address, limit = undefined, next = undefined, chain = this.chain) {\n        const response = await this.get((0, apiPaths_1.getListNFTsByContractPath)(chain, address), {\n            limit,\n            next,\n        });\n        return response;\n    }\n    /**\n     * Fetch NFTs owned by an account.\n     * @param address The address of the account\n     * @param limit The number of NFTs to retrieve. Must be greater than 0 and less than 51.\n     * @param next Cursor to retrieve the next page of NFTs\n     * @param chain The chain to query. Defaults to the chain set in the constructor.\n     * @returns The {@link ListNFTsResponse} returned by the API.\n     */\n    async getNFTsByAccount(address, limit = undefined, next = undefined, chain = this.chain) {\n        const response = await this.get((0, apiPaths_1.getListNFTsByAccountPath)(chain, address), {\n            limit,\n            next,\n        });\n        return response;\n    }\n    /**\n     * Fetch metadata, traits, ownership information, and rarity for a single NFT.\n     * @param address The NFT's contract address.\n     * @param identifier the identifier of the NFT (i.e. Token ID)\n     * @param chain The NFT's chain.\n     * @returns The {@link GetNFTResponse} returned by the API.\n     */\n    async getNFT(address, identifier, chain = this.chain) {\n        const response = await this.get((0, apiPaths_1.getNFTPath)(chain, address, identifier));\n        return response;\n    }\n    /**\n     * Fetch an OpenSea collection.\n     * @param slug The slug (identifier) of the collection.\n     * @returns The {@link OpenSeaCollection} returned by the API.\n     */\n    async getCollection(slug) {\n        const path = (0, apiPaths_1.getCollectionPath)(slug);\n        const response = await this.get(path);\n        return (0, utils_2.collectionFromJSON)(response);\n    }\n    /**\n     * Fetch a list of OpenSea collections.\n     * @param orderBy The order to return the collections in. Default: CREATED_DATE\n     * @param chain The chain to filter the collections on. Default: all chains\n     * @param creatorUsername The creator's OpenSea username to filter the collections on.\n     * @param includeHidden If hidden collections should be returned. Default: false\n     * @param limit The limit of collections to return.\n     * @param next The cursor for the next page of results. This is returned from a previous request.\n     * @returns List of {@link OpenSeaCollection} returned by the API.\n     */\n    async getCollections(orderBy = types_1.CollectionOrderByOption.CREATED_DATE, chain, creatorUsername, includeHidden = false, limit, next) {\n        const path = (0, apiPaths_1.getCollectionsPath)();\n        const args = {\n            order_by: orderBy,\n            chain,\n            creator_username: creatorUsername,\n            include_hidden: includeHidden,\n            limit,\n            next,\n        };\n        const response = await this.get(path, args);\n        response.collections = response.collections.map((collection) => (0, utils_2.collectionFromJSON)(collection));\n        return response;\n    }\n    /**\n     * Fetch stats for an OpenSea collection.\n     * @param slug The slug (identifier) of the collection.\n     * @returns The {@link OpenSeaCollection} returned by the API.\n     */\n    async getCollectionStats(slug) {\n        const path = (0, apiPaths_1.getCollectionStatsPath)(slug);\n        const response = await this.get(path);\n        return response;\n    }\n    /**\n     * Fetch a payment token.\n     * @param query Query to use for getting tokens. See {@link OpenSeaPaymentTokenQuery}.\n     * @param next The cursor for the next page of results. This is returned from a previous request.\n     * @returns The {@link OpenSeaPaymentToken} returned by the API.\n     */\n    async getPaymentToken(address, chain = this.chain) {\n        const json = await this.get((0, apiPaths_1.getPaymentTokenPath)(chain, address));\n        return (0, utils_2.paymentTokenFromJSON)(json);\n    }\n    /**\n     * Fetch account for an address.\n     * @param query Query to use for getting tokens. See {@link OpenSeaPaymentTokenQuery}.\n     * @param next The cursor for the next page of results. This is returned from a previous request.\n     * @returns The {@link GetAccountResponse} returned by the API.\n     */\n    async getAccount(address) {\n        const json = await this.get((0, apiPaths_1.getAccountPath)(address));\n        return (0, utils_2.accountFromJSON)(json);\n    }\n    /**\n     * Force refresh the metadata for an NFT.\n     * @param address The address of the NFT's contract.\n     * @param identifier The identifier of the NFT.\n     * @param chain The chain where the NFT is located.\n     * @returns The response from the API.\n     */\n    async refreshNFTMetadata(address, identifier, chain = this.chain) {\n        const response = await this.post((0, apiPaths_1.getRefreshMetadataPath)(chain, address, identifier), {});\n        return response;\n    }\n    /**\n     * Offchain cancel an order, offer or listing, by its order hash when protected by the SignedZone.\n     * Protocol and Chain are required to prevent hash collisions.\n     * Please note cancellation is only assured if a fulfillment signature was not vended prior to cancellation.\n     * @param protocolAddress The Seaport address for the order.\n     * @param orderHash The order hash, or external identifier, of the order.\n     * @param chain The chain where the order is located.\n     * @param offererSignature An EIP-712 signature from the offerer of the order.\n     *                         If this is not provided, the user associated with the API Key will be checked instead.\n     *                         The signature must be a EIP-712 signature consisting of the order's Seaport contract's\n     *                         name, version, address, and chain. The struct to sign is `OrderHash` containing a\n     *                         single bytes32 field.\n     * @returns The response from the API.\n     */\n    async offchainCancelOrder(protocolAddress, orderHash, chain = this.chain, offererSignature) {\n        const response = await this.post((0, apiPaths_1.getCancelOrderPath)(chain, protocolAddress, orderHash), { offererSignature });\n        return response;\n    }\n    /**\n     * Generic fetch method for any API endpoint\n     * @param apiPath Path to URL endpoint under API\n     * @param query URL query params. Will be used to create a URLSearchParams object.\n     * @returns @typeParam T The response from the API.\n     */\n    async get(apiPath, query = {}) {\n        const qs = this.objectToSearchParams(query);\n        const url = `${this.apiBaseUrl}${apiPath}?${qs}`;\n        return await this._fetch(url);\n    }\n    /**\n     * Generic post method for any API endpoint.\n     * @param apiPath Path to URL endpoint under API\n     * @param body Data to send.\n     * @param opts ethers ConnectionInfo, similar to Fetch API.\n     * @returns @typeParam T The response from the API.\n     */\n    async post(apiPath, body, opts) {\n        const url = `${this.apiBaseUrl}${apiPath}`;\n        return await this._fetch(url, opts, body);\n    }\n    objectToSearchParams(params = {}) {\n        const urlSearchParams = new URLSearchParams();\n        Object.entries(params).forEach(([key, value]) => {\n            if (value && Array.isArray(value)) {\n                value.forEach((item) => item && urlSearchParams.append(key, item));\n            }\n            else if (value) {\n                urlSearchParams.append(key, value);\n            }\n        });\n        return urlSearchParams.toString();\n    }\n    /**\n     * Get from an API Endpoint, sending auth token in headers\n     * @param opts ethers ConnectionInfo, similar to Fetch API\n     * @param body Optional body to send. If set, will POST, otherwise GET\n     */\n    async _fetch(url, headers, body) {\n        // Create the fetch request\n        const req = new ethers_1.ethers.FetchRequest(url);\n        // Set the headers\n        headers = {\n            \"x-app-id\": \"opensea-js\",\n            ...(this.apiKey ? { \"X-API-KEY\": this.apiKey } : {}),\n            ...headers,\n        };\n        for (const [key, value] of Object.entries(headers)) {\n            req.setHeader(key, value);\n        }\n        // Set the body if provided\n        if (body) {\n            req.body = body;\n        }\n        // Set the throttle params\n        req.setThrottleParams({ slotInterval: 1000 });\n        this.logger(`Sending request: ${url} ${JSON.stringify({\n            request: req,\n            headers: req.headers,\n        })}`);\n        const response = await req.send();\n        if (!response.ok()) {\n            // If an errors array is returned, throw with the error messages.\n            const errors = response.bodyJson?.errors;\n            if (errors?.length > 0) {\n                let errorMessage = errors.join(\", \");\n                if (errorMessage === \"[object Object]\") {\n                    errorMessage = JSON.stringify(errors);\n                }\n                throw new Error(`Server Error: ${errorMessage}`);\n            }\n            else {\n                // Otherwise, let ethers throw a SERVER_ERROR since it will include\n                // more context about the request and response.\n                response.assertOk();\n            }\n        }\n        return response.bodyJson;\n    }\n}\nexports.OpenSeaAPI = OpenSeaAPI;\n//# sourceMappingURL=api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbnNlYS1qcy9saWIvYXBpL2FwaS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0I7QUFDbEIsaUJBQWlCLG1CQUFPLENBQUMsaUVBQVE7QUFDakMsbUJBQW1CLG1CQUFPLENBQUMsdUVBQVk7QUFDdkMsZ0JBQWdCLG1CQUFPLENBQUMsaUVBQVM7QUFDakMsb0JBQW9CLG1CQUFPLENBQUMsc0VBQWM7QUFDMUMsZ0JBQWdCLG1CQUFPLENBQUMsNEVBQWlCO0FBQ3pDLGdCQUFnQixtQkFBTyxDQUFDLDhEQUFVO0FBQ2xDLGdCQUFnQixtQkFBTyxDQUFDLDBFQUFnQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsZUFBZTtBQUMxQztBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsK0ZBQStGO0FBQ3BILGdCQUFnQixTQUFTO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHlCQUF5QjtBQUM5QztBQUNBLHNCQUFzQiwrRkFBK0Y7QUFDckg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQix5QkFBeUI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiwyQkFBMkI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsNEJBQTRCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw4QkFBOEI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsMkJBQTJCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLGVBQWU7QUFDcEM7QUFDQTtBQUNBLGdCQUFnQiw4Q0FBOEM7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsR0FBRztBQUNoQztBQUNBO0FBQ0EseUdBQXlHLDZDQUE2QztBQUN0SjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiwwQkFBMEI7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixvQ0FBb0M7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsYUFBYTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQix3QkFBd0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHdCQUF3QjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsd0JBQXdCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsc0JBQXNCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIseUJBQXlCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIseUJBQXlCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQix5QkFBeUI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBEQUEwRCwrQkFBK0I7QUFDekY7QUFDQSxxQkFBcUIsMkJBQTJCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBELCtCQUErQjtBQUN6RjtBQUNBLHFCQUFxQiwwQkFBMEI7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrR0FBK0c7QUFDL0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtIQUFrSCxrQkFBa0I7QUFDcEk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBLHVCQUF1QixnQkFBZ0IsRUFBRSxRQUFRLEdBQUcsR0FBRztBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixnQkFBZ0IsRUFBRSxRQUFRO0FBQ2pEO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQywyQkFBMkIsSUFBSTtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxvQkFBb0I7QUFDcEQsd0NBQXdDLEtBQUssRUFBRTtBQUMvQztBQUNBO0FBQ0EsU0FBUyxFQUFFO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELGFBQWE7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZHAtdGVzdC1hZ2VudC8uL25vZGVfbW9kdWxlcy9vcGVuc2VhLWpzL2xpYi9hcGkvYXBpLmpzP2UwODYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk9wZW5TZWFBUEkgPSB2b2lkIDA7XG5jb25zdCBldGhlcnNfMSA9IHJlcXVpcmUoXCJldGhlcnNcIik7XG5jb25zdCBhcGlQYXRoc18xID0gcmVxdWlyZShcIi4vYXBpUGF0aHNcIik7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL29yZGVycy91dGlsc1wiKTtcbmNvbnN0IHR5cGVzXzIgPSByZXF1aXJlKFwiLi4vdHlwZXNcIik7XG5jb25zdCB1dGlsc18yID0gcmVxdWlyZShcIi4uL3V0aWxzL3V0aWxzXCIpO1xuLyoqXG4gKiBUaGUgQVBJIGNsYXNzIGZvciB0aGUgT3BlblNlYSBTREsuXG4gKiBAY2F0ZWdvcnkgTWFpbiBDbGFzc2VzXG4gKi9cbmNsYXNzIE9wZW5TZWFBUEkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiB0aGUgT3BlblNlYUFQSVxuICAgICAqIEBwYXJhbSBjb25maWcgT3BlblNlYUFQSUNvbmZpZyBmb3Igc2V0dGluZyB1cCB0aGUgQVBJLCBpbmNsdWRpbmcgYW4gb3B0aW9uYWwgQVBJIGtleSwgQ2hhaW4gbmFtZSwgYW5kIGJhc2UgVVJMXG4gICAgICogQHBhcmFtIGxvZ2dlciBPcHRpb25hbCBmdW5jdGlvbiBmb3IgbG9nZ2luZyBkZWJ1ZyBzdHJpbmdzIGJlZm9yZSBhbmQgYWZ0ZXIgcmVxdWVzdHMgYXJlIG1hZGUuIERlZmF1bHRzIHRvIG5vIGxvZ2dpbmdcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb25maWcsIGxvZ2dlcikge1xuICAgICAgICAvKipcbiAgICAgICAgICogRGVmYXVsdCBzaXplIHRvIHVzZSBmb3IgZmV0Y2hpbmcgb3JkZXJzXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnBhZ2VTaXplID0gMjA7XG4gICAgICAgIHRoaXMuYXBpS2V5ID0gY29uZmlnLmFwaUtleTtcbiAgICAgICAgdGhpcy5jaGFpbiA9IGNvbmZpZy5jaGFpbiA/PyB0eXBlc18yLkNoYWluLk1haW5uZXQ7XG4gICAgICAgIGlmIChjb25maWcuYXBpQmFzZVVybCkge1xuICAgICAgICAgICAgdGhpcy5hcGlCYXNlVXJsID0gY29uZmlnLmFwaUJhc2VVcmw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFwaUJhc2VVcmwgPSAoMCwgdXRpbHNfMi5pc1Rlc3RDaGFpbikodGhpcy5jaGFpbilcbiAgICAgICAgICAgICAgICA/IGNvbnN0YW50c18xLkFQSV9CQVNFX1RFU1RORVRcbiAgICAgICAgICAgICAgICA6IGNvbnN0YW50c18xLkFQSV9CQVNFX01BSU5ORVQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRGVidWdnaW5nOiBkZWZhdWx0IHRvIG5vdGhpbmdcbiAgICAgICAgdGhpcy5sb2dnZXIgPSBsb2dnZXIgPz8gKChhcmcpID0+IGFyZyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgYW4gb3JkZXIgZnJvbSBBUEkgYmFzZWQgb24gcXVlcnkgb3B0aW9ucy5cbiAgICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgICAqIEBwYXJhbSBvcHRpb25zLnNpZGUgVGhlIHNpZGUgb2YgdGhlIG9yZGVyIChsaXN0aW5nIG9yIG9mZmVyKVxuICAgICAqIEBwYXJhbSBvcHRpb25zLnByb3RvY29sIFRoZSBwcm90b2NvbCwgdHlwaWNhbGx5IHNlYXBvcnQsIHRvIHF1ZXJ5IG9yZGVycyBmb3JcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5vcmRlckRpcmVjdGlvbiBUaGUgZGlyZWN0aW9uIHRvIHNvcnQgdGhlIG9yZGVyc1xuICAgICAqIEBwYXJhbSBvcHRpb25zLm9yZGVyQnkgVGhlIGZpZWxkIHRvIHNvcnQgdGhlIG9yZGVycyBieVxuICAgICAqIEBwYXJhbSBvcHRpb25zLmxpbWl0IFRoZSBudW1iZXIgb2Ygb3JkZXJzIHRvIHJldHJpZXZlXG4gICAgICogQHBhcmFtIG9wdGlvbnMubWFrZXIgRmlsdGVyIGJ5IHRoZSB3YWxsZXQgYWRkcmVzcyBvZiB0aGUgb3JkZXIgbWFrZXJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy50YWtlciBGaWx0ZXIgYnkgIHdhbGxldCBhZGRyZXNzIG9mIHRoZSBvcmRlciB0YWtlclxuICAgICAqIEBwYXJhbSBvcHRpb25zLmFzc2V0X2NvbnRyYWN0X2FkZHJlc3MgQWRkcmVzcyBvZiB0aGUgTkZUJ3MgY29udHJhY3RcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy50b2tlbl9pZHMgU3RyaW5nIGFycmF5IG9mIHRva2VuIElEcyB0byBmaWx0ZXIgYnkuXG4gICAgICogQHBhcmFtIG9wdGlvbnMubGlzdGVkX2FmdGVyIEZpbHRlciBieSBvcmRlcnMgbGlzdGVkIGFmdGVyIHRoZSBVbml4IGVwb2NoIHRpbWVzdGFtcCBpbiBzZWNvbmRzXG4gICAgICogQHBhcmFtIG9wdGlvbnMubGlzdGVkX2JlZm9yZSBGaWx0ZXIgYnkgb3JkZXJzIGxpc3RlZCBiZWZvcmUgdGhlIFVuaXggZXBvY2ggdGltZXN0YW1wIGluIHNlY29uZHNcbiAgICAgKiBAcmV0dXJucyBUaGUgZmlyc3Qge0BsaW5rIE9yZGVyVjJ9IHJldHVybmVkIGJ5IHRoZSBBUElcbiAgICAgKlxuICAgICAqIEB0aHJvd3MgQW4gZXJyb3IgaWYgdGhlcmUgYXJlIG5vIG1hdGNoaW5nIG9yZGVycy5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRPcmRlcih7IHNpZGUsIHByb3RvY29sID0gXCJzZWFwb3J0XCIsIG9yZGVyRGlyZWN0aW9uID0gXCJkZXNjXCIsIG9yZGVyQnkgPSBcImNyZWF0ZWRfZGF0ZVwiLCAuLi5yZXN0T3B0aW9ucyB9KSB7XG4gICAgICAgIGNvbnN0IHsgb3JkZXJzIH0gPSBhd2FpdCB0aGlzLmdldCgoMCwgYXBpUGF0aHNfMS5nZXRPcmRlcnNBUElQYXRoKSh0aGlzLmNoYWluLCBwcm90b2NvbCwgc2lkZSksICgwLCB1dGlsc18xLnNlcmlhbGl6ZU9yZGVyc1F1ZXJ5T3B0aW9ucykoe1xuICAgICAgICAgICAgbGltaXQ6IDEsXG4gICAgICAgICAgICBvcmRlckJ5LFxuICAgICAgICAgICAgb3JkZXJEaXJlY3Rpb24sXG4gICAgICAgICAgICAuLi5yZXN0T3B0aW9ucyxcbiAgICAgICAgfSkpO1xuICAgICAgICBpZiAob3JkZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IGZvdW5kOiBubyBtYXRjaGluZyBvcmRlciBmb3VuZFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKDAsIHV0aWxzXzEuZGVzZXJpYWxpemVPcmRlcikob3JkZXJzWzBdKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhIGxpc3Qgb2Ygb3JkZXJzIGZyb20gQVBJIGJhc2VkIG9uIHF1ZXJ5IG9wdGlvbnMuXG4gICAgICogQHBhcmFtIG9wdGlvbnNcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5zaWRlIFRoZSBzaWRlIG9mIHRoZSBvcmRlciAoYnV5IG9yIHNlbGwpXG4gICAgICogQHBhcmFtIG9wdGlvbnMucHJvdG9jb2wgVGhlIHByb3RvY29sLCB0eXBpY2FsbHkgc2VhcG9ydCwgdG8gcXVlcnkgb3JkZXJzIGZvclxuICAgICAqIEBwYXJhbSBvcHRpb25zLm9yZGVyRGlyZWN0aW9uIFRoZSBkaXJlY3Rpb24gdG8gc29ydCB0aGUgb3JkZXJzXG4gICAgICogQHBhcmFtIG9wdGlvbnMub3JkZXJCeSBUaGUgZmllbGQgdG8gc29ydCB0aGUgb3JkZXJzIGJ5XG4gICAgICogQHBhcmFtIG9wdGlvbnMubGltaXQgVGhlIG51bWJlciBvZiBvcmRlcnMgdG8gcmV0cmlldmVcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5tYWtlciBGaWx0ZXIgYnkgdGhlIHdhbGxldCBhZGRyZXNzIG9mIHRoZSBvcmRlciBtYWtlclxuICAgICAqIEBwYXJhbSBvcHRpb25zLnRha2VyIEZpbHRlciBieSAgd2FsbGV0IGFkZHJlc3Mgb2YgdGhlIG9yZGVyIHRha2VyXG4gICAgICogQHBhcmFtIG9wdGlvbnMuYXNzZXRfY29udHJhY3RfYWRkcmVzcyBBZGRyZXNzIG9mIHRoZSBORlQncyBjb250cmFjdFxuICAgICAqIEBwYXJhbSBvcHRpb25zLnRva2VuX2lkcyBTdHJpbmcgYXJyYXkgb2YgdG9rZW4gSURzIHRvIGZpbHRlciBieS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5saXN0ZWRfYWZ0ZXIgRmlsdGVyIGJ5IG9yZGVycyBsaXN0ZWQgYWZ0ZXIgdGhlIFVuaXggZXBvY2ggdGltZXN0YW1wIGluIHNlY29uZHNcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5saXN0ZWRfYmVmb3JlIEZpbHRlciBieSBvcmRlcnMgbGlzdGVkIGJlZm9yZSB0aGUgVW5peCBlcG9jaCB0aW1lc3RhbXAgaW4gc2Vjb25kc1xuICAgICAqIEByZXR1cm5zIFRoZSB7QGxpbmsgR2V0T3JkZXJzUmVzcG9uc2V9IHJldHVybmVkIGJ5IHRoZSBBUEkuXG4gICAgICovXG4gICAgYXN5bmMgZ2V0T3JkZXJzKHsgc2lkZSwgcHJvdG9jb2wgPSBcInNlYXBvcnRcIiwgb3JkZXJEaXJlY3Rpb24gPSBcImRlc2NcIiwgb3JkZXJCeSA9IFwiY3JlYXRlZF9kYXRlXCIsIC4uLnJlc3RPcHRpb25zIH0pIHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmdldCgoMCwgYXBpUGF0aHNfMS5nZXRPcmRlcnNBUElQYXRoKSh0aGlzLmNoYWluLCBwcm90b2NvbCwgc2lkZSksICgwLCB1dGlsc18xLnNlcmlhbGl6ZU9yZGVyc1F1ZXJ5T3B0aW9ucykoe1xuICAgICAgICAgICAgbGltaXQ6IHRoaXMucGFnZVNpemUsXG4gICAgICAgICAgICBvcmRlckJ5LFxuICAgICAgICAgICAgb3JkZXJEaXJlY3Rpb24sXG4gICAgICAgICAgICAuLi5yZXN0T3B0aW9ucyxcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4ucmVzcG9uc2UsXG4gICAgICAgICAgICBvcmRlcnM6IHJlc3BvbnNlLm9yZGVycy5tYXAodXRpbHNfMS5kZXNlcmlhbGl6ZU9yZGVyKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgb2ZmZXJzIGZvciBhIGdpdmVuIGNvbGxlY3Rpb24uXG4gICAgICogQHBhcmFtIGNvbGxlY3Rpb25TbHVnIFRoZSBzbHVnIG9mIHRoZSBjb2xsZWN0aW9uLlxuICAgICAqIEBwYXJhbSBsaW1pdCBUaGUgbnVtYmVyIG9mIG9mZmVycyB0byByZXR1cm4uIE11c3QgYmUgYmV0d2VlbiAxIGFuZCAxMDAuIERlZmF1bHQ6IDEwMFxuICAgICAqIEBwYXJhbSBuZXh0IFRoZSBjdXJzb3IgZm9yIHRoZSBuZXh0IHBhZ2Ugb2YgcmVzdWx0cy4gVGhpcyBpcyByZXR1cm5lZCBmcm9tIGEgcHJldmlvdXMgcmVxdWVzdC5cbiAgICAgKiBAcmV0dXJucyBUaGUge0BsaW5rIEdldE9mZmVyc1Jlc3BvbnNlfSByZXR1cm5lZCBieSB0aGUgQVBJLlxuICAgICAqL1xuICAgIGFzeW5jIGdldEFsbE9mZmVycyhjb2xsZWN0aW9uU2x1ZywgbGltaXQsIG5leHQpIHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmdldCgoMCwgYXBpUGF0aHNfMS5nZXRBbGxPZmZlcnNBUElQYXRoKShjb2xsZWN0aW9uU2x1ZyksIHtcbiAgICAgICAgICAgIGxpbWl0LFxuICAgICAgICAgICAgbmV4dCxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgbGlzdGluZ3MgZm9yIGEgZ2l2ZW4gY29sbGVjdGlvbi5cbiAgICAgKiBAcGFyYW0gY29sbGVjdGlvblNsdWcgVGhlIHNsdWcgb2YgdGhlIGNvbGxlY3Rpb24uXG4gICAgICogQHBhcmFtIGxpbWl0IFRoZSBudW1iZXIgb2YgbGlzdGluZ3MgdG8gcmV0dXJuLiBNdXN0IGJlIGJldHdlZW4gMSBhbmQgMTAwLiBEZWZhdWx0OiAxMDBcbiAgICAgKiBAcGFyYW0gbmV4dCBUaGUgY3Vyc29yIGZvciB0aGUgbmV4dCBwYWdlIG9mIHJlc3VsdHMuIFRoaXMgaXMgcmV0dXJuZWQgZnJvbSBhIHByZXZpb3VzIHJlcXVlc3QuXG4gICAgICogQHJldHVybnMgVGhlIHtAbGluayBHZXRMaXN0aW5nc1Jlc3BvbnNlfSByZXR1cm5lZCBieSB0aGUgQVBJLlxuICAgICAqL1xuICAgIGFzeW5jIGdldEFsbExpc3RpbmdzKGNvbGxlY3Rpb25TbHVnLCBsaW1pdCwgbmV4dCkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZ2V0KCgwLCBhcGlQYXRoc18xLmdldEFsbExpc3RpbmdzQVBJUGF0aCkoY29sbGVjdGlvblNsdWcpLCB7XG4gICAgICAgICAgICBsaW1pdCxcbiAgICAgICAgICAgIG5leHQsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGJlc3Qgb2ZmZXIgZm9yIGEgZ2l2ZW4gdG9rZW4uXG4gICAgICogQHBhcmFtIGNvbGxlY3Rpb25TbHVnIFRoZSBzbHVnIG9mIHRoZSBjb2xsZWN0aW9uLlxuICAgICAqIEBwYXJhbSB0b2tlbklkIFRoZSB0b2tlbiBpZGVudGlmaWVyLlxuICAgICAqIEByZXR1cm5zIFRoZSB7QGxpbmsgR2V0QmVzdE9mZmVyUmVzcG9uc2V9IHJldHVybmVkIGJ5IHRoZSBBUEkuXG4gICAgICovXG4gICAgYXN5bmMgZ2V0QmVzdE9mZmVyKGNvbGxlY3Rpb25TbHVnLCB0b2tlbklkKSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5nZXQoKDAsIGFwaVBhdGhzXzEuZ2V0QmVzdE9mZmVyQVBJUGF0aCkoY29sbGVjdGlvblNsdWcsIHRva2VuSWQpKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBiZXN0IGxpc3RpbmcgZm9yIGEgZ2l2ZW4gdG9rZW4uXG4gICAgICogQHBhcmFtIGNvbGxlY3Rpb25TbHVnIFRoZSBzbHVnIG9mIHRoZSBjb2xsZWN0aW9uLlxuICAgICAqIEBwYXJhbSB0b2tlbklkIFRoZSB0b2tlbiBpZGVudGlmaWVyLlxuICAgICAqIEByZXR1cm5zIFRoZSB7QGxpbmsgR2V0QmVzdExpc3RpbmdSZXNwb25zZX0gcmV0dXJuZWQgYnkgdGhlIEFQSS5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRCZXN0TGlzdGluZyhjb2xsZWN0aW9uU2x1ZywgdG9rZW5JZCkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZ2V0KCgwLCBhcGlQYXRoc18xLmdldEJlc3RMaXN0aW5nQVBJUGF0aCkoY29sbGVjdGlvblNsdWcsIHRva2VuSWQpKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBiZXN0IGxpc3RpbmdzIGZvciBhIGdpdmVuIGNvbGxlY3Rpb24uXG4gICAgICogQHBhcmFtIGNvbGxlY3Rpb25TbHVnIFRoZSBzbHVnIG9mIHRoZSBjb2xsZWN0aW9uLlxuICAgICAqIEBwYXJhbSBsaW1pdCBUaGUgbnVtYmVyIG9mIGxpc3RpbmdzIHRvIHJldHVybi4gTXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDEwMC4gRGVmYXVsdDogMTAwXG4gICAgICogQHBhcmFtIG5leHQgVGhlIGN1cnNvciBmb3IgdGhlIG5leHQgcGFnZSBvZiByZXN1bHRzLiBUaGlzIGlzIHJldHVybmVkIGZyb20gYSBwcmV2aW91cyByZXF1ZXN0LlxuICAgICAqIEByZXR1cm5zIFRoZSB7QGxpbmsgR2V0TGlzdGluZ3NSZXNwb25zZX0gcmV0dXJuZWQgYnkgdGhlIEFQSS5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRCZXN0TGlzdGluZ3MoY29sbGVjdGlvblNsdWcsIGxpbWl0LCBuZXh0KSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5nZXQoKDAsIGFwaVBhdGhzXzEuZ2V0QmVzdExpc3RpbmdzQVBJUGF0aCkoY29sbGVjdGlvblNsdWcpLCB7XG4gICAgICAgICAgICBsaW1pdCxcbiAgICAgICAgICAgIG5leHQsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlIHRoZSBkYXRhIG5lZWRlZCB0byBmdWxmaWxsIGEgbGlzdGluZyBvciBhbiBvZmZlciBvbmNoYWluLlxuICAgICAqIEBwYXJhbSBmdWxmaWxsZXJBZGRyZXNzIFRoZSB3YWxsZXQgYWRkcmVzcyB3aGljaCB3aWxsIGJlIHVzZWQgdG8gZnVsZmlsbCB0aGUgb3JkZXJcbiAgICAgKiBAcGFyYW0gb3JkZXJIYXNoIFRoZSBoYXNoIG9mIHRoZSBvcmRlciB0byBmdWxmaWxsXG4gICAgICogQHBhcmFtIHByb3RvY29sQWRkcmVzcyBUaGUgYWRkcmVzcyBvZiB0aGUgc2VhcG9ydCBjb250cmFjdFxuICAgICAqIEBzaWRlIFRoZSBzaWRlIG9mIHRoZSBvcmRlciAoYnV5IG9yIHNlbGwpXG4gICAgICogQHJldHVybnMgVGhlIHtAbGluayBGdWxmaWxsbWVudERhdGFSZXNwb25zZX1cbiAgICAgKi9cbiAgICBhc3luYyBnZW5lcmF0ZUZ1bGZpbGxtZW50RGF0YShmdWxmaWxsZXJBZGRyZXNzLCBvcmRlckhhc2gsIHByb3RvY29sQWRkcmVzcywgc2lkZSkge1xuICAgICAgICBsZXQgcGF5bG9hZCA9IG51bGw7XG4gICAgICAgIGlmIChzaWRlID09PSB0eXBlc18yLk9yZGVyU2lkZS5MSVNUSU5HKSB7XG4gICAgICAgICAgICBwYXlsb2FkID0gKDAsIHV0aWxzXzEuZ2V0RnVsZmlsbExpc3RpbmdQYXlsb2FkKShmdWxmaWxsZXJBZGRyZXNzLCBvcmRlckhhc2gsIHByb3RvY29sQWRkcmVzcywgdGhpcy5jaGFpbik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwYXlsb2FkID0gKDAsIHV0aWxzXzEuZ2V0RnVsZmlsbE9mZmVyUGF5bG9hZCkoZnVsZmlsbGVyQWRkcmVzcywgb3JkZXJIYXNoLCBwcm90b2NvbEFkZHJlc3MsIHRoaXMuY2hhaW4pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wb3N0KCgwLCB1dGlsc18xLmdldEZ1bGZpbGxtZW50RGF0YVBhdGgpKHNpZGUpLCBwYXlsb2FkKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQb3N0IGFuIG9yZGVyIHRvIE9wZW5TZWEuXG4gICAgICogQHBhcmFtIG9yZGVyIFRoZSBvcmRlciB0byBwb3N0XG4gICAgICogQHBhcmFtIGFwaU9wdGlvbnNcbiAgICAgKiBAcGFyYW0gYXBpT3B0aW9ucy5wcm90b2NvbCBUaGUgcHJvdG9jb2wsIHR5cGljYWxseSBzZWFwb3J0LCB0byBwb3N0IHRoZSBvcmRlciB0by5cbiAgICAgKiBAcGFyYW0gYXBpT3B0aW9ucy5zaWRlIFRoZSBzaWRlIG9mIHRoZSBvcmRlciAoYnV5IG9yIHNlbGwpLlxuICAgICAqIEBwYXJhbSBhcGlPcHRpb25zLnByb3RvY29sQWRkcmVzcyBUaGUgYWRkcmVzcyBvZiB0aGUgc2VhcG9ydCBjb250cmFjdC5cbiAgICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgICAqIEByZXR1cm5zIFRoZSB7QGxpbmsgT3JkZXJWMn0gcG9zdGVkIHRvIHRoZSBBUEkuXG4gICAgICovXG4gICAgYXN5bmMgcG9zdE9yZGVyKG9yZGVyLCBhcGlPcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgcHJvdG9jb2wgPSBcInNlYXBvcnRcIiwgc2lkZSwgcHJvdG9jb2xBZGRyZXNzIH0gPSBhcGlPcHRpb25zO1xuICAgICAgICAvLyBWYWxpZGF0ZSByZXF1aXJlZCBmaWVsZHNcbiAgICAgICAgaWYgKCFzaWRlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhcGlPcHRpb25zLnNpZGUgaXMgcmVxdWlyZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFwcm90b2NvbEFkZHJlc3MpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImFwaU9wdGlvbnMucHJvdG9jb2xBZGRyZXNzIGlzIHJlcXVpcmVkXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghb3JkZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm9yZGVyIGRhdGEgaXMgcmVxdWlyZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVmFsaWRhdGUgcHJvdG9jb2wgdmFsdWVcbiAgICAgICAgaWYgKHByb3RvY29sICE9PSBcInNlYXBvcnRcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ3VycmVudGx5IG9ubHkgJ3NlYXBvcnQnIHByb3RvY29sIGlzIHN1cHBvcnRlZFwiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBWYWxpZGF0ZSBzaWRlIHZhbHVlXG4gICAgICAgIGlmIChzaWRlICE9PSBcImFza1wiICYmIHNpZGUgIT09IFwiYmlkXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInNpZGUgbXVzdCBiZSBlaXRoZXIgJ2Fzaycgb3IgJ2JpZCdcIik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVmFsaWRhdGUgcHJvdG9jb2xBZGRyZXNzIGZvcm1hdFxuICAgICAgICBpZiAoIS9eMHhbYS1mQS1GMC05XXs0MH0kLy50ZXN0KHByb3RvY29sQWRkcmVzcykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcHJvdG9jb2wgYWRkcmVzcyBmb3JtYXRcIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnBvc3QoKDAsIGFwaVBhdGhzXzEuZ2V0T3JkZXJzQVBJUGF0aCkodGhpcy5jaGFpbiwgcHJvdG9jb2wsIHNpZGUpLCB7IC4uLm9yZGVyLCBwcm90b2NvbF9hZGRyZXNzOiBwcm90b2NvbEFkZHJlc3MgfSk7XG4gICAgICAgIHJldHVybiAoMCwgdXRpbHNfMS5kZXNlcmlhbGl6ZU9yZGVyKShyZXNwb25zZS5vcmRlcik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEJ1aWxkIGEgT3BlblNlYSBjb2xsZWN0aW9uIG9mZmVyLlxuICAgICAqIEBwYXJhbSBvZmZlcmVyQWRkcmVzcyBUaGUgd2FsbGV0IGFkZHJlc3Mgd2hpY2ggaXMgY3JlYXRpbmcgdGhlIG9mZmVyLlxuICAgICAqIEBwYXJhbSBxdWFudGl0eSBUaGUgbnVtYmVyIG9mIE5GVHMgcmVxdWVzdGVkIGluIHRoZSBvZmZlci5cbiAgICAgKiBAcGFyYW0gY29sbGVjdGlvblNsdWcgVGhlIHNsdWcgKGlkZW50aWZpZXIpIG9mIHRoZSBjb2xsZWN0aW9uIHRvIGJ1aWxkIHRoZSBvZmZlciBmb3IuXG4gICAgICogQHBhcmFtIG9mZmVyUHJvdGVjdGlvbkVuYWJsZWQgQnVpbGQgdGhlIG9mZmVyIG9uIE9wZW5TZWEncyBzaWduZWQgem9uZSB0byBwcm92aWRlIG9mZmVyIHByb3RlY3Rpb25zIGZyb20gcmVjZWl2aW5nIGFuIGl0ZW0gd2hpY2ggaXMgZGlzYWJsZWQgZnJvbSB0cmFkaW5nLlxuICAgICAqIEBwYXJhbSB0cmFpdFR5cGUgSWYgZGVmaW5lZCwgdGhlIHRyYWl0IG5hbWUgdG8gY3JlYXRlIHRoZSBjb2xsZWN0aW9uIG9mZmVyIGZvci5cbiAgICAgKiBAcGFyYW0gdHJhaXRWYWx1ZSBJZiBkZWZpbmVkLCB0aGUgdHJhaXQgdmFsdWUgdG8gY3JlYXRlIHRoZSBjb2xsZWN0aW9uIG9mZmVyIGZvci5cbiAgICAgKiBAcmV0dXJucyBUaGUge0BsaW5rIEJ1aWxkT2ZmZXJSZXNwb25zZX0gcmV0dXJuZWQgYnkgdGhlIEFQSS5cbiAgICAgKi9cbiAgICBhc3luYyBidWlsZE9mZmVyKG9mZmVyZXJBZGRyZXNzLCBxdWFudGl0eSwgY29sbGVjdGlvblNsdWcsIG9mZmVyUHJvdGVjdGlvbkVuYWJsZWQgPSB0cnVlLCB0cmFpdFR5cGUsIHRyYWl0VmFsdWUpIHtcbiAgICAgICAgaWYgKHRyYWl0VHlwZSB8fCB0cmFpdFZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoIXRyYWl0VHlwZSB8fCAhdHJhaXRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkJvdGggdHJhaXRUeXBlIGFuZCB0cmFpdFZhbHVlIG11c3QgYmUgZGVmaW5lZCBpZiBvbmUgaXMgZGVmaW5lZC5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGF5bG9hZCA9ICgwLCB1dGlsc18xLmdldEJ1aWxkQ29sbGVjdGlvbk9mZmVyUGF5bG9hZCkob2ZmZXJlckFkZHJlc3MsIHF1YW50aXR5LCBjb2xsZWN0aW9uU2x1Zywgb2ZmZXJQcm90ZWN0aW9uRW5hYmxlZCwgdHJhaXRUeXBlLCB0cmFpdFZhbHVlKTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnBvc3QoKDAsIGFwaVBhdGhzXzEuZ2V0QnVpbGRPZmZlclBhdGgpKCksIHBheWxvYWQpO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhIGxpc3QgY29sbGVjdGlvbiBvZmZlcnMgZm9yIGEgZ2l2ZW4gc2x1Zy5cbiAgICAgKiBAcGFyYW0gc2x1ZyBUaGUgc2x1ZyAoaWRlbnRpZmllcikgb2YgdGhlIGNvbGxlY3Rpb24gdG8gbGlzdCBvZmZlcnMgZm9yXG4gICAgICogQHJldHVybnMgVGhlIHtAbGluayBMaXN0Q29sbGVjdGlvbk9mZmVyc1Jlc3BvbnNlfSByZXR1cm5lZCBieSB0aGUgQVBJLlxuICAgICAqL1xuICAgIGFzeW5jIGdldENvbGxlY3Rpb25PZmZlcnMoc2x1Zykge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXQoKDAsIGFwaVBhdGhzXzEuZ2V0Q29sbGVjdGlvbk9mZmVyc1BhdGgpKHNsdWcpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUG9zdCBhIGNvbGxlY3Rpb24gb2ZmZXIgdG8gT3BlblNlYS5cbiAgICAgKiBAcGFyYW0gb3JkZXIgVGhlIGNvbGxlY3Rpb24gb2ZmZXIgdG8gcG9zdC5cbiAgICAgKiBAcGFyYW0gc2x1ZyBUaGUgc2x1ZyAoaWRlbnRpZmllcikgb2YgdGhlIGNvbGxlY3Rpb24gdG8gcG9zdCB0aGUgb2ZmZXIgZm9yLlxuICAgICAqIEBwYXJhbSB0cmFpdFR5cGUgSWYgZGVmaW5lZCwgdGhlIHRyYWl0IG5hbWUgdG8gY3JlYXRlIHRoZSBjb2xsZWN0aW9uIG9mZmVyIGZvci5cbiAgICAgKiBAcGFyYW0gdHJhaXRWYWx1ZSBJZiBkZWZpbmVkLCB0aGUgdHJhaXQgdmFsdWUgdG8gY3JlYXRlIHRoZSBjb2xsZWN0aW9uIG9mZmVyIGZvci5cbiAgICAgKiBAcmV0dXJucyBUaGUge0BsaW5rIE9mZmVyfSByZXR1cm5lZCB0byB0aGUgQVBJLlxuICAgICAqL1xuICAgIGFzeW5jIHBvc3RDb2xsZWN0aW9uT2ZmZXIob3JkZXIsIHNsdWcsIHRyYWl0VHlwZSwgdHJhaXRWYWx1ZSkge1xuICAgICAgICBjb25zdCBwYXlsb2FkID0gKDAsIHV0aWxzXzEuZ2V0UG9zdENvbGxlY3Rpb25PZmZlclBheWxvYWQpKHNsdWcsIG9yZGVyLCB0cmFpdFR5cGUsIHRyYWl0VmFsdWUpO1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5wb3N0KCgwLCBhcGlQYXRoc18xLmdldFBvc3RDb2xsZWN0aW9uT2ZmZXJQYXRoKSgpLCBwYXlsb2FkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmV0Y2ggbXVsdGlwbGUgTkZUcyBmb3IgYSBjb2xsZWN0aW9uLlxuICAgICAqIEBwYXJhbSBzbHVnIFRoZSBzbHVnIChpZGVudGlmaWVyKSBvZiB0aGUgY29sbGVjdGlvblxuICAgICAqIEBwYXJhbSBsaW1pdCBUaGUgbnVtYmVyIG9mIE5GVHMgdG8gcmV0cmlldmUuIE11c3QgYmUgZ3JlYXRlciB0aGFuIDAgYW5kIGxlc3MgdGhhbiA1MS5cbiAgICAgKiBAcGFyYW0gbmV4dCBDdXJzb3IgdG8gcmV0cmlldmUgdGhlIG5leHQgcGFnZSBvZiBORlRzXG4gICAgICogQHJldHVybnMgVGhlIHtAbGluayBMaXN0TkZUc1Jlc3BvbnNlfSByZXR1cm5lZCBieSB0aGUgQVBJLlxuICAgICAqL1xuICAgIGFzeW5jIGdldE5GVHNCeUNvbGxlY3Rpb24oc2x1ZywgbGltaXQgPSB1bmRlZmluZWQsIG5leHQgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmdldCgoMCwgYXBpUGF0aHNfMS5nZXRMaXN0TkZUc0J5Q29sbGVjdGlvblBhdGgpKHNsdWcpLCB7XG4gICAgICAgICAgICBsaW1pdCxcbiAgICAgICAgICAgIG5leHQsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZldGNoIG11bHRpcGxlIE5GVHMgZm9yIGEgY29udHJhY3QuXG4gICAgICogQHBhcmFtIGFkZHJlc3MgVGhlIE5GVCdzIGNvbnRyYWN0IGFkZHJlc3MuXG4gICAgICogQHBhcmFtIGxpbWl0IFRoZSBudW1iZXIgb2YgTkZUcyB0byByZXRyaWV2ZS4gTXVzdCBiZSBncmVhdGVyIHRoYW4gMCBhbmQgbGVzcyB0aGFuIDUxLlxuICAgICAqIEBwYXJhbSBuZXh0IEN1cnNvciB0byByZXRyaWV2ZSB0aGUgbmV4dCBwYWdlIG9mIE5GVHMuXG4gICAgICogQHBhcmFtIGNoYWluIFRoZSBORlQncyBjaGFpbi5cbiAgICAgKiBAcmV0dXJucyBUaGUge0BsaW5rIExpc3RORlRzUmVzcG9uc2V9IHJldHVybmVkIGJ5IHRoZSBBUEkuXG4gICAgICovXG4gICAgYXN5bmMgZ2V0TkZUc0J5Q29udHJhY3QoYWRkcmVzcywgbGltaXQgPSB1bmRlZmluZWQsIG5leHQgPSB1bmRlZmluZWQsIGNoYWluID0gdGhpcy5jaGFpbikge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZ2V0KCgwLCBhcGlQYXRoc18xLmdldExpc3RORlRzQnlDb250cmFjdFBhdGgpKGNoYWluLCBhZGRyZXNzKSwge1xuICAgICAgICAgICAgbGltaXQsXG4gICAgICAgICAgICBuZXh0LFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGZXRjaCBORlRzIG93bmVkIGJ5IGFuIGFjY291bnQuXG4gICAgICogQHBhcmFtIGFkZHJlc3MgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnRcbiAgICAgKiBAcGFyYW0gbGltaXQgVGhlIG51bWJlciBvZiBORlRzIHRvIHJldHJpZXZlLiBNdXN0IGJlIGdyZWF0ZXIgdGhhbiAwIGFuZCBsZXNzIHRoYW4gNTEuXG4gICAgICogQHBhcmFtIG5leHQgQ3Vyc29yIHRvIHJldHJpZXZlIHRoZSBuZXh0IHBhZ2Ugb2YgTkZUc1xuICAgICAqIEBwYXJhbSBjaGFpbiBUaGUgY2hhaW4gdG8gcXVlcnkuIERlZmF1bHRzIHRvIHRoZSBjaGFpbiBzZXQgaW4gdGhlIGNvbnN0cnVjdG9yLlxuICAgICAqIEByZXR1cm5zIFRoZSB7QGxpbmsgTGlzdE5GVHNSZXNwb25zZX0gcmV0dXJuZWQgYnkgdGhlIEFQSS5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRORlRzQnlBY2NvdW50KGFkZHJlc3MsIGxpbWl0ID0gdW5kZWZpbmVkLCBuZXh0ID0gdW5kZWZpbmVkLCBjaGFpbiA9IHRoaXMuY2hhaW4pIHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmdldCgoMCwgYXBpUGF0aHNfMS5nZXRMaXN0TkZUc0J5QWNjb3VudFBhdGgpKGNoYWluLCBhZGRyZXNzKSwge1xuICAgICAgICAgICAgbGltaXQsXG4gICAgICAgICAgICBuZXh0LFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGZXRjaCBtZXRhZGF0YSwgdHJhaXRzLCBvd25lcnNoaXAgaW5mb3JtYXRpb24sIGFuZCByYXJpdHkgZm9yIGEgc2luZ2xlIE5GVC5cbiAgICAgKiBAcGFyYW0gYWRkcmVzcyBUaGUgTkZUJ3MgY29udHJhY3QgYWRkcmVzcy5cbiAgICAgKiBAcGFyYW0gaWRlbnRpZmllciB0aGUgaWRlbnRpZmllciBvZiB0aGUgTkZUIChpLmUuIFRva2VuIElEKVxuICAgICAqIEBwYXJhbSBjaGFpbiBUaGUgTkZUJ3MgY2hhaW4uXG4gICAgICogQHJldHVybnMgVGhlIHtAbGluayBHZXRORlRSZXNwb25zZX0gcmV0dXJuZWQgYnkgdGhlIEFQSS5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRORlQoYWRkcmVzcywgaWRlbnRpZmllciwgY2hhaW4gPSB0aGlzLmNoYWluKSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5nZXQoKDAsIGFwaVBhdGhzXzEuZ2V0TkZUUGF0aCkoY2hhaW4sIGFkZHJlc3MsIGlkZW50aWZpZXIpKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGZXRjaCBhbiBPcGVuU2VhIGNvbGxlY3Rpb24uXG4gICAgICogQHBhcmFtIHNsdWcgVGhlIHNsdWcgKGlkZW50aWZpZXIpIG9mIHRoZSBjb2xsZWN0aW9uLlxuICAgICAqIEByZXR1cm5zIFRoZSB7QGxpbmsgT3BlblNlYUNvbGxlY3Rpb259IHJldHVybmVkIGJ5IHRoZSBBUEkuXG4gICAgICovXG4gICAgYXN5bmMgZ2V0Q29sbGVjdGlvbihzbHVnKSB7XG4gICAgICAgIGNvbnN0IHBhdGggPSAoMCwgYXBpUGF0aHNfMS5nZXRDb2xsZWN0aW9uUGF0aCkoc2x1Zyk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5nZXQocGF0aCk7XG4gICAgICAgIHJldHVybiAoMCwgdXRpbHNfMi5jb2xsZWN0aW9uRnJvbUpTT04pKHJlc3BvbnNlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmV0Y2ggYSBsaXN0IG9mIE9wZW5TZWEgY29sbGVjdGlvbnMuXG4gICAgICogQHBhcmFtIG9yZGVyQnkgVGhlIG9yZGVyIHRvIHJldHVybiB0aGUgY29sbGVjdGlvbnMgaW4uIERlZmF1bHQ6IENSRUFURURfREFURVxuICAgICAqIEBwYXJhbSBjaGFpbiBUaGUgY2hhaW4gdG8gZmlsdGVyIHRoZSBjb2xsZWN0aW9ucyBvbi4gRGVmYXVsdDogYWxsIGNoYWluc1xuICAgICAqIEBwYXJhbSBjcmVhdG9yVXNlcm5hbWUgVGhlIGNyZWF0b3IncyBPcGVuU2VhIHVzZXJuYW1lIHRvIGZpbHRlciB0aGUgY29sbGVjdGlvbnMgb24uXG4gICAgICogQHBhcmFtIGluY2x1ZGVIaWRkZW4gSWYgaGlkZGVuIGNvbGxlY3Rpb25zIHNob3VsZCBiZSByZXR1cm5lZC4gRGVmYXVsdDogZmFsc2VcbiAgICAgKiBAcGFyYW0gbGltaXQgVGhlIGxpbWl0IG9mIGNvbGxlY3Rpb25zIHRvIHJldHVybi5cbiAgICAgKiBAcGFyYW0gbmV4dCBUaGUgY3Vyc29yIGZvciB0aGUgbmV4dCBwYWdlIG9mIHJlc3VsdHMuIFRoaXMgaXMgcmV0dXJuZWQgZnJvbSBhIHByZXZpb3VzIHJlcXVlc3QuXG4gICAgICogQHJldHVybnMgTGlzdCBvZiB7QGxpbmsgT3BlblNlYUNvbGxlY3Rpb259IHJldHVybmVkIGJ5IHRoZSBBUEkuXG4gICAgICovXG4gICAgYXN5bmMgZ2V0Q29sbGVjdGlvbnMob3JkZXJCeSA9IHR5cGVzXzEuQ29sbGVjdGlvbk9yZGVyQnlPcHRpb24uQ1JFQVRFRF9EQVRFLCBjaGFpbiwgY3JlYXRvclVzZXJuYW1lLCBpbmNsdWRlSGlkZGVuID0gZmFsc2UsIGxpbWl0LCBuZXh0KSB7XG4gICAgICAgIGNvbnN0IHBhdGggPSAoMCwgYXBpUGF0aHNfMS5nZXRDb2xsZWN0aW9uc1BhdGgpKCk7XG4gICAgICAgIGNvbnN0IGFyZ3MgPSB7XG4gICAgICAgICAgICBvcmRlcl9ieTogb3JkZXJCeSxcbiAgICAgICAgICAgIGNoYWluLFxuICAgICAgICAgICAgY3JlYXRvcl91c2VybmFtZTogY3JlYXRvclVzZXJuYW1lLFxuICAgICAgICAgICAgaW5jbHVkZV9oaWRkZW46IGluY2x1ZGVIaWRkZW4sXG4gICAgICAgICAgICBsaW1pdCxcbiAgICAgICAgICAgIG5leHQsXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5nZXQocGF0aCwgYXJncyk7XG4gICAgICAgIHJlc3BvbnNlLmNvbGxlY3Rpb25zID0gcmVzcG9uc2UuY29sbGVjdGlvbnMubWFwKChjb2xsZWN0aW9uKSA9PiAoMCwgdXRpbHNfMi5jb2xsZWN0aW9uRnJvbUpTT04pKGNvbGxlY3Rpb24pKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGZXRjaCBzdGF0cyBmb3IgYW4gT3BlblNlYSBjb2xsZWN0aW9uLlxuICAgICAqIEBwYXJhbSBzbHVnIFRoZSBzbHVnIChpZGVudGlmaWVyKSBvZiB0aGUgY29sbGVjdGlvbi5cbiAgICAgKiBAcmV0dXJucyBUaGUge0BsaW5rIE9wZW5TZWFDb2xsZWN0aW9ufSByZXR1cm5lZCBieSB0aGUgQVBJLlxuICAgICAqL1xuICAgIGFzeW5jIGdldENvbGxlY3Rpb25TdGF0cyhzbHVnKSB7XG4gICAgICAgIGNvbnN0IHBhdGggPSAoMCwgYXBpUGF0aHNfMS5nZXRDb2xsZWN0aW9uU3RhdHNQYXRoKShzbHVnKTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmdldChwYXRoKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGZXRjaCBhIHBheW1lbnQgdG9rZW4uXG4gICAgICogQHBhcmFtIHF1ZXJ5IFF1ZXJ5IHRvIHVzZSBmb3IgZ2V0dGluZyB0b2tlbnMuIFNlZSB7QGxpbmsgT3BlblNlYVBheW1lbnRUb2tlblF1ZXJ5fS5cbiAgICAgKiBAcGFyYW0gbmV4dCBUaGUgY3Vyc29yIGZvciB0aGUgbmV4dCBwYWdlIG9mIHJlc3VsdHMuIFRoaXMgaXMgcmV0dXJuZWQgZnJvbSBhIHByZXZpb3VzIHJlcXVlc3QuXG4gICAgICogQHJldHVybnMgVGhlIHtAbGluayBPcGVuU2VhUGF5bWVudFRva2VufSByZXR1cm5lZCBieSB0aGUgQVBJLlxuICAgICAqL1xuICAgIGFzeW5jIGdldFBheW1lbnRUb2tlbihhZGRyZXNzLCBjaGFpbiA9IHRoaXMuY2hhaW4pIHtcbiAgICAgICAgY29uc3QganNvbiA9IGF3YWl0IHRoaXMuZ2V0KCgwLCBhcGlQYXRoc18xLmdldFBheW1lbnRUb2tlblBhdGgpKGNoYWluLCBhZGRyZXNzKSk7XG4gICAgICAgIHJldHVybiAoMCwgdXRpbHNfMi5wYXltZW50VG9rZW5Gcm9tSlNPTikoanNvbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZldGNoIGFjY291bnQgZm9yIGFuIGFkZHJlc3MuXG4gICAgICogQHBhcmFtIHF1ZXJ5IFF1ZXJ5IHRvIHVzZSBmb3IgZ2V0dGluZyB0b2tlbnMuIFNlZSB7QGxpbmsgT3BlblNlYVBheW1lbnRUb2tlblF1ZXJ5fS5cbiAgICAgKiBAcGFyYW0gbmV4dCBUaGUgY3Vyc29yIGZvciB0aGUgbmV4dCBwYWdlIG9mIHJlc3VsdHMuIFRoaXMgaXMgcmV0dXJuZWQgZnJvbSBhIHByZXZpb3VzIHJlcXVlc3QuXG4gICAgICogQHJldHVybnMgVGhlIHtAbGluayBHZXRBY2NvdW50UmVzcG9uc2V9IHJldHVybmVkIGJ5IHRoZSBBUEkuXG4gICAgICovXG4gICAgYXN5bmMgZ2V0QWNjb3VudChhZGRyZXNzKSB7XG4gICAgICAgIGNvbnN0IGpzb24gPSBhd2FpdCB0aGlzLmdldCgoMCwgYXBpUGF0aHNfMS5nZXRBY2NvdW50UGF0aCkoYWRkcmVzcykpO1xuICAgICAgICByZXR1cm4gKDAsIHV0aWxzXzIuYWNjb3VudEZyb21KU09OKShqc29uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRm9yY2UgcmVmcmVzaCB0aGUgbWV0YWRhdGEgZm9yIGFuIE5GVC5cbiAgICAgKiBAcGFyYW0gYWRkcmVzcyBUaGUgYWRkcmVzcyBvZiB0aGUgTkZUJ3MgY29udHJhY3QuXG4gICAgICogQHBhcmFtIGlkZW50aWZpZXIgVGhlIGlkZW50aWZpZXIgb2YgdGhlIE5GVC5cbiAgICAgKiBAcGFyYW0gY2hhaW4gVGhlIGNoYWluIHdoZXJlIHRoZSBORlQgaXMgbG9jYXRlZC5cbiAgICAgKiBAcmV0dXJucyBUaGUgcmVzcG9uc2UgZnJvbSB0aGUgQVBJLlxuICAgICAqL1xuICAgIGFzeW5jIHJlZnJlc2hORlRNZXRhZGF0YShhZGRyZXNzLCBpZGVudGlmaWVyLCBjaGFpbiA9IHRoaXMuY2hhaW4pIHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnBvc3QoKDAsIGFwaVBhdGhzXzEuZ2V0UmVmcmVzaE1ldGFkYXRhUGF0aCkoY2hhaW4sIGFkZHJlc3MsIGlkZW50aWZpZXIpLCB7fSk7XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogT2ZmY2hhaW4gY2FuY2VsIGFuIG9yZGVyLCBvZmZlciBvciBsaXN0aW5nLCBieSBpdHMgb3JkZXIgaGFzaCB3aGVuIHByb3RlY3RlZCBieSB0aGUgU2lnbmVkWm9uZS5cbiAgICAgKiBQcm90b2NvbCBhbmQgQ2hhaW4gYXJlIHJlcXVpcmVkIHRvIHByZXZlbnQgaGFzaCBjb2xsaXNpb25zLlxuICAgICAqIFBsZWFzZSBub3RlIGNhbmNlbGxhdGlvbiBpcyBvbmx5IGFzc3VyZWQgaWYgYSBmdWxmaWxsbWVudCBzaWduYXR1cmUgd2FzIG5vdCB2ZW5kZWQgcHJpb3IgdG8gY2FuY2VsbGF0aW9uLlxuICAgICAqIEBwYXJhbSBwcm90b2NvbEFkZHJlc3MgVGhlIFNlYXBvcnQgYWRkcmVzcyBmb3IgdGhlIG9yZGVyLlxuICAgICAqIEBwYXJhbSBvcmRlckhhc2ggVGhlIG9yZGVyIGhhc2gsIG9yIGV4dGVybmFsIGlkZW50aWZpZXIsIG9mIHRoZSBvcmRlci5cbiAgICAgKiBAcGFyYW0gY2hhaW4gVGhlIGNoYWluIHdoZXJlIHRoZSBvcmRlciBpcyBsb2NhdGVkLlxuICAgICAqIEBwYXJhbSBvZmZlcmVyU2lnbmF0dXJlIEFuIEVJUC03MTIgc2lnbmF0dXJlIGZyb20gdGhlIG9mZmVyZXIgb2YgdGhlIG9yZGVyLlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgIElmIHRoaXMgaXMgbm90IHByb3ZpZGVkLCB0aGUgdXNlciBhc3NvY2lhdGVkIHdpdGggdGhlIEFQSSBLZXkgd2lsbCBiZSBjaGVja2VkIGluc3RlYWQuXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgVGhlIHNpZ25hdHVyZSBtdXN0IGJlIGEgRUlQLTcxMiBzaWduYXR1cmUgY29uc2lzdGluZyBvZiB0aGUgb3JkZXIncyBTZWFwb3J0IGNvbnRyYWN0J3NcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lLCB2ZXJzaW9uLCBhZGRyZXNzLCBhbmQgY2hhaW4uIFRoZSBzdHJ1Y3QgdG8gc2lnbiBpcyBgT3JkZXJIYXNoYCBjb250YWluaW5nIGFcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBzaW5nbGUgYnl0ZXMzMiBmaWVsZC5cbiAgICAgKiBAcmV0dXJucyBUaGUgcmVzcG9uc2UgZnJvbSB0aGUgQVBJLlxuICAgICAqL1xuICAgIGFzeW5jIG9mZmNoYWluQ2FuY2VsT3JkZXIocHJvdG9jb2xBZGRyZXNzLCBvcmRlckhhc2gsIGNoYWluID0gdGhpcy5jaGFpbiwgb2ZmZXJlclNpZ25hdHVyZSkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMucG9zdCgoMCwgYXBpUGF0aHNfMS5nZXRDYW5jZWxPcmRlclBhdGgpKGNoYWluLCBwcm90b2NvbEFkZHJlc3MsIG9yZGVySGFzaCksIHsgb2ZmZXJlclNpZ25hdHVyZSB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZW5lcmljIGZldGNoIG1ldGhvZCBmb3IgYW55IEFQSSBlbmRwb2ludFxuICAgICAqIEBwYXJhbSBhcGlQYXRoIFBhdGggdG8gVVJMIGVuZHBvaW50IHVuZGVyIEFQSVxuICAgICAqIEBwYXJhbSBxdWVyeSBVUkwgcXVlcnkgcGFyYW1zLiBXaWxsIGJlIHVzZWQgdG8gY3JlYXRlIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyBAdHlwZVBhcmFtIFQgVGhlIHJlc3BvbnNlIGZyb20gdGhlIEFQSS5cbiAgICAgKi9cbiAgICBhc3luYyBnZXQoYXBpUGF0aCwgcXVlcnkgPSB7fSkge1xuICAgICAgICBjb25zdCBxcyA9IHRoaXMub2JqZWN0VG9TZWFyY2hQYXJhbXMocXVlcnkpO1xuICAgICAgICBjb25zdCB1cmwgPSBgJHt0aGlzLmFwaUJhc2VVcmx9JHthcGlQYXRofT8ke3FzfWA7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9mZXRjaCh1cmwpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZW5lcmljIHBvc3QgbWV0aG9kIGZvciBhbnkgQVBJIGVuZHBvaW50LlxuICAgICAqIEBwYXJhbSBhcGlQYXRoIFBhdGggdG8gVVJMIGVuZHBvaW50IHVuZGVyIEFQSVxuICAgICAqIEBwYXJhbSBib2R5IERhdGEgdG8gc2VuZC5cbiAgICAgKiBAcGFyYW0gb3B0cyBldGhlcnMgQ29ubmVjdGlvbkluZm8sIHNpbWlsYXIgdG8gRmV0Y2ggQVBJLlxuICAgICAqIEByZXR1cm5zIEB0eXBlUGFyYW0gVCBUaGUgcmVzcG9uc2UgZnJvbSB0aGUgQVBJLlxuICAgICAqL1xuICAgIGFzeW5jIHBvc3QoYXBpUGF0aCwgYm9keSwgb3B0cykge1xuICAgICAgICBjb25zdCB1cmwgPSBgJHt0aGlzLmFwaUJhc2VVcmx9JHthcGlQYXRofWA7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9mZXRjaCh1cmwsIG9wdHMsIGJvZHkpO1xuICAgIH1cbiAgICBvYmplY3RUb1NlYXJjaFBhcmFtcyhwYXJhbXMgPSB7fSkge1xuICAgICAgICBjb25zdCB1cmxTZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKHBhcmFtcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBpZiAodmFsdWUgJiYgQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZS5mb3JFYWNoKChpdGVtKSA9PiBpdGVtICYmIHVybFNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCBpdGVtKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHVybFNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdXJsU2VhcmNoUGFyYW1zLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBmcm9tIGFuIEFQSSBFbmRwb2ludCwgc2VuZGluZyBhdXRoIHRva2VuIGluIGhlYWRlcnNcbiAgICAgKiBAcGFyYW0gb3B0cyBldGhlcnMgQ29ubmVjdGlvbkluZm8sIHNpbWlsYXIgdG8gRmV0Y2ggQVBJXG4gICAgICogQHBhcmFtIGJvZHkgT3B0aW9uYWwgYm9keSB0byBzZW5kLiBJZiBzZXQsIHdpbGwgUE9TVCwgb3RoZXJ3aXNlIEdFVFxuICAgICAqL1xuICAgIGFzeW5jIF9mZXRjaCh1cmwsIGhlYWRlcnMsIGJvZHkpIHtcbiAgICAgICAgLy8gQ3JlYXRlIHRoZSBmZXRjaCByZXF1ZXN0XG4gICAgICAgIGNvbnN0IHJlcSA9IG5ldyBldGhlcnNfMS5ldGhlcnMuRmV0Y2hSZXF1ZXN0KHVybCk7XG4gICAgICAgIC8vIFNldCB0aGUgaGVhZGVyc1xuICAgICAgICBoZWFkZXJzID0ge1xuICAgICAgICAgICAgXCJ4LWFwcC1pZFwiOiBcIm9wZW5zZWEtanNcIixcbiAgICAgICAgICAgIC4uLih0aGlzLmFwaUtleSA/IHsgXCJYLUFQSS1LRVlcIjogdGhpcy5hcGlLZXkgfSA6IHt9KSxcbiAgICAgICAgICAgIC4uLmhlYWRlcnMsXG4gICAgICAgIH07XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGhlYWRlcnMpKSB7XG4gICAgICAgICAgICByZXEuc2V0SGVhZGVyKGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNldCB0aGUgYm9keSBpZiBwcm92aWRlZFxuICAgICAgICBpZiAoYm9keSkge1xuICAgICAgICAgICAgcmVxLmJvZHkgPSBib2R5O1xuICAgICAgICB9XG4gICAgICAgIC8vIFNldCB0aGUgdGhyb3R0bGUgcGFyYW1zXG4gICAgICAgIHJlcS5zZXRUaHJvdHRsZVBhcmFtcyh7IHNsb3RJbnRlcnZhbDogMTAwMCB9KTtcbiAgICAgICAgdGhpcy5sb2dnZXIoYFNlbmRpbmcgcmVxdWVzdDogJHt1cmx9ICR7SlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgcmVxdWVzdDogcmVxLFxuICAgICAgICAgICAgaGVhZGVyczogcmVxLmhlYWRlcnMsXG4gICAgICAgIH0pfWApO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcS5zZW5kKCk7XG4gICAgICAgIGlmICghcmVzcG9uc2Uub2soKSkge1xuICAgICAgICAgICAgLy8gSWYgYW4gZXJyb3JzIGFycmF5IGlzIHJldHVybmVkLCB0aHJvdyB3aXRoIHRoZSBlcnJvciBtZXNzYWdlcy5cbiAgICAgICAgICAgIGNvbnN0IGVycm9ycyA9IHJlc3BvbnNlLmJvZHlKc29uPy5lcnJvcnM7XG4gICAgICAgICAgICBpZiAoZXJyb3JzPy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9IGVycm9ycy5qb2luKFwiLCBcIik7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yTWVzc2FnZSA9PT0gXCJbb2JqZWN0IE9iamVjdF1cIikge1xuICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBKU09OLnN0cmluZ2lmeShlcnJvcnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFNlcnZlciBFcnJvcjogJHtlcnJvck1lc3NhZ2V9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBPdGhlcndpc2UsIGxldCBldGhlcnMgdGhyb3cgYSBTRVJWRVJfRVJST1Igc2luY2UgaXQgd2lsbCBpbmNsdWRlXG4gICAgICAgICAgICAgICAgLy8gbW9yZSBjb250ZXh0IGFib3V0IHRoZSByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAgICAgICAgICAgICAgICByZXNwb25zZS5hc3NlcnRPaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXNwb25zZS5ib2R5SnNvbjtcbiAgICB9XG59XG5leHBvcnRzLk9wZW5TZWFBUEkgPSBPcGVuU2VhQVBJO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/opensea-js/lib/api/api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/opensea-js/lib/api/apiPaths.js":
/*!*****************************************************!*\
  !*** ./node_modules/opensea-js/lib/api/apiPaths.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getCancelOrderPath = exports.getRefreshMetadataPath = exports.getNFTPath = exports.getListNFTsByAccountPath = exports.getListNFTsByContractPath = exports.getListNFTsByCollectionPath = exports.getCollectionOffersPath = exports.getPostCollectionOfferPath = exports.getBuildOfferPath = exports.getAccountPath = exports.getPaymentTokenPath = exports.getCollectionStatsPath = exports.getCollectionsPath = exports.getCollectionPath = exports.getBestListingsAPIPath = exports.getBestListingAPIPath = exports.getBestOfferAPIPath = exports.getAllListingsAPIPath = exports.getAllOffersAPIPath = exports.getOrdersAPIPath = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"(rsc)/./node_modules/opensea-js/lib/types.js\");\nconst getOrdersAPIPath = (chain, protocol, side) => {\n    const sidePath = side === types_1.OrderSide.LISTING ? \"listings\" : \"offers\";\n    return `/v2/orders/${chain}/${protocol}/${sidePath}`;\n};\nexports.getOrdersAPIPath = getOrdersAPIPath;\nconst getAllOffersAPIPath = (collectionSlug) => {\n    return `/v2/offers/collection/${collectionSlug}/all`;\n};\nexports.getAllOffersAPIPath = getAllOffersAPIPath;\nconst getAllListingsAPIPath = (collectionSlug) => {\n    return `/v2/listings/collection/${collectionSlug}/all`;\n};\nexports.getAllListingsAPIPath = getAllListingsAPIPath;\nconst getBestOfferAPIPath = (collectionSlug, tokenId) => {\n    return `/v2/offers/collection/${collectionSlug}/nfts/${tokenId}/best`;\n};\nexports.getBestOfferAPIPath = getBestOfferAPIPath;\nconst getBestListingAPIPath = (collectionSlug, tokenId) => {\n    return `/v2/listings/collection/${collectionSlug}/nfts/${tokenId}/best`;\n};\nexports.getBestListingAPIPath = getBestListingAPIPath;\nconst getBestListingsAPIPath = (collectionSlug) => {\n    return `/v2/listings/collection/${collectionSlug}/best`;\n};\nexports.getBestListingsAPIPath = getBestListingsAPIPath;\nconst getCollectionPath = (slug) => {\n    return `/api/v2/collections/${slug}`;\n};\nexports.getCollectionPath = getCollectionPath;\nconst getCollectionsPath = () => {\n    return \"/api/v2/collections\";\n};\nexports.getCollectionsPath = getCollectionsPath;\nconst getCollectionStatsPath = (slug) => {\n    return `/api/v2/collections/${slug}/stats`;\n};\nexports.getCollectionStatsPath = getCollectionStatsPath;\nconst getPaymentTokenPath = (chain, address) => {\n    return `/v2/chain/${chain}/payment_token/${address}`;\n};\nexports.getPaymentTokenPath = getPaymentTokenPath;\nconst getAccountPath = (address) => {\n    return `/v2/accounts/${address}`;\n};\nexports.getAccountPath = getAccountPath;\nconst getBuildOfferPath = () => {\n    return `/v2/offers/build`;\n};\nexports.getBuildOfferPath = getBuildOfferPath;\nconst getPostCollectionOfferPath = () => {\n    return `/v2/offers`;\n};\nexports.getPostCollectionOfferPath = getPostCollectionOfferPath;\nconst getCollectionOffersPath = (slug) => {\n    return `/v2/offers/collection/${slug}`;\n};\nexports.getCollectionOffersPath = getCollectionOffersPath;\nconst getListNFTsByCollectionPath = (slug) => {\n    return `/v2/collection/${slug}/nfts`;\n};\nexports.getListNFTsByCollectionPath = getListNFTsByCollectionPath;\nconst getListNFTsByContractPath = (chain, address) => {\n    return `/v2/chain/${chain}/contract/${address}/nfts`;\n};\nexports.getListNFTsByContractPath = getListNFTsByContractPath;\nconst getListNFTsByAccountPath = (chain, address) => {\n    return `/v2/chain/${chain}/account/${address}/nfts`;\n};\nexports.getListNFTsByAccountPath = getListNFTsByAccountPath;\nconst getNFTPath = (chain, address, identifier) => {\n    return `/v2/chain/${chain}/contract/${address}/nfts/${identifier}`;\n};\nexports.getNFTPath = getNFTPath;\nconst getRefreshMetadataPath = (chain, address, identifier) => {\n    return `/v2/chain/${chain}/contract/${address}/nfts/${identifier}/refresh`;\n};\nexports.getRefreshMetadataPath = getRefreshMetadataPath;\nconst getCancelOrderPath = (chain, protocolAddress, orderHash) => {\n    return `/v2/orders/chain/${chain}/protocol/${protocolAddress}/${orderHash}/cancel`;\n};\nexports.getCancelOrderPath = getCancelOrderPath;\n//# sourceMappingURL=apiPaths.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbnNlYS1qcy9saWIvYXBpL2FwaVBhdGhzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQixHQUFHLDhCQUE4QixHQUFHLGtCQUFrQixHQUFHLGdDQUFnQyxHQUFHLGlDQUFpQyxHQUFHLG1DQUFtQyxHQUFHLCtCQUErQixHQUFHLGtDQUFrQyxHQUFHLHlCQUF5QixHQUFHLHNCQUFzQixHQUFHLDJCQUEyQixHQUFHLDhCQUE4QixHQUFHLDBCQUEwQixHQUFHLHlCQUF5QixHQUFHLDhCQUE4QixHQUFHLDZCQUE2QixHQUFHLDJCQUEyQixHQUFHLDZCQUE2QixHQUFHLDJCQUEyQixHQUFHLHdCQUF3QjtBQUN6bUIsZ0JBQWdCLG1CQUFPLENBQUMsOERBQVU7QUFDbEM7QUFDQTtBQUNBLHlCQUF5QixNQUFNLEdBQUcsU0FBUyxHQUFHLFNBQVM7QUFDdkQ7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQSxvQ0FBb0MsZUFBZTtBQUNuRDtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBLHNDQUFzQyxlQUFlO0FBQ3JEO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0Esb0NBQW9DLGVBQWUsUUFBUSxRQUFRO0FBQ25FO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0Esc0NBQXNDLGVBQWUsUUFBUSxRQUFRO0FBQ3JFO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0Esc0NBQXNDLGVBQWU7QUFDckQ7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQSxrQ0FBa0MsS0FBSztBQUN2QztBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQSxrQ0FBa0MsS0FBSztBQUN2QztBQUNBLDhCQUE4QjtBQUM5QjtBQUNBLHdCQUF3QixNQUFNLGlCQUFpQixRQUFRO0FBQ3ZEO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0EsMkJBQTJCLFFBQVE7QUFDbkM7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBLG9DQUFvQyxLQUFLO0FBQ3pDO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0EsNkJBQTZCLEtBQUs7QUFDbEM7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQSx3QkFBd0IsTUFBTSxZQUFZLFFBQVE7QUFDbEQ7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQSx3QkFBd0IsTUFBTSxXQUFXLFFBQVE7QUFDakQ7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQSx3QkFBd0IsTUFBTSxZQUFZLFFBQVEsUUFBUSxXQUFXO0FBQ3JFO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0Esd0JBQXdCLE1BQU0sWUFBWSxRQUFRLFFBQVEsV0FBVztBQUNyRTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBLCtCQUErQixNQUFNLFlBQVksZ0JBQWdCLEdBQUcsVUFBVTtBQUM5RTtBQUNBLDBCQUEwQjtBQUMxQiIsInNvdXJjZXMiOlsid2VicGFjazovL2NkcC10ZXN0LWFnZW50Ly4vbm9kZV9tb2R1bGVzL29wZW5zZWEtanMvbGliL2FwaS9hcGlQYXRocy5qcz9jMTUzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRDYW5jZWxPcmRlclBhdGggPSBleHBvcnRzLmdldFJlZnJlc2hNZXRhZGF0YVBhdGggPSBleHBvcnRzLmdldE5GVFBhdGggPSBleHBvcnRzLmdldExpc3RORlRzQnlBY2NvdW50UGF0aCA9IGV4cG9ydHMuZ2V0TGlzdE5GVHNCeUNvbnRyYWN0UGF0aCA9IGV4cG9ydHMuZ2V0TGlzdE5GVHNCeUNvbGxlY3Rpb25QYXRoID0gZXhwb3J0cy5nZXRDb2xsZWN0aW9uT2ZmZXJzUGF0aCA9IGV4cG9ydHMuZ2V0UG9zdENvbGxlY3Rpb25PZmZlclBhdGggPSBleHBvcnRzLmdldEJ1aWxkT2ZmZXJQYXRoID0gZXhwb3J0cy5nZXRBY2NvdW50UGF0aCA9IGV4cG9ydHMuZ2V0UGF5bWVudFRva2VuUGF0aCA9IGV4cG9ydHMuZ2V0Q29sbGVjdGlvblN0YXRzUGF0aCA9IGV4cG9ydHMuZ2V0Q29sbGVjdGlvbnNQYXRoID0gZXhwb3J0cy5nZXRDb2xsZWN0aW9uUGF0aCA9IGV4cG9ydHMuZ2V0QmVzdExpc3RpbmdzQVBJUGF0aCA9IGV4cG9ydHMuZ2V0QmVzdExpc3RpbmdBUElQYXRoID0gZXhwb3J0cy5nZXRCZXN0T2ZmZXJBUElQYXRoID0gZXhwb3J0cy5nZXRBbGxMaXN0aW5nc0FQSVBhdGggPSBleHBvcnRzLmdldEFsbE9mZmVyc0FQSVBhdGggPSBleHBvcnRzLmdldE9yZGVyc0FQSVBhdGggPSB2b2lkIDA7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4uL3R5cGVzXCIpO1xuY29uc3QgZ2V0T3JkZXJzQVBJUGF0aCA9IChjaGFpbiwgcHJvdG9jb2wsIHNpZGUpID0+IHtcbiAgICBjb25zdCBzaWRlUGF0aCA9IHNpZGUgPT09IHR5cGVzXzEuT3JkZXJTaWRlLkxJU1RJTkcgPyBcImxpc3RpbmdzXCIgOiBcIm9mZmVyc1wiO1xuICAgIHJldHVybiBgL3YyL29yZGVycy8ke2NoYWlufS8ke3Byb3RvY29sfS8ke3NpZGVQYXRofWA7XG59O1xuZXhwb3J0cy5nZXRPcmRlcnNBUElQYXRoID0gZ2V0T3JkZXJzQVBJUGF0aDtcbmNvbnN0IGdldEFsbE9mZmVyc0FQSVBhdGggPSAoY29sbGVjdGlvblNsdWcpID0+IHtcbiAgICByZXR1cm4gYC92Mi9vZmZlcnMvY29sbGVjdGlvbi8ke2NvbGxlY3Rpb25TbHVnfS9hbGxgO1xufTtcbmV4cG9ydHMuZ2V0QWxsT2ZmZXJzQVBJUGF0aCA9IGdldEFsbE9mZmVyc0FQSVBhdGg7XG5jb25zdCBnZXRBbGxMaXN0aW5nc0FQSVBhdGggPSAoY29sbGVjdGlvblNsdWcpID0+IHtcbiAgICByZXR1cm4gYC92Mi9saXN0aW5ncy9jb2xsZWN0aW9uLyR7Y29sbGVjdGlvblNsdWd9L2FsbGA7XG59O1xuZXhwb3J0cy5nZXRBbGxMaXN0aW5nc0FQSVBhdGggPSBnZXRBbGxMaXN0aW5nc0FQSVBhdGg7XG5jb25zdCBnZXRCZXN0T2ZmZXJBUElQYXRoID0gKGNvbGxlY3Rpb25TbHVnLCB0b2tlbklkKSA9PiB7XG4gICAgcmV0dXJuIGAvdjIvb2ZmZXJzL2NvbGxlY3Rpb24vJHtjb2xsZWN0aW9uU2x1Z30vbmZ0cy8ke3Rva2VuSWR9L2Jlc3RgO1xufTtcbmV4cG9ydHMuZ2V0QmVzdE9mZmVyQVBJUGF0aCA9IGdldEJlc3RPZmZlckFQSVBhdGg7XG5jb25zdCBnZXRCZXN0TGlzdGluZ0FQSVBhdGggPSAoY29sbGVjdGlvblNsdWcsIHRva2VuSWQpID0+IHtcbiAgICByZXR1cm4gYC92Mi9saXN0aW5ncy9jb2xsZWN0aW9uLyR7Y29sbGVjdGlvblNsdWd9L25mdHMvJHt0b2tlbklkfS9iZXN0YDtcbn07XG5leHBvcnRzLmdldEJlc3RMaXN0aW5nQVBJUGF0aCA9IGdldEJlc3RMaXN0aW5nQVBJUGF0aDtcbmNvbnN0IGdldEJlc3RMaXN0aW5nc0FQSVBhdGggPSAoY29sbGVjdGlvblNsdWcpID0+IHtcbiAgICByZXR1cm4gYC92Mi9saXN0aW5ncy9jb2xsZWN0aW9uLyR7Y29sbGVjdGlvblNsdWd9L2Jlc3RgO1xufTtcbmV4cG9ydHMuZ2V0QmVzdExpc3RpbmdzQVBJUGF0aCA9IGdldEJlc3RMaXN0aW5nc0FQSVBhdGg7XG5jb25zdCBnZXRDb2xsZWN0aW9uUGF0aCA9IChzbHVnKSA9PiB7XG4gICAgcmV0dXJuIGAvYXBpL3YyL2NvbGxlY3Rpb25zLyR7c2x1Z31gO1xufTtcbmV4cG9ydHMuZ2V0Q29sbGVjdGlvblBhdGggPSBnZXRDb2xsZWN0aW9uUGF0aDtcbmNvbnN0IGdldENvbGxlY3Rpb25zUGF0aCA9ICgpID0+IHtcbiAgICByZXR1cm4gXCIvYXBpL3YyL2NvbGxlY3Rpb25zXCI7XG59O1xuZXhwb3J0cy5nZXRDb2xsZWN0aW9uc1BhdGggPSBnZXRDb2xsZWN0aW9uc1BhdGg7XG5jb25zdCBnZXRDb2xsZWN0aW9uU3RhdHNQYXRoID0gKHNsdWcpID0+IHtcbiAgICByZXR1cm4gYC9hcGkvdjIvY29sbGVjdGlvbnMvJHtzbHVnfS9zdGF0c2A7XG59O1xuZXhwb3J0cy5nZXRDb2xsZWN0aW9uU3RhdHNQYXRoID0gZ2V0Q29sbGVjdGlvblN0YXRzUGF0aDtcbmNvbnN0IGdldFBheW1lbnRUb2tlblBhdGggPSAoY2hhaW4sIGFkZHJlc3MpID0+IHtcbiAgICByZXR1cm4gYC92Mi9jaGFpbi8ke2NoYWlufS9wYXltZW50X3Rva2VuLyR7YWRkcmVzc31gO1xufTtcbmV4cG9ydHMuZ2V0UGF5bWVudFRva2VuUGF0aCA9IGdldFBheW1lbnRUb2tlblBhdGg7XG5jb25zdCBnZXRBY2NvdW50UGF0aCA9IChhZGRyZXNzKSA9PiB7XG4gICAgcmV0dXJuIGAvdjIvYWNjb3VudHMvJHthZGRyZXNzfWA7XG59O1xuZXhwb3J0cy5nZXRBY2NvdW50UGF0aCA9IGdldEFjY291bnRQYXRoO1xuY29uc3QgZ2V0QnVpbGRPZmZlclBhdGggPSAoKSA9PiB7XG4gICAgcmV0dXJuIGAvdjIvb2ZmZXJzL2J1aWxkYDtcbn07XG5leHBvcnRzLmdldEJ1aWxkT2ZmZXJQYXRoID0gZ2V0QnVpbGRPZmZlclBhdGg7XG5jb25zdCBnZXRQb3N0Q29sbGVjdGlvbk9mZmVyUGF0aCA9ICgpID0+IHtcbiAgICByZXR1cm4gYC92Mi9vZmZlcnNgO1xufTtcbmV4cG9ydHMuZ2V0UG9zdENvbGxlY3Rpb25PZmZlclBhdGggPSBnZXRQb3N0Q29sbGVjdGlvbk9mZmVyUGF0aDtcbmNvbnN0IGdldENvbGxlY3Rpb25PZmZlcnNQYXRoID0gKHNsdWcpID0+IHtcbiAgICByZXR1cm4gYC92Mi9vZmZlcnMvY29sbGVjdGlvbi8ke3NsdWd9YDtcbn07XG5leHBvcnRzLmdldENvbGxlY3Rpb25PZmZlcnNQYXRoID0gZ2V0Q29sbGVjdGlvbk9mZmVyc1BhdGg7XG5jb25zdCBnZXRMaXN0TkZUc0J5Q29sbGVjdGlvblBhdGggPSAoc2x1ZykgPT4ge1xuICAgIHJldHVybiBgL3YyL2NvbGxlY3Rpb24vJHtzbHVnfS9uZnRzYDtcbn07XG5leHBvcnRzLmdldExpc3RORlRzQnlDb2xsZWN0aW9uUGF0aCA9IGdldExpc3RORlRzQnlDb2xsZWN0aW9uUGF0aDtcbmNvbnN0IGdldExpc3RORlRzQnlDb250cmFjdFBhdGggPSAoY2hhaW4sIGFkZHJlc3MpID0+IHtcbiAgICByZXR1cm4gYC92Mi9jaGFpbi8ke2NoYWlufS9jb250cmFjdC8ke2FkZHJlc3N9L25mdHNgO1xufTtcbmV4cG9ydHMuZ2V0TGlzdE5GVHNCeUNvbnRyYWN0UGF0aCA9IGdldExpc3RORlRzQnlDb250cmFjdFBhdGg7XG5jb25zdCBnZXRMaXN0TkZUc0J5QWNjb3VudFBhdGggPSAoY2hhaW4sIGFkZHJlc3MpID0+IHtcbiAgICByZXR1cm4gYC92Mi9jaGFpbi8ke2NoYWlufS9hY2NvdW50LyR7YWRkcmVzc30vbmZ0c2A7XG59O1xuZXhwb3J0cy5nZXRMaXN0TkZUc0J5QWNjb3VudFBhdGggPSBnZXRMaXN0TkZUc0J5QWNjb3VudFBhdGg7XG5jb25zdCBnZXRORlRQYXRoID0gKGNoYWluLCBhZGRyZXNzLCBpZGVudGlmaWVyKSA9PiB7XG4gICAgcmV0dXJuIGAvdjIvY2hhaW4vJHtjaGFpbn0vY29udHJhY3QvJHthZGRyZXNzfS9uZnRzLyR7aWRlbnRpZmllcn1gO1xufTtcbmV4cG9ydHMuZ2V0TkZUUGF0aCA9IGdldE5GVFBhdGg7XG5jb25zdCBnZXRSZWZyZXNoTWV0YWRhdGFQYXRoID0gKGNoYWluLCBhZGRyZXNzLCBpZGVudGlmaWVyKSA9PiB7XG4gICAgcmV0dXJuIGAvdjIvY2hhaW4vJHtjaGFpbn0vY29udHJhY3QvJHthZGRyZXNzfS9uZnRzLyR7aWRlbnRpZmllcn0vcmVmcmVzaGA7XG59O1xuZXhwb3J0cy5nZXRSZWZyZXNoTWV0YWRhdGFQYXRoID0gZ2V0UmVmcmVzaE1ldGFkYXRhUGF0aDtcbmNvbnN0IGdldENhbmNlbE9yZGVyUGF0aCA9IChjaGFpbiwgcHJvdG9jb2xBZGRyZXNzLCBvcmRlckhhc2gpID0+IHtcbiAgICByZXR1cm4gYC92Mi9vcmRlcnMvY2hhaW4vJHtjaGFpbn0vcHJvdG9jb2wvJHtwcm90b2NvbEFkZHJlc3N9LyR7b3JkZXJIYXNofS9jYW5jZWxgO1xufTtcbmV4cG9ydHMuZ2V0Q2FuY2VsT3JkZXJQYXRoID0gZ2V0Q2FuY2VsT3JkZXJQYXRoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBpUGF0aHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/opensea-js/lib/api/apiPaths.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/opensea-js/lib/api/types.js":
/*!**************************************************!*\
  !*** ./node_modules/opensea-js/lib/api/types.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TraitDisplayType = exports.CollectionOrderByOption = void 0;\nvar CollectionOrderByOption;\n(function (CollectionOrderByOption) {\n    CollectionOrderByOption[\"CREATED_DATE\"] = \"created_date\";\n    CollectionOrderByOption[\"ONE_DAY_CHANGE\"] = \"one_day_change\";\n    CollectionOrderByOption[\"SEVEN_DAY_VOLUME\"] = \"seven_day_volume\";\n    CollectionOrderByOption[\"SEVEN_DAY_CHANGE\"] = \"seven_day_change\";\n    CollectionOrderByOption[\"NUM_OWNERS\"] = \"num_owners\";\n    CollectionOrderByOption[\"MARKET_CAP\"] = \"market_cap\";\n})(CollectionOrderByOption || (exports.CollectionOrderByOption = CollectionOrderByOption = {}));\n/**\n * Trait display type returned by OpenSea API.\n * @category API Models\n */\nvar TraitDisplayType;\n(function (TraitDisplayType) {\n    TraitDisplayType[\"NUMBER\"] = \"number\";\n    TraitDisplayType[\"BOOST_PERCENTAGE\"] = \"boost_percentage\";\n    TraitDisplayType[\"BOOST_NUMBER\"] = \"boost_number\";\n    TraitDisplayType[\"AUTHOR\"] = \"author\";\n    TraitDisplayType[\"DATE\"] = \"date\";\n    /** \"None\" is used for string traits */\n    TraitDisplayType[\"NONE\"] = \"None\";\n})(TraitDisplayType || (exports.TraitDisplayType = TraitDisplayType = {}));\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbnNlYS1qcy9saWIvYXBpL3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QixHQUFHLCtCQUErQjtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw4QkFBOEIsK0JBQStCLCtCQUErQjtBQUM3RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsdUJBQXVCLHdCQUF3Qix3QkFBd0I7QUFDeEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZHAtdGVzdC1hZ2VudC8uL25vZGVfbW9kdWxlcy9vcGVuc2VhLWpzL2xpYi9hcGkvdHlwZXMuanM/MWQ5MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVHJhaXREaXNwbGF5VHlwZSA9IGV4cG9ydHMuQ29sbGVjdGlvbk9yZGVyQnlPcHRpb24gPSB2b2lkIDA7XG52YXIgQ29sbGVjdGlvbk9yZGVyQnlPcHRpb247XG4oZnVuY3Rpb24gKENvbGxlY3Rpb25PcmRlckJ5T3B0aW9uKSB7XG4gICAgQ29sbGVjdGlvbk9yZGVyQnlPcHRpb25bXCJDUkVBVEVEX0RBVEVcIl0gPSBcImNyZWF0ZWRfZGF0ZVwiO1xuICAgIENvbGxlY3Rpb25PcmRlckJ5T3B0aW9uW1wiT05FX0RBWV9DSEFOR0VcIl0gPSBcIm9uZV9kYXlfY2hhbmdlXCI7XG4gICAgQ29sbGVjdGlvbk9yZGVyQnlPcHRpb25bXCJTRVZFTl9EQVlfVk9MVU1FXCJdID0gXCJzZXZlbl9kYXlfdm9sdW1lXCI7XG4gICAgQ29sbGVjdGlvbk9yZGVyQnlPcHRpb25bXCJTRVZFTl9EQVlfQ0hBTkdFXCJdID0gXCJzZXZlbl9kYXlfY2hhbmdlXCI7XG4gICAgQ29sbGVjdGlvbk9yZGVyQnlPcHRpb25bXCJOVU1fT1dORVJTXCJdID0gXCJudW1fb3duZXJzXCI7XG4gICAgQ29sbGVjdGlvbk9yZGVyQnlPcHRpb25bXCJNQVJLRVRfQ0FQXCJdID0gXCJtYXJrZXRfY2FwXCI7XG59KShDb2xsZWN0aW9uT3JkZXJCeU9wdGlvbiB8fCAoZXhwb3J0cy5Db2xsZWN0aW9uT3JkZXJCeU9wdGlvbiA9IENvbGxlY3Rpb25PcmRlckJ5T3B0aW9uID0ge30pKTtcbi8qKlxuICogVHJhaXQgZGlzcGxheSB0eXBlIHJldHVybmVkIGJ5IE9wZW5TZWEgQVBJLlxuICogQGNhdGVnb3J5IEFQSSBNb2RlbHNcbiAqL1xudmFyIFRyYWl0RGlzcGxheVR5cGU7XG4oZnVuY3Rpb24gKFRyYWl0RGlzcGxheVR5cGUpIHtcbiAgICBUcmFpdERpc3BsYXlUeXBlW1wiTlVNQkVSXCJdID0gXCJudW1iZXJcIjtcbiAgICBUcmFpdERpc3BsYXlUeXBlW1wiQk9PU1RfUEVSQ0VOVEFHRVwiXSA9IFwiYm9vc3RfcGVyY2VudGFnZVwiO1xuICAgIFRyYWl0RGlzcGxheVR5cGVbXCJCT09TVF9OVU1CRVJcIl0gPSBcImJvb3N0X251bWJlclwiO1xuICAgIFRyYWl0RGlzcGxheVR5cGVbXCJBVVRIT1JcIl0gPSBcImF1dGhvclwiO1xuICAgIFRyYWl0RGlzcGxheVR5cGVbXCJEQVRFXCJdID0gXCJkYXRlXCI7XG4gICAgLyoqIFwiTm9uZVwiIGlzIHVzZWQgZm9yIHN0cmluZyB0cmFpdHMgKi9cbiAgICBUcmFpdERpc3BsYXlUeXBlW1wiTk9ORVwiXSA9IFwiTm9uZVwiO1xufSkoVHJhaXREaXNwbGF5VHlwZSB8fCAoZXhwb3J0cy5UcmFpdERpc3BsYXlUeXBlID0gVHJhaXREaXNwbGF5VHlwZSA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/opensea-js/lib/api/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/opensea-js/lib/constants.js":
/*!**************************************************!*\
  !*** ./node_modules/opensea-js/lib/constants.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SHARED_STOREFRONT_LAZY_MINT_ADAPTER_CROSS_CHAIN_ADDRESS = exports.SHARED_STOREFRONT_ADDRESSES = exports.ENGLISH_AUCTION_ZONE_TESTNETS = exports.ENGLISH_AUCTION_ZONE_MAINNETS = exports.SIGNED_ZONE = exports.API_BASE_TESTNET = exports.API_BASE_MAINNET = exports.MAX_EXPIRATION_MONTHS = exports.INVERSE_BASIS_POINT = exports.FIXED_NUMBER_100 = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(rsc)/./node_modules/ethers/lib.commonjs/index.js\");\nexports.FIXED_NUMBER_100 = ethers_1.FixedNumber.fromValue(100);\nexports.INVERSE_BASIS_POINT = 10000n; // 100 basis points per 1%\nexports.MAX_EXPIRATION_MONTHS = 1;\nexports.API_BASE_MAINNET = \"https://api.opensea.io\";\nexports.API_BASE_TESTNET = \"https://testnets-api.opensea.io\";\n// eslint-disable-next-line import/no-unused-modules\nexports.SIGNED_ZONE = \"0x000056f7000000ece9003ca63978907a00ffd100\";\nexports.ENGLISH_AUCTION_ZONE_MAINNETS = \"0x110b2b128a9ed1be5ef3232d8e4e41640df5c2cd\";\nexports.ENGLISH_AUCTION_ZONE_TESTNETS = \"0x9B814233894Cd227f561B78Cc65891AA55C62Ad2\";\nconst SHARED_STOREFRONT_ADDRESS_MAINNET = \"0x495f947276749ce646f68ac8c248420045cb7b5e\";\nconst SHARED_STOREFRONT_ADDRESS_POLYGON = \"0x2953399124f0cbb46d2cbacd8a89cf0599974963\";\nconst SHARED_STOREFRONT_ADDRESS_KLAYTN = \"0x5bc519d852f7ca2c8cf2d095299d5bb2d13f02c9\";\nexports.SHARED_STOREFRONT_ADDRESSES = [\n    SHARED_STOREFRONT_ADDRESS_MAINNET,\n    SHARED_STOREFRONT_ADDRESS_POLYGON,\n    SHARED_STOREFRONT_ADDRESS_KLAYTN,\n].map((address) => address.toLowerCase());\nexports.SHARED_STOREFRONT_LAZY_MINT_ADAPTER_CROSS_CHAIN_ADDRESS = \"0xa604060890923ff400e8c6f5290461a83aedacec\";\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbnNlYS1qcy9saWIvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELCtEQUErRCxHQUFHLG1DQUFtQyxHQUFHLHFDQUFxQyxHQUFHLHFDQUFxQyxHQUFHLG1CQUFtQixHQUFHLHdCQUF3QixHQUFHLHdCQUF3QixHQUFHLDZCQUE2QixHQUFHLDJCQUEyQixHQUFHLHdCQUF3QjtBQUMxVixpQkFBaUIsbUJBQU8sQ0FBQyxpRUFBUTtBQUNqQyx3QkFBd0I7QUFDeEIsMkJBQTJCLFdBQVc7QUFDdEMsNkJBQTZCO0FBQzdCLHdCQUF3QjtBQUN4Qix3QkFBd0I7QUFDeEI7QUFDQSxtQkFBbUI7QUFDbkIscUNBQXFDO0FBQ3JDLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrREFBK0Q7QUFDL0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZHAtdGVzdC1hZ2VudC8uL25vZGVfbW9kdWxlcy9vcGVuc2VhLWpzL2xpYi9jb25zdGFudHMuanM/MmRjMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU0hBUkVEX1NUT1JFRlJPTlRfTEFaWV9NSU5UX0FEQVBURVJfQ1JPU1NfQ0hBSU5fQUREUkVTUyA9IGV4cG9ydHMuU0hBUkVEX1NUT1JFRlJPTlRfQUREUkVTU0VTID0gZXhwb3J0cy5FTkdMSVNIX0FVQ1RJT05fWk9ORV9URVNUTkVUUyA9IGV4cG9ydHMuRU5HTElTSF9BVUNUSU9OX1pPTkVfTUFJTk5FVFMgPSBleHBvcnRzLlNJR05FRF9aT05FID0gZXhwb3J0cy5BUElfQkFTRV9URVNUTkVUID0gZXhwb3J0cy5BUElfQkFTRV9NQUlOTkVUID0gZXhwb3J0cy5NQVhfRVhQSVJBVElPTl9NT05USFMgPSBleHBvcnRzLklOVkVSU0VfQkFTSVNfUE9JTlQgPSBleHBvcnRzLkZJWEVEX05VTUJFUl8xMDAgPSB2b2lkIDA7XG5jb25zdCBldGhlcnNfMSA9IHJlcXVpcmUoXCJldGhlcnNcIik7XG5leHBvcnRzLkZJWEVEX05VTUJFUl8xMDAgPSBldGhlcnNfMS5GaXhlZE51bWJlci5mcm9tVmFsdWUoMTAwKTtcbmV4cG9ydHMuSU5WRVJTRV9CQVNJU19QT0lOVCA9IDEwMDAwbjsgLy8gMTAwIGJhc2lzIHBvaW50cyBwZXIgMSVcbmV4cG9ydHMuTUFYX0VYUElSQVRJT05fTU9OVEhTID0gMTtcbmV4cG9ydHMuQVBJX0JBU0VfTUFJTk5FVCA9IFwiaHR0cHM6Ly9hcGkub3BlbnNlYS5pb1wiO1xuZXhwb3J0cy5BUElfQkFTRV9URVNUTkVUID0gXCJodHRwczovL3Rlc3RuZXRzLWFwaS5vcGVuc2VhLmlvXCI7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5leHBvcnRzLlNJR05FRF9aT05FID0gXCIweDAwMDA1NmY3MDAwMDAwZWNlOTAwM2NhNjM5Nzg5MDdhMDBmZmQxMDBcIjtcbmV4cG9ydHMuRU5HTElTSF9BVUNUSU9OX1pPTkVfTUFJTk5FVFMgPSBcIjB4MTEwYjJiMTI4YTllZDFiZTVlZjMyMzJkOGU0ZTQxNjQwZGY1YzJjZFwiO1xuZXhwb3J0cy5FTkdMSVNIX0FVQ1RJT05fWk9ORV9URVNUTkVUUyA9IFwiMHg5QjgxNDIzMzg5NENkMjI3ZjU2MUI3OENjNjU4OTFBQTU1QzYyQWQyXCI7XG5jb25zdCBTSEFSRURfU1RPUkVGUk9OVF9BRERSRVNTX01BSU5ORVQgPSBcIjB4NDk1Zjk0NzI3Njc0OWNlNjQ2ZjY4YWM4YzI0ODQyMDA0NWNiN2I1ZVwiO1xuY29uc3QgU0hBUkVEX1NUT1JFRlJPTlRfQUREUkVTU19QT0xZR09OID0gXCIweDI5NTMzOTkxMjRmMGNiYjQ2ZDJjYmFjZDhhODljZjA1OTk5NzQ5NjNcIjtcbmNvbnN0IFNIQVJFRF9TVE9SRUZST05UX0FERFJFU1NfS0xBWVROID0gXCIweDViYzUxOWQ4NTJmN2NhMmM4Y2YyZDA5NTI5OWQ1YmIyZDEzZjAyYzlcIjtcbmV4cG9ydHMuU0hBUkVEX1NUT1JFRlJPTlRfQUREUkVTU0VTID0gW1xuICAgIFNIQVJFRF9TVE9SRUZST05UX0FERFJFU1NfTUFJTk5FVCxcbiAgICBTSEFSRURfU1RPUkVGUk9OVF9BRERSRVNTX1BPTFlHT04sXG4gICAgU0hBUkVEX1NUT1JFRlJPTlRfQUREUkVTU19LTEFZVE4sXG5dLm1hcCgoYWRkcmVzcykgPT4gYWRkcmVzcy50b0xvd2VyQ2FzZSgpKTtcbmV4cG9ydHMuU0hBUkVEX1NUT1JFRlJPTlRfTEFaWV9NSU5UX0FEQVBURVJfQ1JPU1NfQ0hBSU5fQUREUkVTUyA9IFwiMHhhNjA0MDYwODkwOTIzZmY0MDBlOGM2ZjUyOTA0NjFhODNhZWRhY2VjXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/opensea-js/lib/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/opensea-js/lib/index.js":
/*!**********************************************!*\
  !*** ./node_modules/opensea-js/lib/index.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OpenSeaSDK = void 0;\nconst sdk_1 = __webpack_require__(/*! ./sdk */ \"(rsc)/./node_modules/opensea-js/lib/sdk.js\");\nObject.defineProperty(exports, \"OpenSeaSDK\", ({ enumerable: true, get: function () { return sdk_1.OpenSeaSDK; } }));\n__exportStar(__webpack_require__(/*! ./types */ \"(rsc)/./node_modules/opensea-js/lib/types.js\"), exports);\n__exportStar(__webpack_require__(/*! ./api/types */ \"(rsc)/./node_modules/opensea-js/lib/api/types.js\"), exports);\n__exportStar(__webpack_require__(/*! ./orders/types */ \"(rsc)/./node_modules/opensea-js/lib/orders/types.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbnNlYS1qcy9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0JBQWtCO0FBQ2xCLGNBQWMsbUJBQU8sQ0FBQyx5REFBTztBQUM3Qiw4Q0FBNkMsRUFBRSxxQ0FBcUMsNEJBQTRCLEVBQUM7QUFDakgsYUFBYSxtQkFBTyxDQUFDLDZEQUFTO0FBQzlCLGFBQWEsbUJBQU8sQ0FBQyxxRUFBYTtBQUNsQyxhQUFhLG1CQUFPLENBQUMsMkVBQWdCO0FBQ3JDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2RwLXRlc3QtYWdlbnQvLi9ub2RlX21vZHVsZXMvb3BlbnNlYS1qcy9saWIvaW5kZXguanM/NzU2NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5PcGVuU2VhU0RLID0gdm9pZCAwO1xuY29uc3Qgc2RrXzEgPSByZXF1aXJlKFwiLi9zZGtcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJPcGVuU2VhU0RLXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzZGtfMS5PcGVuU2VhU0RLOyB9IH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3R5cGVzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9hcGkvdHlwZXNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL29yZGVycy90eXBlc1wiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/opensea-js/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/opensea-js/lib/orders/privateListings.js":
/*!***************************************************************!*\
  !*** ./node_modules/opensea-js/lib/orders/privateListings.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getPrivateListingFulfillments = exports.constructPrivateListingCounterOrder = exports.getPrivateListingConsiderations = void 0;\nconst item_1 = __webpack_require__(/*! @opensea/seaport-js/lib/utils/item */ \"(rsc)/./node_modules/@opensea/seaport-js/lib/utils/item.js\");\nconst order_1 = __webpack_require__(/*! @opensea/seaport-js/lib/utils/order */ \"(rsc)/./node_modules/@opensea/seaport-js/lib/utils/order.js\");\nconst getPrivateListingConsiderations = (offer, privateSaleRecipient) => {\n    return offer.map((item) => {\n        return { ...item, recipient: privateSaleRecipient };\n    });\n};\nexports.getPrivateListingConsiderations = getPrivateListingConsiderations;\nconst constructPrivateListingCounterOrder = (order, privateSaleRecipient) => {\n    // Counter order offers up all the items in the private listing consideration\n    // besides the items that are going to the private listing recipient\n    const paymentItems = order.parameters.consideration.filter((item) => item.recipient.toLowerCase() !== privateSaleRecipient.toLowerCase());\n    if (!paymentItems.every((item) => (0, item_1.isCurrencyItem)(item))) {\n        throw new Error(\"The consideration for the private listing did not contain only currency items\");\n    }\n    if (!paymentItems.every((item) => item.itemType === paymentItems[0].itemType)) {\n        throw new Error(\"Not all currency items were the same for private order\");\n    }\n    const { aggregatedStartAmount, aggregatedEndAmount } = paymentItems.reduce(({ aggregatedStartAmount, aggregatedEndAmount }, item) => ({\n        aggregatedStartAmount: aggregatedStartAmount + BigInt(item.startAmount),\n        aggregatedEndAmount: aggregatedEndAmount + BigInt(item.endAmount),\n    }), {\n        aggregatedStartAmount: 0n,\n        aggregatedEndAmount: 0n,\n    });\n    const counterOrder = {\n        parameters: {\n            ...order.parameters,\n            offerer: privateSaleRecipient,\n            offer: [\n                {\n                    itemType: paymentItems[0].itemType,\n                    token: paymentItems[0].token,\n                    identifierOrCriteria: paymentItems[0].identifierOrCriteria,\n                    startAmount: aggregatedStartAmount.toString(),\n                    endAmount: aggregatedEndAmount.toString(),\n                },\n            ],\n            // The consideration here is empty as the original private listing order supplies\n            // the taker address to receive the desired items.\n            consideration: [],\n            salt: (0, order_1.generateRandomSalt)(),\n            totalOriginalConsiderationItems: 0,\n        },\n        signature: \"0x\",\n    };\n    return counterOrder;\n};\nexports.constructPrivateListingCounterOrder = constructPrivateListingCounterOrder;\nconst getPrivateListingFulfillments = (privateListingOrder) => {\n    const nftRelatedFulfillments = [];\n    // For the original order, we need to match everything offered with every consideration item\n    // on the original order that's set to go to the private listing recipient\n    privateListingOrder.parameters.offer.forEach((offerItem, offerIndex) => {\n        const considerationIndex = privateListingOrder.parameters.consideration.findIndex((considerationItem) => considerationItem.itemType === offerItem.itemType &&\n            considerationItem.token === offerItem.token &&\n            considerationItem.identifierOrCriteria ===\n                offerItem.identifierOrCriteria);\n        if (considerationIndex === -1) {\n            throw new Error(\"Could not find matching offer item in the consideration for private listing\");\n        }\n        nftRelatedFulfillments.push({\n            offerComponents: [\n                {\n                    orderIndex: 0,\n                    itemIndex: offerIndex,\n                },\n            ],\n            considerationComponents: [\n                {\n                    orderIndex: 0,\n                    itemIndex: considerationIndex,\n                },\n            ],\n        });\n    });\n    const currencyRelatedFulfillments = [];\n    // For the original order, we need to match everything offered with every consideration item\n    // on the original order that's set to go to the private listing recipient\n    privateListingOrder.parameters.consideration.forEach((considerationItem, considerationIndex) => {\n        if (!(0, item_1.isCurrencyItem)(considerationItem)) {\n            return;\n        }\n        // We always match the offer item (index 0) of the counter order (index 1)\n        // with all of the payment items on the private listing\n        currencyRelatedFulfillments.push({\n            offerComponents: [\n                {\n                    orderIndex: 1,\n                    itemIndex: 0,\n                },\n            ],\n            considerationComponents: [\n                {\n                    orderIndex: 0,\n                    itemIndex: considerationIndex,\n                },\n            ],\n        });\n    });\n    return [...nftRelatedFulfillments, ...currencyRelatedFulfillments];\n};\nexports.getPrivateListingFulfillments = getPrivateListingFulfillments;\n//# sourceMappingURL=privateListings.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/opensea-js/lib/orders/privateListings.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/opensea-js/lib/orders/types.js":
/*!*****************************************************!*\
  !*** ./node_modules/opensea-js/lib/orders/types.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OrderType = void 0;\nvar OrderType;\n(function (OrderType) {\n    OrderType[\"BASIC\"] = \"basic\";\n    OrderType[\"ENGLISH\"] = \"english\";\n    OrderType[\"CRITERIA\"] = \"criteria\";\n})(OrderType || (exports.OrderType = OrderType = {}));\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbnNlYS1qcy9saWIvb3JkZXJzL3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxnQkFBZ0IsaUJBQWlCLGlCQUFpQjtBQUNuRCIsInNvdXJjZXMiOlsid2VicGFjazovL2NkcC10ZXN0LWFnZW50Ly4vbm9kZV9tb2R1bGVzL29wZW5zZWEtanMvbGliL29yZGVycy90eXBlcy5qcz81Yjg2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5PcmRlclR5cGUgPSB2b2lkIDA7XG52YXIgT3JkZXJUeXBlO1xuKGZ1bmN0aW9uIChPcmRlclR5cGUpIHtcbiAgICBPcmRlclR5cGVbXCJCQVNJQ1wiXSA9IFwiYmFzaWNcIjtcbiAgICBPcmRlclR5cGVbXCJFTkdMSVNIXCJdID0gXCJlbmdsaXNoXCI7XG4gICAgT3JkZXJUeXBlW1wiQ1JJVEVSSUFcIl0gPSBcImNyaXRlcmlhXCI7XG59KShPcmRlclR5cGUgfHwgKGV4cG9ydHMuT3JkZXJUeXBlID0gT3JkZXJUeXBlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/opensea-js/lib/orders/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/opensea-js/lib/orders/utils.js":
/*!*****************************************************!*\
  !*** ./node_modules/opensea-js/lib/orders/utils.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.deserializeOrder = exports.serializeOrdersQueryOptions = exports.getFulfillOfferPayload = exports.getFulfillListingPayload = exports.getFulfillmentDataPath = exports.getBuildCollectionOfferPayload = exports.getPostCollectionOfferPayload = exports.DEFAULT_SEAPORT_CONTRACT_ADDRESS = void 0;\nconst constants_1 = __webpack_require__(/*! @opensea/seaport-js/lib/constants */ \"(rsc)/./node_modules/@opensea/seaport-js/lib/constants.js\");\nconst types_1 = __webpack_require__(/*! ../types */ \"(rsc)/./node_modules/opensea-js/lib/types.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/opensea-js/lib/utils/index.js\");\nexports.DEFAULT_SEAPORT_CONTRACT_ADDRESS = constants_1.CROSS_CHAIN_SEAPORT_V1_6_ADDRESS;\nconst getPostCollectionOfferPayload = (collectionSlug, protocol_data, traitType, traitValue) => {\n    const payload = {\n        criteria: {\n            collection: { slug: collectionSlug },\n        },\n        protocol_data,\n        protocol_address: exports.DEFAULT_SEAPORT_CONTRACT_ADDRESS,\n    };\n    if (traitType && traitValue) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        payload.criteria.trait = {\n            type: traitType,\n            value: traitValue,\n        };\n    }\n    return payload;\n};\nexports.getPostCollectionOfferPayload = getPostCollectionOfferPayload;\nconst getBuildCollectionOfferPayload = (offererAddress, quantity, collectionSlug, offerProtectionEnabled, traitType, traitValue) => {\n    const payload = {\n        offerer: offererAddress,\n        quantity,\n        criteria: {\n            collection: {\n                slug: collectionSlug,\n            },\n        },\n        protocol_address: exports.DEFAULT_SEAPORT_CONTRACT_ADDRESS,\n        offer_protection_enabled: offerProtectionEnabled,\n    };\n    if (traitType && traitValue) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        payload.criteria.trait = {\n            type: traitType,\n            value: traitValue,\n        };\n    }\n    return payload;\n};\nexports.getBuildCollectionOfferPayload = getBuildCollectionOfferPayload;\nconst getFulfillmentDataPath = (side) => {\n    const sidePath = side === types_1.OrderSide.LISTING ? \"listings\" : \"offers\";\n    return `/v2/${sidePath}/fulfillment_data`;\n};\nexports.getFulfillmentDataPath = getFulfillmentDataPath;\nconst getFulfillListingPayload = (fulfillerAddress, order_hash, protocolAddress, chain) => {\n    return {\n        listing: {\n            hash: order_hash,\n            chain,\n            protocol_address: protocolAddress,\n        },\n        fulfiller: {\n            address: fulfillerAddress,\n        },\n    };\n};\nexports.getFulfillListingPayload = getFulfillListingPayload;\nconst getFulfillOfferPayload = (fulfillerAddress, order_hash, protocolAddress, chain) => {\n    return {\n        offer: {\n            hash: order_hash,\n            chain,\n            protocol_address: protocolAddress,\n        },\n        fulfiller: {\n            address: fulfillerAddress,\n        },\n    };\n};\nexports.getFulfillOfferPayload = getFulfillOfferPayload;\nconst serializeOrdersQueryOptions = (options) => {\n    return {\n        limit: options.limit,\n        cursor: options.cursor,\n        payment_token_address: options.paymentTokenAddress,\n        maker: options.maker,\n        taker: options.taker,\n        owner: options.owner,\n        listed_after: options.listedAfter,\n        listed_before: options.listedBefore,\n        token_ids: options.tokenIds ?? [options.tokenId],\n        asset_contract_address: options.assetContractAddress,\n        order_by: options.orderBy,\n        order_direction: options.orderDirection,\n        only_english: options.onlyEnglish,\n    };\n};\nexports.serializeOrdersQueryOptions = serializeOrdersQueryOptions;\nconst deserializeOrder = (order) => {\n    return {\n        createdDate: order.created_date,\n        closingDate: order.closing_date,\n        listingTime: order.listing_time,\n        expirationTime: order.expiration_time,\n        orderHash: order.order_hash,\n        maker: (0, utils_1.accountFromJSON)(order.maker),\n        taker: order.taker ? (0, utils_1.accountFromJSON)(order.taker) : null,\n        protocolData: order.protocol_data,\n        protocolAddress: order.protocol_address,\n        currentPrice: BigInt(order.current_price),\n        makerFees: order.maker_fees.map(({ account, basis_points }) => ({\n            account: (0, utils_1.accountFromJSON)(account),\n            basisPoints: basis_points,\n        })),\n        takerFees: order.taker_fees.map(({ account, basis_points }) => ({\n            account: (0, utils_1.accountFromJSON)(account),\n            basisPoints: basis_points,\n        })),\n        side: order.side,\n        orderType: order.order_type,\n        cancelled: order.cancelled,\n        finalized: order.finalized,\n        markedInvalid: order.marked_invalid,\n        clientSignature: order.client_signature,\n        remainingQuantity: order.remaining_quantity,\n    };\n};\nexports.deserializeOrder = deserializeOrder;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/opensea-js/lib/orders/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/opensea-js/lib/sdk.js":
/*!********************************************!*\
  !*** ./node_modules/opensea-js/lib/sdk.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OpenSeaSDK = void 0;\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst seaport_js_1 = __webpack_require__(/*! @opensea/seaport-js */ \"(rsc)/./node_modules/@opensea/seaport-js/lib/index.js\");\nconst constants_1 = __webpack_require__(/*! @opensea/seaport-js/lib/constants */ \"(rsc)/./node_modules/@opensea/seaport-js/lib/constants.js\");\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(rsc)/./node_modules/ethers/lib.commonjs/index.js\");\nconst api_1 = __webpack_require__(/*! ./api/api */ \"(rsc)/./node_modules/opensea-js/lib/api/api.js\");\nconst constants_2 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/opensea-js/lib/constants.js\");\nconst privateListings_1 = __webpack_require__(/*! ./orders/privateListings */ \"(rsc)/./node_modules/opensea-js/lib/orders/privateListings.js\");\nconst types_1 = __webpack_require__(/*! ./orders/types */ \"(rsc)/./node_modules/opensea-js/lib/orders/types.js\");\nconst utils_1 = __webpack_require__(/*! ./orders/utils */ \"(rsc)/./node_modules/opensea-js/lib/orders/utils.js\");\nconst contracts_1 = __webpack_require__(/*! ./typechain/contracts */ \"(rsc)/./node_modules/opensea-js/lib/typechain/contracts/index.js\");\nconst types_2 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/opensea-js/lib/types.js\");\nconst utils_2 = __webpack_require__(/*! ./utils/utils */ \"(rsc)/./node_modules/opensea-js/lib/utils/utils.js\");\n/**\n * The OpenSea SDK main class.\n * @category Main Classes\n */\nclass OpenSeaSDK {\n    /**\n     * Create a new instance of OpenSeaSDK.\n     * @param signerOrProvider Signer or provider to use for transactions. For example:\n     * `new ethers.providers.JsonRpcProvider('https://mainnet.infura.io')` or\n     * `new ethers.Wallet(privKey, provider)`\n     * @param apiConfig configuration options, including `chain`\n     * @param logger optional function for logging debug strings. defaults to no logging\n     */\n    constructor(signerOrProvider, apiConfig = {}, logger) {\n        /** Internal cache of decimals for payment tokens to save network requests */\n        this._cachedPaymentTokenDecimals = {};\n        this.getAmountWithBasisPointsApplied = (amount, basisPoints) => {\n            return ((amount * basisPoints) / constants_2.INVERSE_BASIS_POINT).toString();\n        };\n        // API config\n        apiConfig.chain ?? (apiConfig.chain = types_2.Chain.Mainnet);\n        this.chain = apiConfig.chain;\n        this.api = new api_1.OpenSeaAPI(apiConfig);\n        this.provider = (signerOrProvider.provider ??\n            signerOrProvider);\n        this._signerOrProvider = signerOrProvider ?? this.provider;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.seaport_v1_5 = new seaport_js_1.Seaport(this._signerOrProvider, {\n            overrides: {\n                contractAddress: constants_1.CROSS_CHAIN_SEAPORT_V1_5_ADDRESS,\n                seaportVersion: \"1.5\",\n                defaultConduitKey: constants_1.OPENSEA_CONDUIT_KEY,\n            },\n        });\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.seaport_v1_6 = new seaport_js_1.Seaport(this._signerOrProvider, {\n            overrides: { defaultConduitKey: constants_1.OPENSEA_CONDUIT_KEY },\n        });\n        // Emit events\n        this._emitter = new EventEmitter();\n        // Logger: default to no logging if fn not provided\n        this.logger = logger ?? ((arg) => arg);\n        // Cache decimals for WETH payment token to skip network request\n        try {\n            const wethAddress = (0, utils_2.getWETHAddress)(this.chain).toLowerCase();\n            this._cachedPaymentTokenDecimals[wethAddress] = 18;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }\n        catch (error) {\n            if (error.message.includes(\"Unknown WETH address\")) {\n                // Ignore\n            }\n            else {\n                console.error(error);\n            }\n        }\n    }\n    /**\n     * Add a listener for events emitted by the SDK.\n     * @param event The {@link EventType} to listen to.\n     * @param listener A callback that will accept an object with {@link EventData}\\\n     * @param once Whether the listener should only be called once, or continue listening until removed.\n     */\n    addListener(event, listener, once = false) {\n        if (once) {\n            this._emitter.once(event, listener);\n        }\n        else {\n            this._emitter.addListener(event, listener);\n        }\n    }\n    /**\n     * Remove an event listener by calling `.removeListener()` on an event and listener.\n     * @param event The {@link EventType} to remove a listener for\\\n     * @param listener The listener to remove\n     */\n    removeListener(event, listener) {\n        this._emitter.removeListener(event, listener);\n    }\n    /**\n     * Remove all event listeners. This should be called when you're unmounting\n     * a component that listens to events to make UI updates.\n     * @param event Optional EventType to remove listeners for\n     */\n    removeAllListeners(event) {\n        this._emitter.removeAllListeners(event);\n    }\n    /**\n     * Wrap ETH into WETH.\n     * W-ETH is needed for making offers.\n     * @param options\n     * @param options.amountInEth Amount of ether to wrap\n     * @param options.accountAddress Address of the user's wallet containing the ether\n     */\n    async wrapEth({ amountInEth, accountAddress, }) {\n        await this._requireAccountIsAvailable(accountAddress);\n        const value = (0, ethers_1.parseEther)(amountInEth.toString());\n        this._dispatch(types_2.EventType.WrapEth, { accountAddress, amount: value });\n        const wethContract = new ethers_1.Contract((0, utils_2.getWETHAddress)(this.chain), [\"function deposit() payable\"], this._signerOrProvider);\n        try {\n            const transaction = await wethContract.deposit({ value });\n            await this._confirmTransaction(transaction.hash, types_2.EventType.WrapEth, \"Wrapping ETH\");\n        }\n        catch (error) {\n            console.error(error);\n            this._dispatch(types_2.EventType.TransactionDenied, { error, accountAddress });\n        }\n    }\n    /**\n     * Unwrap WETH into ETH.\n     * Emits the `UnwrapWeth` event when the transaction is prompted.\n     * @param options\n     * @param options.amountInEth How much WETH to unwrap\n     * @param options.accountAddress Address of the user's wallet containing the WETH\n     */\n    async unwrapWeth({ amountInEth, accountAddress, }) {\n        await this._requireAccountIsAvailable(accountAddress);\n        const amount = (0, ethers_1.parseEther)(amountInEth.toString());\n        this._dispatch(types_2.EventType.UnwrapWeth, { accountAddress, amount });\n        const wethContract = new ethers_1.Contract((0, utils_2.getWETHAddress)(this.chain), [\"function withdraw(uint wad) public\"], this._signerOrProvider);\n        try {\n            const transaction = await wethContract.withdraw(amount);\n            await this._confirmTransaction(transaction.hash, types_2.EventType.UnwrapWeth, \"Unwrapping W-ETH\");\n        }\n        catch (error) {\n            console.error(error);\n            this._dispatch(types_2.EventType.TransactionDenied, { error, accountAddress });\n        }\n    }\n    async getFees({ collection, seller, paymentTokenAddress, startAmount, endAmount, excludeOptionalCreatorFees, }) {\n        let collectionFees = collection.fees;\n        if (excludeOptionalCreatorFees) {\n            collectionFees = collectionFees.filter((fee) => fee.required);\n        }\n        const collectionFeesBasisPoints = (0, utils_2.totalBasisPointsForFees)(collectionFees);\n        const sellerBasisPoints = constants_2.INVERSE_BASIS_POINT - collectionFeesBasisPoints;\n        const getConsiderationItem = (basisPoints, recipient) => {\n            return {\n                token: paymentTokenAddress,\n                amount: this.getAmountWithBasisPointsApplied(startAmount, basisPoints),\n                endAmount: this.getAmountWithBasisPointsApplied(endAmount ?? startAmount, basisPoints),\n                recipient,\n            };\n        };\n        const considerationItems = [];\n        if (seller) {\n            considerationItems.push(getConsiderationItem(sellerBasisPoints, seller));\n        }\n        if (collectionFeesBasisPoints > 0) {\n            for (const fee of collectionFees) {\n                considerationItems.push(getConsiderationItem((0, utils_2.basisPointsForFee)(fee), fee.recipient));\n            }\n        }\n        return considerationItems;\n    }\n    getNFTItems(nfts, quantities = []) {\n        return nfts.map((nft, index) => ({\n            itemType: (0, utils_2.getAssetItemType)(nft.token_standard.toUpperCase()),\n            token: (0, utils_2.getAddressAfterRemappingSharedStorefrontAddressToLazyMintAdapterAddress)(nft.contract),\n            identifier: nft.identifier ?? undefined,\n            amount: quantities[index].toString() ?? \"1\",\n        }));\n    }\n    /**\n     * Create and submit an offer on an asset.\n     * @param options\n     * @param options.asset The asset to trade. tokenAddress and tokenId must be defined.\n     * @param options.accountAddress Address of the wallet making the offer.\n     * @param options.startAmount Value of the offer in units, not base units e.g. not wei, of the payment token (or WETH if no payment token address specified)\n     * @param options.quantity The number of assets to bid for (if fungible or semi-fungible). Defaults to 1.\n     * @param options.domain An optional domain to be hashed and included in the first four bytes of the random salt.\n     * @param options.salt Arbitrary salt. If not passed in, a random salt will be generated with the first four bytes being the domain hash or empty.\n     * @param options.expirationTime Expiration time for the order, in UTC seconds\n     * @param options.paymentTokenAddress ERC20 address for the payment token in the order. If unspecified, defaults to WETH\n     * @param options.excludeOptionalCreatorFees If true, optional creator fees will be excluded from the offer. Default: true.\n     * @param options.zone The zone to use for the order. For order protection, pass SIGNED_ZONE. If unspecified, defaults to no zone.\n     *\n     * @returns The {@link OrderV2} that was created.\n     *\n     * @throws Error if the asset does not contain a token id.\n     * @throws Error if the accountAddress is not available through wallet or provider.\n     * @throws Error if the startAmount is not greater than 0.\n     * @throws Error if paymentTokenAddress is not WETH on anything other than Ethereum mainnet.\n     */\n    async createOffer({ asset, accountAddress, startAmount, quantity = 1, domain, salt, expirationTime, paymentTokenAddress = (0, utils_2.getWETHAddress)(this.chain), excludeOptionalCreatorFees = true, zone = ethers_1.ZeroAddress, }) {\n        await this._requireAccountIsAvailable(accountAddress);\n        const { nft } = await this.api.getNFT(asset.tokenAddress, asset.tokenId);\n        const considerationAssetItems = this.getNFTItems([nft], [BigInt(quantity ?? 1)]);\n        const { basePrice } = await this._getPriceParameters(types_2.OrderSide.OFFER, paymentTokenAddress, expirationTime ?? (0, utils_2.getMaxOrderExpirationTimestamp)(), startAmount);\n        const collection = await this.api.getCollection(nft.collection);\n        const considerationFeeItems = await this.getFees({\n            collection,\n            paymentTokenAddress,\n            startAmount: basePrice,\n            excludeOptionalCreatorFees,\n        });\n        if (collection.requiredZone) {\n            zone = collection.requiredZone;\n        }\n        const { executeAllActions } = await this.seaport_v1_6.createOrder({\n            offer: [\n                {\n                    token: paymentTokenAddress,\n                    amount: basePrice.toString(),\n                },\n            ],\n            consideration: [...considerationAssetItems, ...considerationFeeItems],\n            endTime: expirationTime !== undefined\n                ? BigInt(expirationTime).toString()\n                : (0, utils_2.getMaxOrderExpirationTimestamp)().toString(),\n            zone,\n            domain,\n            salt: BigInt(salt ?? 0).toString(),\n            restrictedByZone: zone !== ethers_1.ZeroAddress,\n            allowPartialFills: true,\n        }, accountAddress);\n        const order = await executeAllActions();\n        return this.api.postOrder(order, {\n            protocol: \"seaport\",\n            protocolAddress: utils_1.DEFAULT_SEAPORT_CONTRACT_ADDRESS,\n            side: types_2.OrderSide.OFFER,\n        });\n    }\n    /**\n     * Create and submit a listing for an asset.\n     * @param options\n     * @param options.asset The asset to trade. tokenAddress and tokenId must be defined.\n     * @param options.accountAddress  Address of the wallet making the listing\n     * @param options.startAmount Value of the listing at the start of the auction in units, not base units e.g. not wei, of the payment token (or WETH if no payment token address specified)\n     * @param options.endAmount Value of the listing at the end of the auction. If specified, price will change linearly between startAmount and endAmount as time progresses.\n     * @param options.quantity The number of assets to list (if fungible or semi-fungible). Defaults to 1.\n     * @param options.domain An optional domain to be hashed and included in the first four bytes of the random salt. This can be used for on-chain order attribution to assist with analytics.\n     * @param options.salt Arbitrary salt. If not passed in, a random salt will be generated with the first four bytes being the domain hash or empty.\n     * @param options.listingTime Optional time when the order will become fulfillable, in UTC seconds. Undefined means it will start now.\n     * @param options.expirationTime Expiration time for the order, in UTC seconds.\n     * @param options.paymentTokenAddress ERC20 address for the payment token in the order. If unspecified, defaults to ETH\n     * @param options.buyerAddress Optional address that's allowed to purchase this item. If specified, no other address will be able to take the order, unless its value is the null address.\n     * @param options.englishAuction If true, the order will be listed as an English auction.\n     * @param options.excludeOptionalCreatorFees If true, optional creator fees will be excluded from the listing. Default: false.\n     * @param options.zone The zone to use for the order.  For order protection, pass SIGNED_ZONE. If unspecified, defaults to no zone.\n     * @returns The {@link OrderV2} that was created.\n     *\n     * @throws Error if the asset does not contain a token id.\n     * @throws Error if the accountAddress is not available through wallet or provider.\n     * @throws Error if the startAmount is not greater than 0.\n     * @throws Error if paymentTokenAddress is not WETH on anything other than Ethereum mainnet.\n     */\n    async createListing({ asset, accountAddress, startAmount, endAmount, quantity = 1, domain, salt, listingTime, expirationTime, paymentTokenAddress = ethers_1.ethers.ZeroAddress, buyerAddress, englishAuction, excludeOptionalCreatorFees = false, zone = ethers_1.ZeroAddress, }) {\n        await this._requireAccountIsAvailable(accountAddress);\n        const { nft } = await this.api.getNFT(asset.tokenAddress, asset.tokenId);\n        const offerAssetItems = this.getNFTItems([nft], [BigInt(quantity ?? 1)]);\n        if (englishAuction && paymentTokenAddress == ethers_1.ethers.ZeroAddress) {\n            throw new Error(`English auctions must use wrapped ETH or an ERC-20 token.`);\n        }\n        const { basePrice, endPrice } = await this._getPriceParameters(types_2.OrderSide.LISTING, paymentTokenAddress, expirationTime ?? (0, utils_2.getMaxOrderExpirationTimestamp)(), startAmount, endAmount ?? undefined);\n        const collection = await this.api.getCollection(nft.collection);\n        const considerationFeeItems = await this.getFees({\n            collection,\n            seller: accountAddress,\n            paymentTokenAddress,\n            startAmount: basePrice,\n            endAmount: endPrice,\n            excludeOptionalCreatorFees,\n        });\n        if (buyerAddress) {\n            considerationFeeItems.push(...(0, privateListings_1.getPrivateListingConsiderations)(offerAssetItems, buyerAddress));\n        }\n        if (englishAuction) {\n            zone = (0, utils_2.isTestChain)(this.chain)\n                ? constants_2.ENGLISH_AUCTION_ZONE_TESTNETS\n                : constants_2.ENGLISH_AUCTION_ZONE_MAINNETS;\n        }\n        else if (collection.requiredZone) {\n            zone = collection.requiredZone;\n        }\n        const { executeAllActions } = await this.seaport_v1_6.createOrder({\n            offer: offerAssetItems,\n            consideration: considerationFeeItems,\n            startTime: listingTime?.toString(),\n            endTime: expirationTime?.toString() ??\n                (0, utils_2.getMaxOrderExpirationTimestamp)().toString(),\n            zone,\n            domain,\n            salt: BigInt(salt ?? 0).toString(),\n            restrictedByZone: zone !== ethers_1.ZeroAddress,\n            allowPartialFills: englishAuction ? false : true,\n        }, accountAddress);\n        const order = await executeAllActions();\n        return this.api.postOrder(order, {\n            protocol: \"seaport\",\n            protocolAddress: utils_1.DEFAULT_SEAPORT_CONTRACT_ADDRESS,\n            side: types_2.OrderSide.LISTING,\n        });\n    }\n    /**\n     * Create and submit a collection offer.\n     * @param options\n     * @param options.collectionSlug Identifier for the collection.\n     * @param options.accountAddress Address of the wallet making the offer.\n     * @param options.amount Value of the offer in units, not base units e.g. not wei, of the payment token (or WETH if no payment token address specified).\n     * @param options.quantity The number of assets to bid for (if fungible or semi-fungible).\n     * @param options.domain An optional domain to be hashed and included in the first four bytes of the random salt. This can be used for on-chain order attribution to assist with analytics.\n     * @param options.salt Arbitrary salt. If not passed in, a random salt will be generated with the first four bytes being the domain hash or empty.\n     * @param options.expirationTime Expiration time for the order, in UTC seconds.\n     * @param options.paymentTokenAddress ERC20 address for the payment token in the order. If unspecified, defaults to WETH.\n     * @param options.excludeOptionalCreatorFees If true, optional creator fees will be excluded from the offer. Default: false.\n     * @param options.offerProtectionEnabled Build the offer on OpenSea's signed zone to provide offer protections from receiving an item which is disabled from trading.\n     * @param options.traitType If defined, the trait name to create the collection offer for.\n     * @param options.traitValue If defined, the trait value to create the collection offer for.\n     * @returns The {@link CollectionOffer} that was created.\n     */\n    async createCollectionOffer({ collectionSlug, accountAddress, amount, quantity, domain, salt, expirationTime, paymentTokenAddress = (0, utils_2.getWETHAddress)(this.chain), excludeOptionalCreatorFees = false, offerProtectionEnabled = true, traitType, traitValue, }) {\n        await this._requireAccountIsAvailable(accountAddress);\n        const collection = await this.api.getCollection(collectionSlug);\n        const buildOfferResult = await this.api.buildOffer(accountAddress, quantity, collectionSlug, offerProtectionEnabled, traitType, traitValue);\n        const item = buildOfferResult.partialParameters.consideration[0];\n        const convertedConsiderationItem = {\n            itemType: item.itemType,\n            token: item.token,\n            identifier: item.identifierOrCriteria,\n            amount: item.startAmount,\n        };\n        const { basePrice } = await this._getPriceParameters(types_2.OrderSide.LISTING, paymentTokenAddress, expirationTime ?? (0, utils_2.getMaxOrderExpirationTimestamp)(), amount);\n        const considerationFeeItems = await this.getFees({\n            collection,\n            paymentTokenAddress,\n            startAmount: basePrice,\n            endAmount: basePrice,\n            excludeOptionalCreatorFees,\n        });\n        const considerationItems = [\n            convertedConsiderationItem,\n            ...considerationFeeItems,\n        ];\n        const payload = {\n            offerer: accountAddress,\n            offer: [\n                {\n                    token: paymentTokenAddress,\n                    amount: basePrice.toString(),\n                },\n            ],\n            consideration: considerationItems,\n            endTime: expirationTime?.toString() ??\n                (0, utils_2.getMaxOrderExpirationTimestamp)().toString(),\n            zone: buildOfferResult.partialParameters.zone,\n            domain,\n            salt: BigInt(salt ?? 0).toString(),\n            restrictedByZone: true,\n            allowPartialFills: true,\n        };\n        const { executeAllActions } = await this.seaport_v1_6.createOrder(payload, accountAddress);\n        const order = await executeAllActions();\n        return this.api.postCollectionOffer(order, collectionSlug, traitType, traitValue);\n    }\n    /**\n     * Fulfill a private order for a designated address.\n     * @param options\n     * @param options.order The order to fulfill\n     * @param options.accountAddress Address of the wallet taking the order.\n     * @param options.domain An optional domain to be hashed and included at the end of fulfillment calldata.\n     *                       This can be used for on-chain order attribution to assist with analytics.\n     * @param options.overrides Transaction overrides, ignored if not set.\n     * @returns Transaction hash of the order.\n     */\n    async fulfillPrivateOrder({ order, accountAddress, domain, overrides, }) {\n        if (!order.taker?.address) {\n            throw new Error(\"Order is not a private listing - must have a taker address\");\n        }\n        const counterOrder = (0, privateListings_1.constructPrivateListingCounterOrder)(order.protocolData, order.taker.address);\n        const fulfillments = (0, privateListings_1.getPrivateListingFulfillments)(order.protocolData);\n        const seaport = this.getSeaport(order.protocolAddress);\n        const transaction = await seaport\n            .matchOrders({\n            orders: [order.protocolData, counterOrder],\n            fulfillments,\n            overrides: {\n                ...overrides,\n                value: counterOrder.parameters.offer[0].startAmount,\n            },\n            accountAddress,\n            domain,\n        })\n            .transact();\n        const transactionReceipt = await transaction.wait();\n        if (!transactionReceipt) {\n            throw new Error(\"Missing transaction receipt\");\n        }\n        await this._confirmTransaction(transactionReceipt.hash, types_2.EventType.MatchOrders, \"Fulfilling order\");\n        return transactionReceipt.hash;\n    }\n    /**\n     * Fulfill an order for an asset. The order can be either a listing or an offer.\n     * @param options\n     * @param options.order The order to fulfill, a.k.a. \"take\"\n     * @param options.accountAddress Address of the wallet taking the offer.\n     * @param options.recipientAddress The optional address to receive the order's item(s) or currencies. If not specified, defaults to accountAddress.\n     * @param options.domain An optional domain to be hashed and included at the end of fulfillment calldata.  This can be used for on-chain order attribution to assist with analytics.\n     * @param options.overrides Transaction overrides, ignored if not set.\n     * @returns Transaction hash of the order.\n     *\n     * @throws Error if the accountAddress is not available through wallet or provider.\n     * @throws Error if the order's protocol address is not supported by OpenSea. See {@link isValidProtocol}.\n     * @throws Error if attempting to fulfill the order with a recipient address which does not match a private listing.\n     */\n    async fulfillOrder({ order, accountAddress, recipientAddress, domain, overrides, }) {\n        await this._requireAccountIsAvailable(accountAddress);\n        const protocolAddress = order.protocolAddress ?? order.protocol_address;\n        (0, utils_2.requireValidProtocol)(protocolAddress);\n        const orderHash = order.orderHash ?? order.order_hash;\n        const side = order.side ??\n            ([types_1.OrderType.BASIC, types_1.OrderType.ENGLISH].includes(order.type)\n                ? types_2.OrderSide.LISTING\n                : types_2.OrderSide.OFFER);\n        let extraData = undefined;\n        const protocolData = order.protocolData ?? order.protocol_data;\n        if (orderHash) {\n            const result = await this.api.generateFulfillmentData(accountAddress, orderHash, protocolAddress, side);\n            // If the order is using offer protection, the extraData\n            // must be included with the order to successfully fulfill.\n            const inputData = result.fulfillment_data.transaction.input_data;\n            if (\"orders\" in inputData && \"extraData\" in inputData.orders[0]) {\n                extraData = inputData.orders[0].extraData;\n            }\n            const signature = result.fulfillment_data.orders[0].signature;\n            protocolData.signature = signature;\n        }\n        const isPrivateListing = \"taker\" in order ? !!order.taker : false;\n        if (isPrivateListing) {\n            if (recipientAddress) {\n                throw new Error(\"Private listings cannot be fulfilled with a recipient address\");\n            }\n            return this.fulfillPrivateOrder({\n                order: order,\n                accountAddress,\n                domain,\n                overrides,\n            });\n        }\n        const seaport = this.getSeaport(protocolAddress);\n        const { executeAllActions } = await seaport.fulfillOrder({\n            order: protocolData,\n            accountAddress,\n            recipientAddress,\n            extraData,\n            domain,\n            overrides,\n        });\n        const transaction = await executeAllActions();\n        const transactionHash = ethers_1.ethers.Transaction.from(transaction).hash;\n        if (!transactionHash) {\n            throw new Error(\"Missing transaction hash\");\n        }\n        await this._confirmTransaction(transactionHash, types_2.EventType.MatchOrders, \"Fulfilling order\");\n        return transactionHash;\n    }\n    /**\n     * Utility function to get the Seaport client based on the address.\n     * @param protocolAddress The Seaport address.\n     */\n    getSeaport(protocolAddress) {\n        const checksummedProtocolAddress = ethers_1.ethers.getAddress(protocolAddress);\n        switch (checksummedProtocolAddress) {\n            case constants_1.CROSS_CHAIN_SEAPORT_V1_5_ADDRESS:\n                return this.seaport_v1_5;\n            case constants_1.CROSS_CHAIN_SEAPORT_V1_6_ADDRESS:\n                return this.seaport_v1_6;\n            default:\n                throw new Error(`Unsupported protocol address: ${protocolAddress}`);\n        }\n    }\n    /**\n     * Cancel orders onchain, preventing them from being fulfilled.\n     * @param options\n     * @param options.orders The orders to cancel\n     * @param options.accountAddress The account address cancelling the orders.\n     * @param options.domain An optional domain to be hashed and included at the end of fulfillment calldata.\n     *                       This can be used for on-chain order attribution to assist with analytics.\n     * @param options.overrides Transaction overrides, ignored if not set.\n     * @returns Transaction hash of the order.\n     */\n    async cancelSeaportOrders({ orders, accountAddress, domain, protocolAddress = utils_1.DEFAULT_SEAPORT_CONTRACT_ADDRESS, overrides, }) {\n        const seaport = this.getSeaport(protocolAddress);\n        const transaction = await seaport\n            .cancelOrders(orders, accountAddress, domain, overrides)\n            .transact();\n        return transaction.hash;\n    }\n    /**\n     * Cancel an order onchain, preventing it from ever being fulfilled.\n     * @param options\n     * @param options.order The order to cancel\n     * @param options.accountAddress The account address that will be cancelling the order.\n     * @param options.domain An optional domain to be hashed and included at the end of fulfillment calldata.  This can be used for on-chain order attribution to assist with analytics.\n     *\n     * @throws Error if the accountAddress is not available through wallet or provider.\n     * @throws Error if the order's protocol address is not supported by OpenSea. See {@link isValidProtocol}.\n     */\n    async cancelOrder({ order, accountAddress, domain, }) {\n        await this._requireAccountIsAvailable(accountAddress);\n        (0, utils_2.requireValidProtocol)(order.protocolAddress);\n        this._dispatch(types_2.EventType.CancelOrder, { orderV2: order, accountAddress });\n        // Transact and get the transaction hash\n        const transactionHash = await this.cancelSeaportOrders({\n            orders: [order.protocolData.parameters],\n            accountAddress,\n            domain,\n            protocolAddress: order.protocolAddress,\n        });\n        // Await transaction confirmation\n        await this._confirmTransaction(transactionHash, types_2.EventType.CancelOrder, \"Cancelling order\");\n    }\n    _getSeaportVersion(protocolAddress) {\n        const protocolAddressChecksummed = ethers_1.ethers.getAddress(protocolAddress);\n        switch (protocolAddressChecksummed) {\n            case constants_1.CROSS_CHAIN_SEAPORT_V1_6_ADDRESS:\n                return \"1.6\";\n            case constants_1.CROSS_CHAIN_SEAPORT_V1_5_ADDRESS:\n                return \"1.5\";\n            default:\n                throw new Error(\"Unknown or unsupported protocol address\");\n        }\n    }\n    /**\n     * Get the offerer signature for canceling an order offchain.\n     * The signature will only be valid if the signer address is the address of the order's offerer.\n     */\n    async _getOffererSignature(protocolAddress, orderHash, chain) {\n        const chainId = (0, utils_2.getChainId)(chain);\n        const name = \"Seaport\";\n        const version = this._getSeaportVersion(protocolAddress);\n        if (typeof this._signerOrProvider.signTypedData == \"undefined\") {\n            throw new Error(\"Please pass an ethers Signer into this sdk to derive an offerer signature\");\n        }\n        return this._signerOrProvider.signTypedData({ chainId, name, version, verifyingContract: protocolAddress }, { OrderHash: [{ name: \"orderHash\", type: \"bytes32\" }] }, { orderHash });\n    }\n    /**\n     * Offchain cancel an order, offer or listing, by its order hash when protected by the SignedZone.\n     * Protocol and Chain are required to prevent hash collisions.\n     * Please note cancellation is only assured if a fulfillment signature was not vended prior to cancellation.\n     * @param protocolAddress The Seaport address for the order.\n     * @param orderHash The order hash, or external identifier, of the order.\n     * @param chain The chain where the order is located.\n     * @param offererSignature An EIP-712 signature from the offerer of the order.\n     *                         If this is not provided, the user associated with the API Key will be checked instead.\n     *                         The signature must be a EIP-712 signature consisting of the order's Seaport contract's\n     *                         name, version, address, and chain. The struct to sign is `OrderHash` containing a\n     *                         single bytes32 field.\n     * @param useSignerToDeriveOffererSignature Derive the offererSignature from the Ethers signer passed into this sdk.\n     * @returns The response from the API.\n     */\n    async offchainCancelOrder(protocolAddress, orderHash, chain = this.chain, offererSignature, useSignerToDeriveOffererSignature) {\n        if (useSignerToDeriveOffererSignature) {\n            offererSignature = await this._getOffererSignature(protocolAddress, orderHash, chain);\n        }\n        return this.api.offchainCancelOrder(protocolAddress, orderHash, chain, offererSignature);\n    }\n    /**\n     * Returns whether an order is fulfillable.\n     * An order may not be fulfillable if a target item's transfer function\n     * is locked for some reason, e.g. an item is being rented within a game\n     * or trading has been locked for an item type.\n     * @param options\n     * @param options.order Order to check\n     * @param options.accountAddress The account address that will be fulfilling the order\n     * @returns True if the order is fulfillable, else False.\n     *\n     * @throws Error if the order's protocol address is not supported by OpenSea. See {@link isValidProtocol}.\n     */\n    async isOrderFulfillable({ order, accountAddress, }) {\n        (0, utils_2.requireValidProtocol)(order.protocolAddress);\n        const seaport = this.getSeaport(order.protocolAddress);\n        try {\n            const isValid = await seaport\n                .validate([order.protocolData], accountAddress)\n                .staticCall();\n            return !!isValid;\n        }\n        catch (error) {\n            if ((0, utils_2.hasErrorCode)(error) && error.code === \"CALL_EXCEPTION\") {\n                return false;\n            }\n            throw error;\n        }\n    }\n    /**\n     * Get an account's balance of any Asset. This asset can be an ERC20, ERC1155, or ERC721.\n     * @param options\n     * @param options.accountAddress Account address to check\n     * @param options.asset The Asset to check balance for. tokenStandard must be set.\n     * @returns The balance of the asset for the account.\n     *\n     * @throws Error if the token standard does not support balanceOf.\n     */\n    async getBalance({ accountAddress, asset, }) {\n        switch (asset.tokenStandard) {\n            case types_2.TokenStandard.ERC20: {\n                const contract = contracts_1.ERC20__factory.connect(asset.tokenAddress, this.provider);\n                return await contract.balanceOf.staticCall(accountAddress);\n            }\n            case types_2.TokenStandard.ERC1155: {\n                if (asset.tokenId === undefined || asset.tokenId === null) {\n                    throw new Error(\"Missing ERC1155 tokenId for getBalance\");\n                }\n                const contract = contracts_1.ERC1155__factory.connect(asset.tokenAddress, this.provider);\n                return await contract.balanceOf.staticCall(accountAddress, asset.tokenId);\n            }\n            case types_2.TokenStandard.ERC721: {\n                if (asset.tokenId === undefined || asset.tokenId === null) {\n                    throw new Error(\"Missing ERC721 tokenId for getBalance\");\n                }\n                const contract = contracts_1.ERC721__factory.connect(asset.tokenAddress, this.provider);\n                try {\n                    const owner = await contract.ownerOf.staticCall(asset.tokenId);\n                    return BigInt(owner.toLowerCase() == accountAddress.toLowerCase());\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                }\n                catch (error) {\n                    this.logger(`Failed to get ownerOf ERC721: ${error.message ?? error}`);\n                    return 0n;\n                }\n            }\n            default:\n                throw new Error(\"Unsupported token standard for getBalance\");\n        }\n    }\n    /**\n     * Transfer an asset. This asset can be an ERC20, ERC1155, or ERC721.\n     * @param options\n     * @param options.asset The Asset to transfer. tokenStandard must be set.\n     * @param options.amount Amount of asset to transfer. Not used for ERC721.\n     * @param options.fromAddress The address to transfer from\n     * @param options.toAddress The address to transfer to\n     * @param options.overrides Transaction overrides, ignored if not set.\n     */\n    async transfer({ asset, amount, fromAddress, toAddress, overrides, }) {\n        await this._requireAccountIsAvailable(fromAddress);\n        overrides = { ...overrides, from: fromAddress };\n        let transaction;\n        switch (asset.tokenStandard) {\n            case types_2.TokenStandard.ERC20: {\n                if (!amount) {\n                    throw new Error(\"Missing ERC20 amount for transfer\");\n                }\n                const contract = contracts_1.ERC20__factory.connect(asset.tokenAddress, this._signerOrProvider);\n                transaction = contract.transfer(toAddress, amount, overrides);\n                break;\n            }\n            case types_2.TokenStandard.ERC1155: {\n                if (asset.tokenId === undefined || asset.tokenId === null) {\n                    throw new Error(\"Missing ERC1155 tokenId for transfer\");\n                }\n                if (!amount) {\n                    throw new Error(\"Missing ERC1155 amount for transfer\");\n                }\n                const contract = contracts_1.ERC1155__factory.connect(asset.tokenAddress, this._signerOrProvider);\n                transaction = contract.safeTransferFrom(fromAddress, toAddress, asset.tokenId, amount, \"\", overrides);\n                break;\n            }\n            case types_2.TokenStandard.ERC721: {\n                if (asset.tokenId === undefined || asset.tokenId === null) {\n                    throw new Error(\"Missing ERC721 tokenId for transfer\");\n                }\n                const contract = contracts_1.ERC721__factory.connect(asset.tokenAddress, this._signerOrProvider);\n                transaction = contract.transferFrom(fromAddress, toAddress, asset.tokenId, overrides);\n                break;\n            }\n            default:\n                throw new Error(\"Unsupported token standard for transfer\");\n        }\n        try {\n            const transactionResponse = await transaction;\n            await this._confirmTransaction(transactionResponse.hash, types_2.EventType.Transfer, \"Transferring asset\");\n        }\n        catch (error) {\n            console.error(error);\n            this._dispatch(types_2.EventType.TransactionDenied, {\n                error,\n                accountAddress: fromAddress,\n            });\n        }\n    }\n    /**\n     * Instead of signing an off-chain order, this methods allows you to approve an order\n     * with on on-chain transaction.\n     * @param order Order to approve\n     * @param domain An optional domain to be hashed and included at the end of fulfillment calldata.  This can be used for on-chain order attribution to assist with analytics.\n     * @returns Transaction hash of the approval transaction\n     *\n     * @throws Error if the accountAddress is not available through wallet or provider.\n     * @throws Error if the order's protocol address is not supported by OpenSea. See {@link isValidProtocol}.\n     */\n    async approveOrder(order, domain) {\n        await this._requireAccountIsAvailable(order.maker.address);\n        (0, utils_2.requireValidProtocol)(order.protocolAddress);\n        this._dispatch(types_2.EventType.ApproveOrder, {\n            orderV2: order,\n            accountAddress: order.maker.address,\n        });\n        const seaport = this.getSeaport(order.protocolAddress);\n        const transaction = await seaport\n            .validate([order.protocolData], order.maker.address, domain)\n            .transact();\n        await this._confirmTransaction(transaction.hash, types_2.EventType.ApproveOrder, \"Approving order\");\n        return transaction.hash;\n    }\n    /**\n     * Compute the `basePrice` and `endPrice` parameters to be used to price an order.\n     * Also validates the expiration time and auction type.\n     * @param tokenAddress Address of the ERC-20 token to use for trading. Use the null address for ETH.\n     * @param expirationTime When the auction expires, or 0 if never.\n     * @param startAmount The base value for the order, in the token's main units (e.g. ETH instead of wei)\n     * @param endAmount The end value for the order, in the token's main units (e.g. ETH instead of wei)\n     */\n    async _getPriceParameters(orderSide, tokenAddress, expirationTime, startAmount, endAmount) {\n        tokenAddress = tokenAddress.toLowerCase();\n        const isEther = tokenAddress === ethers_1.ethers.ZeroAddress;\n        let decimals = 18;\n        if (!isEther) {\n            if (tokenAddress in this._cachedPaymentTokenDecimals) {\n                decimals = this._cachedPaymentTokenDecimals[tokenAddress];\n            }\n            else {\n                const paymentToken = await this.api.getPaymentToken(tokenAddress);\n                this._cachedPaymentTokenDecimals[tokenAddress] = paymentToken.decimals;\n                decimals = paymentToken.decimals;\n            }\n        }\n        const startAmountWei = ethers_1.ethers.parseUnits(startAmount.toString(), decimals);\n        const endAmountWei = endAmount\n            ? ethers_1.ethers.parseUnits(endAmount.toString(), decimals)\n            : undefined;\n        const priceDiffWei = endAmountWei !== undefined ? startAmountWei - endAmountWei : 0n;\n        const basePrice = startAmountWei;\n        const endPrice = endAmountWei;\n        // Validation\n        if (startAmount == null || startAmountWei < 0) {\n            throw new Error(\"Starting price must be a number >= 0\");\n        }\n        if (isEther && orderSide === types_2.OrderSide.OFFER) {\n            throw new Error(\"Offers must use wrapped ETH or an ERC-20 token.\");\n        }\n        if (priceDiffWei < 0) {\n            throw new Error(\"End price must be less than or equal to the start price.\");\n        }\n        if (priceDiffWei > 0 && BigInt(expirationTime) === 0n) {\n            throw new Error(\"Expiration time must be set if order will change in price.\");\n        }\n        return { basePrice, endPrice };\n    }\n    _dispatch(event, data) {\n        this._emitter.emit(event, data);\n    }\n    /** Get the accounts available from the signer or provider. */\n    async _getAvailableAccounts() {\n        const availableAccounts = [];\n        if (\"address\" in this._signerOrProvider) {\n            availableAccounts.push(this._signerOrProvider.address);\n        }\n        else if (\"listAccounts\" in this._signerOrProvider) {\n            const addresses = (await this._signerOrProvider.listAccounts()).map((acct) => acct.address);\n            availableAccounts.push(...addresses);\n        }\n        else if (\"getAddress\" in this._signerOrProvider) {\n            availableAccounts.push(await this._signerOrProvider.getAddress());\n        }\n        return availableAccounts;\n    }\n    /**\n     * Throws an error if an account is not available through the provider.\n     * @param accountAddress The account address to check is available.\n     */\n    async _requireAccountIsAvailable(accountAddress) {\n        const accountAddressChecksummed = ethers_1.ethers.getAddress(accountAddress);\n        const availableAccounts = await this._getAvailableAccounts();\n        if (availableAccounts.includes(accountAddressChecksummed)) {\n            return;\n        }\n        throw new Error(`Specified accountAddress is not available through wallet or provider: ${accountAddressChecksummed}. Accounts available: ${availableAccounts.length > 0 ? availableAccounts.join(\", \") : \"none\"}`);\n    }\n    /**\n     * Wait for a transaction to confirm and log the success or failure.\n     * @param transactionHash The transaction hash to wait for.\n     * @param event The event type to log.\n     * @param description The description of the transaction.\n     */\n    async _confirmTransaction(transactionHash, event, description) {\n        const transactionEventData = { transactionHash, event };\n        this.logger(`Transaction started: ${description}`);\n        try {\n            this._dispatch(types_2.EventType.TransactionCreated, transactionEventData);\n            await this.provider.waitForTransaction(transactionHash);\n            this.logger(`Transaction succeeded: ${description}`);\n            this._dispatch(types_2.EventType.TransactionConfirmed, transactionEventData);\n        }\n        catch (error) {\n            this.logger(`Transaction failed: ${description}`);\n            this._dispatch(types_2.EventType.TransactionFailed, {\n                ...transactionEventData,\n                error,\n            });\n            throw error;\n        }\n    }\n}\nexports.OpenSeaSDK = OpenSeaSDK;\n//# sourceMappingURL=sdk.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbnNlYS1qcy9saWIvc2RrLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQjtBQUNsQixxQkFBcUIsbUJBQU8sQ0FBQyxzQkFBUTtBQUNyQyxxQkFBcUIsbUJBQU8sQ0FBQyxrRkFBcUI7QUFDbEQsb0JBQW9CLG1CQUFPLENBQUMsb0dBQW1DO0FBQy9ELGlCQUFpQixtQkFBTyxDQUFDLGlFQUFRO0FBQ2pDLGNBQWMsbUJBQU8sQ0FBQyxpRUFBVztBQUNqQyxvQkFBb0IsbUJBQU8sQ0FBQyxxRUFBYTtBQUN6QywwQkFBMEIsbUJBQU8sQ0FBQywrRkFBMEI7QUFDNUQsZ0JBQWdCLG1CQUFPLENBQUMsMkVBQWdCO0FBQ3hDLGdCQUFnQixtQkFBTyxDQUFDLDJFQUFnQjtBQUN4QyxvQkFBb0IsbUJBQU8sQ0FBQywrRkFBdUI7QUFDbkQsZ0JBQWdCLG1CQUFPLENBQUMsNkRBQVM7QUFDakMsZ0JBQWdCLG1CQUFPLENBQUMseUVBQWU7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0EseUJBQXlCLG9EQUFvRDtBQUM3RSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLGlCQUFpQjtBQUMxQyxtRUFBbUUsZ0JBQWdCO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixpQkFBaUI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw4QkFBOEI7QUFDbEQ7QUFDQTtBQUNBLG9EQUFvRCwrQkFBK0I7QUFDbkY7QUFDQTtBQUNBLDZEQUE2RCxPQUFPO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFLHVCQUF1QjtBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsOEJBQThCO0FBQ3JEO0FBQ0E7QUFDQSx1REFBdUQsd0JBQXdCO0FBQy9FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFLHVCQUF1QjtBQUN6RjtBQUNBO0FBQ0Esb0JBQW9CLDhGQUE4RjtBQUNsSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsZUFBZTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ05BQWdOO0FBQ3hPO0FBQ0EsZ0JBQWdCLE1BQU07QUFDdEI7QUFDQSxnQkFBZ0IsWUFBWTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG9CQUFvQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixlQUFlO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQiwyUEFBMlA7QUFDclI7QUFDQSxnQkFBZ0IsTUFBTTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixzQkFBc0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG9CQUFvQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHVCQUF1QjtBQUM1QztBQUNBLGtDQUFrQywwT0FBME87QUFDNVE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsWUFBWTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isb0JBQW9CO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLDJDQUEyQztBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUZBQXVGLHNCQUFzQjtBQUM3RztBQUNBO0FBQ0EseUJBQXlCLDZEQUE2RDtBQUN0RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsZ0JBQWdCLG9CQUFvQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFpRSxnQkFBZ0I7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHdHQUF3RztBQUN4STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUZBQXVGLHNCQUFzQjtBQUM3RztBQUNBLHdCQUF3QixnQ0FBZ0M7QUFDeEQ7QUFDQTtBQUNBLHdEQUF3RCxnQ0FBZ0M7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELDREQUE0RCxJQUFJLGNBQWMsb0NBQW9DLEdBQUcsSUFBSSxXQUFXO0FBQzFMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1RkFBdUYsc0JBQXNCO0FBQzdHO0FBQ0EsK0JBQStCLHdCQUF3QjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsd0JBQXdCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBaUUsdUJBQXVCO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLG1EQUFtRDtBQUN4RTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUZBQXVGLHNCQUFzQjtBQUM3RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUdBQWlHLDBCQUEwQix3QkFBd0IscUVBQXFFO0FBQ3hOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkMsNENBQTRDLFlBQVk7QUFDeEQ7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELFlBQVk7QUFDOUQ7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLFlBQVk7QUFDM0Q7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2RwLXRlc3QtYWdlbnQvLi9ub2RlX21vZHVsZXMvb3BlbnNlYS1qcy9saWIvc2RrLmpzPzAwYWEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk9wZW5TZWFTREsgPSB2b2lkIDA7XG5jb25zdCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKFwiZXZlbnRzXCIpO1xuY29uc3Qgc2VhcG9ydF9qc18xID0gcmVxdWlyZShcIkBvcGVuc2VhL3NlYXBvcnQtanNcIik7XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCJAb3BlbnNlYS9zZWFwb3J0LWpzL2xpYi9jb25zdGFudHNcIik7XG5jb25zdCBldGhlcnNfMSA9IHJlcXVpcmUoXCJldGhlcnNcIik7XG5jb25zdCBhcGlfMSA9IHJlcXVpcmUoXCIuL2FwaS9hcGlcIik7XG5jb25zdCBjb25zdGFudHNfMiA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcbmNvbnN0IHByaXZhdGVMaXN0aW5nc18xID0gcmVxdWlyZShcIi4vb3JkZXJzL3ByaXZhdGVMaXN0aW5nc1wiKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi9vcmRlcnMvdHlwZXNcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vb3JkZXJzL3V0aWxzXCIpO1xuY29uc3QgY29udHJhY3RzXzEgPSByZXF1aXJlKFwiLi90eXBlY2hhaW4vY29udHJhY3RzXCIpO1xuY29uc3QgdHlwZXNfMiA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xuY29uc3QgdXRpbHNfMiA9IHJlcXVpcmUoXCIuL3V0aWxzL3V0aWxzXCIpO1xuLyoqXG4gKiBUaGUgT3BlblNlYSBTREsgbWFpbiBjbGFzcy5cbiAqIEBjYXRlZ29yeSBNYWluIENsYXNzZXNcbiAqL1xuY2xhc3MgT3BlblNlYVNESyB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIE9wZW5TZWFTREsuXG4gICAgICogQHBhcmFtIHNpZ25lck9yUHJvdmlkZXIgU2lnbmVyIG9yIHByb3ZpZGVyIHRvIHVzZSBmb3IgdHJhbnNhY3Rpb25zLiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgbmV3IGV0aGVycy5wcm92aWRlcnMuSnNvblJwY1Byb3ZpZGVyKCdodHRwczovL21haW5uZXQuaW5mdXJhLmlvJylgIG9yXG4gICAgICogYG5ldyBldGhlcnMuV2FsbGV0KHByaXZLZXksIHByb3ZpZGVyKWBcbiAgICAgKiBAcGFyYW0gYXBpQ29uZmlnIGNvbmZpZ3VyYXRpb24gb3B0aW9ucywgaW5jbHVkaW5nIGBjaGFpbmBcbiAgICAgKiBAcGFyYW0gbG9nZ2VyIG9wdGlvbmFsIGZ1bmN0aW9uIGZvciBsb2dnaW5nIGRlYnVnIHN0cmluZ3MuIGRlZmF1bHRzIHRvIG5vIGxvZ2dpbmdcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzaWduZXJPclByb3ZpZGVyLCBhcGlDb25maWcgPSB7fSwgbG9nZ2VyKSB7XG4gICAgICAgIC8qKiBJbnRlcm5hbCBjYWNoZSBvZiBkZWNpbWFscyBmb3IgcGF5bWVudCB0b2tlbnMgdG8gc2F2ZSBuZXR3b3JrIHJlcXVlc3RzICovXG4gICAgICAgIHRoaXMuX2NhY2hlZFBheW1lbnRUb2tlbkRlY2ltYWxzID0ge307XG4gICAgICAgIHRoaXMuZ2V0QW1vdW50V2l0aEJhc2lzUG9pbnRzQXBwbGllZCA9IChhbW91bnQsIGJhc2lzUG9pbnRzKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKChhbW91bnQgKiBiYXNpc1BvaW50cykgLyBjb25zdGFudHNfMi5JTlZFUlNFX0JBU0lTX1BPSU5UKS50b1N0cmluZygpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBBUEkgY29uZmlnXG4gICAgICAgIGFwaUNvbmZpZy5jaGFpbiA/PyAoYXBpQ29uZmlnLmNoYWluID0gdHlwZXNfMi5DaGFpbi5NYWlubmV0KTtcbiAgICAgICAgdGhpcy5jaGFpbiA9IGFwaUNvbmZpZy5jaGFpbjtcbiAgICAgICAgdGhpcy5hcGkgPSBuZXcgYXBpXzEuT3BlblNlYUFQSShhcGlDb25maWcpO1xuICAgICAgICB0aGlzLnByb3ZpZGVyID0gKHNpZ25lck9yUHJvdmlkZXIucHJvdmlkZXIgPz9cbiAgICAgICAgICAgIHNpZ25lck9yUHJvdmlkZXIpO1xuICAgICAgICB0aGlzLl9zaWduZXJPclByb3ZpZGVyID0gc2lnbmVyT3JQcm92aWRlciA/PyB0aGlzLnByb3ZpZGVyO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICB0aGlzLnNlYXBvcnRfdjFfNSA9IG5ldyBzZWFwb3J0X2pzXzEuU2VhcG9ydCh0aGlzLl9zaWduZXJPclByb3ZpZGVyLCB7XG4gICAgICAgICAgICBvdmVycmlkZXM6IHtcbiAgICAgICAgICAgICAgICBjb250cmFjdEFkZHJlc3M6IGNvbnN0YW50c18xLkNST1NTX0NIQUlOX1NFQVBPUlRfVjFfNV9BRERSRVNTLFxuICAgICAgICAgICAgICAgIHNlYXBvcnRWZXJzaW9uOiBcIjEuNVwiLFxuICAgICAgICAgICAgICAgIGRlZmF1bHRDb25kdWl0S2V5OiBjb25zdGFudHNfMS5PUEVOU0VBX0NPTkRVSVRfS0VZLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIHRoaXMuc2VhcG9ydF92MV82ID0gbmV3IHNlYXBvcnRfanNfMS5TZWFwb3J0KHRoaXMuX3NpZ25lck9yUHJvdmlkZXIsIHtcbiAgICAgICAgICAgIG92ZXJyaWRlczogeyBkZWZhdWx0Q29uZHVpdEtleTogY29uc3RhbnRzXzEuT1BFTlNFQV9DT05EVUlUX0tFWSB9LFxuICAgICAgICB9KTtcbiAgICAgICAgLy8gRW1pdCBldmVudHNcbiAgICAgICAgdGhpcy5fZW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgLy8gTG9nZ2VyOiBkZWZhdWx0IHRvIG5vIGxvZ2dpbmcgaWYgZm4gbm90IHByb3ZpZGVkXG4gICAgICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyID8/ICgoYXJnKSA9PiBhcmcpO1xuICAgICAgICAvLyBDYWNoZSBkZWNpbWFscyBmb3IgV0VUSCBwYXltZW50IHRva2VuIHRvIHNraXAgbmV0d29yayByZXF1ZXN0XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB3ZXRoQWRkcmVzcyA9ICgwLCB1dGlsc18yLmdldFdFVEhBZGRyZXNzKSh0aGlzLmNoYWluKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgdGhpcy5fY2FjaGVkUGF5bWVudFRva2VuRGVjaW1hbHNbd2V0aEFkZHJlc3NdID0gMTg7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoXCJVbmtub3duIFdFVEggYWRkcmVzc1wiKSkge1xuICAgICAgICAgICAgICAgIC8vIElnbm9yZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkIGEgbGlzdGVuZXIgZm9yIGV2ZW50cyBlbWl0dGVkIGJ5IHRoZSBTREsuXG4gICAgICogQHBhcmFtIGV2ZW50IFRoZSB7QGxpbmsgRXZlbnRUeXBlfSB0byBsaXN0ZW4gdG8uXG4gICAgICogQHBhcmFtIGxpc3RlbmVyIEEgY2FsbGJhY2sgdGhhdCB3aWxsIGFjY2VwdCBhbiBvYmplY3Qgd2l0aCB7QGxpbmsgRXZlbnREYXRhfVxcXG4gICAgICogQHBhcmFtIG9uY2UgV2hldGhlciB0aGUgbGlzdGVuZXIgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIG9uY2UsIG9yIGNvbnRpbnVlIGxpc3RlbmluZyB1bnRpbCByZW1vdmVkLlxuICAgICAqL1xuICAgIGFkZExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgb25jZSA9IGZhbHNlKSB7XG4gICAgICAgIGlmIChvbmNlKSB7XG4gICAgICAgICAgICB0aGlzLl9lbWl0dGVyLm9uY2UoZXZlbnQsIGxpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2VtaXR0ZXIuYWRkTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYW4gZXZlbnQgbGlzdGVuZXIgYnkgY2FsbGluZyBgLnJlbW92ZUxpc3RlbmVyKClgIG9uIGFuIGV2ZW50IGFuZCBsaXN0ZW5lci5cbiAgICAgKiBAcGFyYW0gZXZlbnQgVGhlIHtAbGluayBFdmVudFR5cGV9IHRvIHJlbW92ZSBhIGxpc3RlbmVyIGZvclxcXG4gICAgICogQHBhcmFtIGxpc3RlbmVyIFRoZSBsaXN0ZW5lciB0byByZW1vdmVcbiAgICAgKi9cbiAgICByZW1vdmVMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fZW1pdHRlci5yZW1vdmVMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYWxsIGV2ZW50IGxpc3RlbmVycy4gVGhpcyBzaG91bGQgYmUgY2FsbGVkIHdoZW4geW91J3JlIHVubW91bnRpbmdcbiAgICAgKiBhIGNvbXBvbmVudCB0aGF0IGxpc3RlbnMgdG8gZXZlbnRzIHRvIG1ha2UgVUkgdXBkYXRlcy5cbiAgICAgKiBAcGFyYW0gZXZlbnQgT3B0aW9uYWwgRXZlbnRUeXBlIHRvIHJlbW92ZSBsaXN0ZW5lcnMgZm9yXG4gICAgICovXG4gICAgcmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuX2VtaXR0ZXIucmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV3JhcCBFVEggaW50byBXRVRILlxuICAgICAqIFctRVRIIGlzIG5lZWRlZCBmb3IgbWFraW5nIG9mZmVycy5cbiAgICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgICAqIEBwYXJhbSBvcHRpb25zLmFtb3VudEluRXRoIEFtb3VudCBvZiBldGhlciB0byB3cmFwXG4gICAgICogQHBhcmFtIG9wdGlvbnMuYWNjb3VudEFkZHJlc3MgQWRkcmVzcyBvZiB0aGUgdXNlcidzIHdhbGxldCBjb250YWluaW5nIHRoZSBldGhlclxuICAgICAqL1xuICAgIGFzeW5jIHdyYXBFdGgoeyBhbW91bnRJbkV0aCwgYWNjb3VudEFkZHJlc3MsIH0pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5fcmVxdWlyZUFjY291bnRJc0F2YWlsYWJsZShhY2NvdW50QWRkcmVzcyk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gKDAsIGV0aGVyc18xLnBhcnNlRXRoZXIpKGFtb3VudEluRXRoLnRvU3RyaW5nKCkpO1xuICAgICAgICB0aGlzLl9kaXNwYXRjaCh0eXBlc18yLkV2ZW50VHlwZS5XcmFwRXRoLCB7IGFjY291bnRBZGRyZXNzLCBhbW91bnQ6IHZhbHVlIH0pO1xuICAgICAgICBjb25zdCB3ZXRoQ29udHJhY3QgPSBuZXcgZXRoZXJzXzEuQ29udHJhY3QoKDAsIHV0aWxzXzIuZ2V0V0VUSEFkZHJlc3MpKHRoaXMuY2hhaW4pLCBbXCJmdW5jdGlvbiBkZXBvc2l0KCkgcGF5YWJsZVwiXSwgdGhpcy5fc2lnbmVyT3JQcm92aWRlcik7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB0cmFuc2FjdGlvbiA9IGF3YWl0IHdldGhDb250cmFjdC5kZXBvc2l0KHsgdmFsdWUgfSk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9jb25maXJtVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24uaGFzaCwgdHlwZXNfMi5FdmVudFR5cGUuV3JhcEV0aCwgXCJXcmFwcGluZyBFVEhcIik7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIHRoaXMuX2Rpc3BhdGNoKHR5cGVzXzIuRXZlbnRUeXBlLlRyYW5zYWN0aW9uRGVuaWVkLCB7IGVycm9yLCBhY2NvdW50QWRkcmVzcyB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBVbndyYXAgV0VUSCBpbnRvIEVUSC5cbiAgICAgKiBFbWl0cyB0aGUgYFVud3JhcFdldGhgIGV2ZW50IHdoZW4gdGhlIHRyYW5zYWN0aW9uIGlzIHByb21wdGVkLlxuICAgICAqIEBwYXJhbSBvcHRpb25zXG4gICAgICogQHBhcmFtIG9wdGlvbnMuYW1vdW50SW5FdGggSG93IG11Y2ggV0VUSCB0byB1bndyYXBcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5hY2NvdW50QWRkcmVzcyBBZGRyZXNzIG9mIHRoZSB1c2VyJ3Mgd2FsbGV0IGNvbnRhaW5pbmcgdGhlIFdFVEhcbiAgICAgKi9cbiAgICBhc3luYyB1bndyYXBXZXRoKHsgYW1vdW50SW5FdGgsIGFjY291bnRBZGRyZXNzLCB9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMuX3JlcXVpcmVBY2NvdW50SXNBdmFpbGFibGUoYWNjb3VudEFkZHJlc3MpO1xuICAgICAgICBjb25zdCBhbW91bnQgPSAoMCwgZXRoZXJzXzEucGFyc2VFdGhlcikoYW1vdW50SW5FdGgudG9TdHJpbmcoKSk7XG4gICAgICAgIHRoaXMuX2Rpc3BhdGNoKHR5cGVzXzIuRXZlbnRUeXBlLlVud3JhcFdldGgsIHsgYWNjb3VudEFkZHJlc3MsIGFtb3VudCB9KTtcbiAgICAgICAgY29uc3Qgd2V0aENvbnRyYWN0ID0gbmV3IGV0aGVyc18xLkNvbnRyYWN0KCgwLCB1dGlsc18yLmdldFdFVEhBZGRyZXNzKSh0aGlzLmNoYWluKSwgW1wiZnVuY3Rpb24gd2l0aGRyYXcodWludCB3YWQpIHB1YmxpY1wiXSwgdGhpcy5fc2lnbmVyT3JQcm92aWRlcik7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB0cmFuc2FjdGlvbiA9IGF3YWl0IHdldGhDb250cmFjdC53aXRoZHJhdyhhbW91bnQpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fY29uZmlybVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uLmhhc2gsIHR5cGVzXzIuRXZlbnRUeXBlLlVud3JhcFdldGgsIFwiVW53cmFwcGluZyBXLUVUSFwiKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgdGhpcy5fZGlzcGF0Y2godHlwZXNfMi5FdmVudFR5cGUuVHJhbnNhY3Rpb25EZW5pZWQsIHsgZXJyb3IsIGFjY291bnRBZGRyZXNzIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGdldEZlZXMoeyBjb2xsZWN0aW9uLCBzZWxsZXIsIHBheW1lbnRUb2tlbkFkZHJlc3MsIHN0YXJ0QW1vdW50LCBlbmRBbW91bnQsIGV4Y2x1ZGVPcHRpb25hbENyZWF0b3JGZWVzLCB9KSB7XG4gICAgICAgIGxldCBjb2xsZWN0aW9uRmVlcyA9IGNvbGxlY3Rpb24uZmVlcztcbiAgICAgICAgaWYgKGV4Y2x1ZGVPcHRpb25hbENyZWF0b3JGZWVzKSB7XG4gICAgICAgICAgICBjb2xsZWN0aW9uRmVlcyA9IGNvbGxlY3Rpb25GZWVzLmZpbHRlcigoZmVlKSA9PiBmZWUucmVxdWlyZWQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbGxlY3Rpb25GZWVzQmFzaXNQb2ludHMgPSAoMCwgdXRpbHNfMi50b3RhbEJhc2lzUG9pbnRzRm9yRmVlcykoY29sbGVjdGlvbkZlZXMpO1xuICAgICAgICBjb25zdCBzZWxsZXJCYXNpc1BvaW50cyA9IGNvbnN0YW50c18yLklOVkVSU0VfQkFTSVNfUE9JTlQgLSBjb2xsZWN0aW9uRmVlc0Jhc2lzUG9pbnRzO1xuICAgICAgICBjb25zdCBnZXRDb25zaWRlcmF0aW9uSXRlbSA9IChiYXNpc1BvaW50cywgcmVjaXBpZW50KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRva2VuOiBwYXltZW50VG9rZW5BZGRyZXNzLFxuICAgICAgICAgICAgICAgIGFtb3VudDogdGhpcy5nZXRBbW91bnRXaXRoQmFzaXNQb2ludHNBcHBsaWVkKHN0YXJ0QW1vdW50LCBiYXNpc1BvaW50cyksXG4gICAgICAgICAgICAgICAgZW5kQW1vdW50OiB0aGlzLmdldEFtb3VudFdpdGhCYXNpc1BvaW50c0FwcGxpZWQoZW5kQW1vdW50ID8/IHN0YXJ0QW1vdW50LCBiYXNpc1BvaW50cyksXG4gICAgICAgICAgICAgICAgcmVjaXBpZW50LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgY29uc2lkZXJhdGlvbkl0ZW1zID0gW107XG4gICAgICAgIGlmIChzZWxsZXIpIHtcbiAgICAgICAgICAgIGNvbnNpZGVyYXRpb25JdGVtcy5wdXNoKGdldENvbnNpZGVyYXRpb25JdGVtKHNlbGxlckJhc2lzUG9pbnRzLCBzZWxsZXIpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29sbGVjdGlvbkZlZXNCYXNpc1BvaW50cyA+IDApIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZmVlIG9mIGNvbGxlY3Rpb25GZWVzKSB7XG4gICAgICAgICAgICAgICAgY29uc2lkZXJhdGlvbkl0ZW1zLnB1c2goZ2V0Q29uc2lkZXJhdGlvbkl0ZW0oKDAsIHV0aWxzXzIuYmFzaXNQb2ludHNGb3JGZWUpKGZlZSksIGZlZS5yZWNpcGllbnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29uc2lkZXJhdGlvbkl0ZW1zO1xuICAgIH1cbiAgICBnZXRORlRJdGVtcyhuZnRzLCBxdWFudGl0aWVzID0gW10pIHtcbiAgICAgICAgcmV0dXJuIG5mdHMubWFwKChuZnQsIGluZGV4KSA9PiAoe1xuICAgICAgICAgICAgaXRlbVR5cGU6ICgwLCB1dGlsc18yLmdldEFzc2V0SXRlbVR5cGUpKG5mdC50b2tlbl9zdGFuZGFyZC50b1VwcGVyQ2FzZSgpKSxcbiAgICAgICAgICAgIHRva2VuOiAoMCwgdXRpbHNfMi5nZXRBZGRyZXNzQWZ0ZXJSZW1hcHBpbmdTaGFyZWRTdG9yZWZyb250QWRkcmVzc1RvTGF6eU1pbnRBZGFwdGVyQWRkcmVzcykobmZ0LmNvbnRyYWN0KSxcbiAgICAgICAgICAgIGlkZW50aWZpZXI6IG5mdC5pZGVudGlmaWVyID8/IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGFtb3VudDogcXVhbnRpdGllc1tpbmRleF0udG9TdHJpbmcoKSA/PyBcIjFcIixcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW5kIHN1Ym1pdCBhbiBvZmZlciBvbiBhbiBhc3NldC5cbiAgICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgICAqIEBwYXJhbSBvcHRpb25zLmFzc2V0IFRoZSBhc3NldCB0byB0cmFkZS4gdG9rZW5BZGRyZXNzIGFuZCB0b2tlbklkIG11c3QgYmUgZGVmaW5lZC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5hY2NvdW50QWRkcmVzcyBBZGRyZXNzIG9mIHRoZSB3YWxsZXQgbWFraW5nIHRoZSBvZmZlci5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5zdGFydEFtb3VudCBWYWx1ZSBvZiB0aGUgb2ZmZXIgaW4gdW5pdHMsIG5vdCBiYXNlIHVuaXRzIGUuZy4gbm90IHdlaSwgb2YgdGhlIHBheW1lbnQgdG9rZW4gKG9yIFdFVEggaWYgbm8gcGF5bWVudCB0b2tlbiBhZGRyZXNzIHNwZWNpZmllZClcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5xdWFudGl0eSBUaGUgbnVtYmVyIG9mIGFzc2V0cyB0byBiaWQgZm9yIChpZiBmdW5naWJsZSBvciBzZW1pLWZ1bmdpYmxlKS4gRGVmYXVsdHMgdG8gMS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5kb21haW4gQW4gb3B0aW9uYWwgZG9tYWluIHRvIGJlIGhhc2hlZCBhbmQgaW5jbHVkZWQgaW4gdGhlIGZpcnN0IGZvdXIgYnl0ZXMgb2YgdGhlIHJhbmRvbSBzYWx0LlxuICAgICAqIEBwYXJhbSBvcHRpb25zLnNhbHQgQXJiaXRyYXJ5IHNhbHQuIElmIG5vdCBwYXNzZWQgaW4sIGEgcmFuZG9tIHNhbHQgd2lsbCBiZSBnZW5lcmF0ZWQgd2l0aCB0aGUgZmlyc3QgZm91ciBieXRlcyBiZWluZyB0aGUgZG9tYWluIGhhc2ggb3IgZW1wdHkuXG4gICAgICogQHBhcmFtIG9wdGlvbnMuZXhwaXJhdGlvblRpbWUgRXhwaXJhdGlvbiB0aW1lIGZvciB0aGUgb3JkZXIsIGluIFVUQyBzZWNvbmRzXG4gICAgICogQHBhcmFtIG9wdGlvbnMucGF5bWVudFRva2VuQWRkcmVzcyBFUkMyMCBhZGRyZXNzIGZvciB0aGUgcGF5bWVudCB0b2tlbiBpbiB0aGUgb3JkZXIuIElmIHVuc3BlY2lmaWVkLCBkZWZhdWx0cyB0byBXRVRIXG4gICAgICogQHBhcmFtIG9wdGlvbnMuZXhjbHVkZU9wdGlvbmFsQ3JlYXRvckZlZXMgSWYgdHJ1ZSwgb3B0aW9uYWwgY3JlYXRvciBmZWVzIHdpbGwgYmUgZXhjbHVkZWQgZnJvbSB0aGUgb2ZmZXIuIERlZmF1bHQ6IHRydWUuXG4gICAgICogQHBhcmFtIG9wdGlvbnMuem9uZSBUaGUgem9uZSB0byB1c2UgZm9yIHRoZSBvcmRlci4gRm9yIG9yZGVyIHByb3RlY3Rpb24sIHBhc3MgU0lHTkVEX1pPTkUuIElmIHVuc3BlY2lmaWVkLCBkZWZhdWx0cyB0byBubyB6b25lLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIHtAbGluayBPcmRlclYyfSB0aGF0IHdhcyBjcmVhdGVkLlxuICAgICAqXG4gICAgICogQHRocm93cyBFcnJvciBpZiB0aGUgYXNzZXQgZG9lcyBub3QgY29udGFpbiBhIHRva2VuIGlkLlxuICAgICAqIEB0aHJvd3MgRXJyb3IgaWYgdGhlIGFjY291bnRBZGRyZXNzIGlzIG5vdCBhdmFpbGFibGUgdGhyb3VnaCB3YWxsZXQgb3IgcHJvdmlkZXIuXG4gICAgICogQHRocm93cyBFcnJvciBpZiB0aGUgc3RhcnRBbW91bnQgaXMgbm90IGdyZWF0ZXIgdGhhbiAwLlxuICAgICAqIEB0aHJvd3MgRXJyb3IgaWYgcGF5bWVudFRva2VuQWRkcmVzcyBpcyBub3QgV0VUSCBvbiBhbnl0aGluZyBvdGhlciB0aGFuIEV0aGVyZXVtIG1haW5uZXQuXG4gICAgICovXG4gICAgYXN5bmMgY3JlYXRlT2ZmZXIoeyBhc3NldCwgYWNjb3VudEFkZHJlc3MsIHN0YXJ0QW1vdW50LCBxdWFudGl0eSA9IDEsIGRvbWFpbiwgc2FsdCwgZXhwaXJhdGlvblRpbWUsIHBheW1lbnRUb2tlbkFkZHJlc3MgPSAoMCwgdXRpbHNfMi5nZXRXRVRIQWRkcmVzcykodGhpcy5jaGFpbiksIGV4Y2x1ZGVPcHRpb25hbENyZWF0b3JGZWVzID0gdHJ1ZSwgem9uZSA9IGV0aGVyc18xLlplcm9BZGRyZXNzLCB9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMuX3JlcXVpcmVBY2NvdW50SXNBdmFpbGFibGUoYWNjb3VudEFkZHJlc3MpO1xuICAgICAgICBjb25zdCB7IG5mdCB9ID0gYXdhaXQgdGhpcy5hcGkuZ2V0TkZUKGFzc2V0LnRva2VuQWRkcmVzcywgYXNzZXQudG9rZW5JZCk7XG4gICAgICAgIGNvbnN0IGNvbnNpZGVyYXRpb25Bc3NldEl0ZW1zID0gdGhpcy5nZXRORlRJdGVtcyhbbmZ0XSwgW0JpZ0ludChxdWFudGl0eSA/PyAxKV0pO1xuICAgICAgICBjb25zdCB7IGJhc2VQcmljZSB9ID0gYXdhaXQgdGhpcy5fZ2V0UHJpY2VQYXJhbWV0ZXJzKHR5cGVzXzIuT3JkZXJTaWRlLk9GRkVSLCBwYXltZW50VG9rZW5BZGRyZXNzLCBleHBpcmF0aW9uVGltZSA/PyAoMCwgdXRpbHNfMi5nZXRNYXhPcmRlckV4cGlyYXRpb25UaW1lc3RhbXApKCksIHN0YXJ0QW1vdW50KTtcbiAgICAgICAgY29uc3QgY29sbGVjdGlvbiA9IGF3YWl0IHRoaXMuYXBpLmdldENvbGxlY3Rpb24obmZ0LmNvbGxlY3Rpb24pO1xuICAgICAgICBjb25zdCBjb25zaWRlcmF0aW9uRmVlSXRlbXMgPSBhd2FpdCB0aGlzLmdldEZlZXMoe1xuICAgICAgICAgICAgY29sbGVjdGlvbixcbiAgICAgICAgICAgIHBheW1lbnRUb2tlbkFkZHJlc3MsXG4gICAgICAgICAgICBzdGFydEFtb3VudDogYmFzZVByaWNlLFxuICAgICAgICAgICAgZXhjbHVkZU9wdGlvbmFsQ3JlYXRvckZlZXMsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoY29sbGVjdGlvbi5yZXF1aXJlZFpvbmUpIHtcbiAgICAgICAgICAgIHpvbmUgPSBjb2xsZWN0aW9uLnJlcXVpcmVkWm9uZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IGV4ZWN1dGVBbGxBY3Rpb25zIH0gPSBhd2FpdCB0aGlzLnNlYXBvcnRfdjFfNi5jcmVhdGVPcmRlcih7XG4gICAgICAgICAgICBvZmZlcjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdG9rZW46IHBheW1lbnRUb2tlbkFkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgIGFtb3VudDogYmFzZVByaWNlLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBjb25zaWRlcmF0aW9uOiBbLi4uY29uc2lkZXJhdGlvbkFzc2V0SXRlbXMsIC4uLmNvbnNpZGVyYXRpb25GZWVJdGVtc10sXG4gICAgICAgICAgICBlbmRUaW1lOiBleHBpcmF0aW9uVGltZSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBCaWdJbnQoZXhwaXJhdGlvblRpbWUpLnRvU3RyaW5nKClcbiAgICAgICAgICAgICAgICA6ICgwLCB1dGlsc18yLmdldE1heE9yZGVyRXhwaXJhdGlvblRpbWVzdGFtcCkoKS50b1N0cmluZygpLFxuICAgICAgICAgICAgem9uZSxcbiAgICAgICAgICAgIGRvbWFpbixcbiAgICAgICAgICAgIHNhbHQ6IEJpZ0ludChzYWx0ID8/IDApLnRvU3RyaW5nKCksXG4gICAgICAgICAgICByZXN0cmljdGVkQnlab25lOiB6b25lICE9PSBldGhlcnNfMS5aZXJvQWRkcmVzcyxcbiAgICAgICAgICAgIGFsbG93UGFydGlhbEZpbGxzOiB0cnVlLFxuICAgICAgICB9LCBhY2NvdW50QWRkcmVzcyk7XG4gICAgICAgIGNvbnN0IG9yZGVyID0gYXdhaXQgZXhlY3V0ZUFsbEFjdGlvbnMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBpLnBvc3RPcmRlcihvcmRlciwge1xuICAgICAgICAgICAgcHJvdG9jb2w6IFwic2VhcG9ydFwiLFxuICAgICAgICAgICAgcHJvdG9jb2xBZGRyZXNzOiB1dGlsc18xLkRFRkFVTFRfU0VBUE9SVF9DT05UUkFDVF9BRERSRVNTLFxuICAgICAgICAgICAgc2lkZTogdHlwZXNfMi5PcmRlclNpZGUuT0ZGRVIsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW5kIHN1Ym1pdCBhIGxpc3RpbmcgZm9yIGFuIGFzc2V0LlxuICAgICAqIEBwYXJhbSBvcHRpb25zXG4gICAgICogQHBhcmFtIG9wdGlvbnMuYXNzZXQgVGhlIGFzc2V0IHRvIHRyYWRlLiB0b2tlbkFkZHJlc3MgYW5kIHRva2VuSWQgbXVzdCBiZSBkZWZpbmVkLlxuICAgICAqIEBwYXJhbSBvcHRpb25zLmFjY291bnRBZGRyZXNzICBBZGRyZXNzIG9mIHRoZSB3YWxsZXQgbWFraW5nIHRoZSBsaXN0aW5nXG4gICAgICogQHBhcmFtIG9wdGlvbnMuc3RhcnRBbW91bnQgVmFsdWUgb2YgdGhlIGxpc3RpbmcgYXQgdGhlIHN0YXJ0IG9mIHRoZSBhdWN0aW9uIGluIHVuaXRzLCBub3QgYmFzZSB1bml0cyBlLmcuIG5vdCB3ZWksIG9mIHRoZSBwYXltZW50IHRva2VuIChvciBXRVRIIGlmIG5vIHBheW1lbnQgdG9rZW4gYWRkcmVzcyBzcGVjaWZpZWQpXG4gICAgICogQHBhcmFtIG9wdGlvbnMuZW5kQW1vdW50IFZhbHVlIG9mIHRoZSBsaXN0aW5nIGF0IHRoZSBlbmQgb2YgdGhlIGF1Y3Rpb24uIElmIHNwZWNpZmllZCwgcHJpY2Ugd2lsbCBjaGFuZ2UgbGluZWFybHkgYmV0d2VlbiBzdGFydEFtb3VudCBhbmQgZW5kQW1vdW50IGFzIHRpbWUgcHJvZ3Jlc3Nlcy5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5xdWFudGl0eSBUaGUgbnVtYmVyIG9mIGFzc2V0cyB0byBsaXN0IChpZiBmdW5naWJsZSBvciBzZW1pLWZ1bmdpYmxlKS4gRGVmYXVsdHMgdG8gMS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5kb21haW4gQW4gb3B0aW9uYWwgZG9tYWluIHRvIGJlIGhhc2hlZCBhbmQgaW5jbHVkZWQgaW4gdGhlIGZpcnN0IGZvdXIgYnl0ZXMgb2YgdGhlIHJhbmRvbSBzYWx0LiBUaGlzIGNhbiBiZSB1c2VkIGZvciBvbi1jaGFpbiBvcmRlciBhdHRyaWJ1dGlvbiB0byBhc3Npc3Qgd2l0aCBhbmFseXRpY3MuXG4gICAgICogQHBhcmFtIG9wdGlvbnMuc2FsdCBBcmJpdHJhcnkgc2FsdC4gSWYgbm90IHBhc3NlZCBpbiwgYSByYW5kb20gc2FsdCB3aWxsIGJlIGdlbmVyYXRlZCB3aXRoIHRoZSBmaXJzdCBmb3VyIGJ5dGVzIGJlaW5nIHRoZSBkb21haW4gaGFzaCBvciBlbXB0eS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5saXN0aW5nVGltZSBPcHRpb25hbCB0aW1lIHdoZW4gdGhlIG9yZGVyIHdpbGwgYmVjb21lIGZ1bGZpbGxhYmxlLCBpbiBVVEMgc2Vjb25kcy4gVW5kZWZpbmVkIG1lYW5zIGl0IHdpbGwgc3RhcnQgbm93LlxuICAgICAqIEBwYXJhbSBvcHRpb25zLmV4cGlyYXRpb25UaW1lIEV4cGlyYXRpb24gdGltZSBmb3IgdGhlIG9yZGVyLCBpbiBVVEMgc2Vjb25kcy5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5wYXltZW50VG9rZW5BZGRyZXNzIEVSQzIwIGFkZHJlc3MgZm9yIHRoZSBwYXltZW50IHRva2VuIGluIHRoZSBvcmRlci4gSWYgdW5zcGVjaWZpZWQsIGRlZmF1bHRzIHRvIEVUSFxuICAgICAqIEBwYXJhbSBvcHRpb25zLmJ1eWVyQWRkcmVzcyBPcHRpb25hbCBhZGRyZXNzIHRoYXQncyBhbGxvd2VkIHRvIHB1cmNoYXNlIHRoaXMgaXRlbS4gSWYgc3BlY2lmaWVkLCBubyBvdGhlciBhZGRyZXNzIHdpbGwgYmUgYWJsZSB0byB0YWtlIHRoZSBvcmRlciwgdW5sZXNzIGl0cyB2YWx1ZSBpcyB0aGUgbnVsbCBhZGRyZXNzLlxuICAgICAqIEBwYXJhbSBvcHRpb25zLmVuZ2xpc2hBdWN0aW9uIElmIHRydWUsIHRoZSBvcmRlciB3aWxsIGJlIGxpc3RlZCBhcyBhbiBFbmdsaXNoIGF1Y3Rpb24uXG4gICAgICogQHBhcmFtIG9wdGlvbnMuZXhjbHVkZU9wdGlvbmFsQ3JlYXRvckZlZXMgSWYgdHJ1ZSwgb3B0aW9uYWwgY3JlYXRvciBmZWVzIHdpbGwgYmUgZXhjbHVkZWQgZnJvbSB0aGUgbGlzdGluZy4gRGVmYXVsdDogZmFsc2UuXG4gICAgICogQHBhcmFtIG9wdGlvbnMuem9uZSBUaGUgem9uZSB0byB1c2UgZm9yIHRoZSBvcmRlci4gIEZvciBvcmRlciBwcm90ZWN0aW9uLCBwYXNzIFNJR05FRF9aT05FLiBJZiB1bnNwZWNpZmllZCwgZGVmYXVsdHMgdG8gbm8gem9uZS5cbiAgICAgKiBAcmV0dXJucyBUaGUge0BsaW5rIE9yZGVyVjJ9IHRoYXQgd2FzIGNyZWF0ZWQuXG4gICAgICpcbiAgICAgKiBAdGhyb3dzIEVycm9yIGlmIHRoZSBhc3NldCBkb2VzIG5vdCBjb250YWluIGEgdG9rZW4gaWQuXG4gICAgICogQHRocm93cyBFcnJvciBpZiB0aGUgYWNjb3VudEFkZHJlc3MgaXMgbm90IGF2YWlsYWJsZSB0aHJvdWdoIHdhbGxldCBvciBwcm92aWRlci5cbiAgICAgKiBAdGhyb3dzIEVycm9yIGlmIHRoZSBzdGFydEFtb3VudCBpcyBub3QgZ3JlYXRlciB0aGFuIDAuXG4gICAgICogQHRocm93cyBFcnJvciBpZiBwYXltZW50VG9rZW5BZGRyZXNzIGlzIG5vdCBXRVRIIG9uIGFueXRoaW5nIG90aGVyIHRoYW4gRXRoZXJldW0gbWFpbm5ldC5cbiAgICAgKi9cbiAgICBhc3luYyBjcmVhdGVMaXN0aW5nKHsgYXNzZXQsIGFjY291bnRBZGRyZXNzLCBzdGFydEFtb3VudCwgZW5kQW1vdW50LCBxdWFudGl0eSA9IDEsIGRvbWFpbiwgc2FsdCwgbGlzdGluZ1RpbWUsIGV4cGlyYXRpb25UaW1lLCBwYXltZW50VG9rZW5BZGRyZXNzID0gZXRoZXJzXzEuZXRoZXJzLlplcm9BZGRyZXNzLCBidXllckFkZHJlc3MsIGVuZ2xpc2hBdWN0aW9uLCBleGNsdWRlT3B0aW9uYWxDcmVhdG9yRmVlcyA9IGZhbHNlLCB6b25lID0gZXRoZXJzXzEuWmVyb0FkZHJlc3MsIH0pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5fcmVxdWlyZUFjY291bnRJc0F2YWlsYWJsZShhY2NvdW50QWRkcmVzcyk7XG4gICAgICAgIGNvbnN0IHsgbmZ0IH0gPSBhd2FpdCB0aGlzLmFwaS5nZXRORlQoYXNzZXQudG9rZW5BZGRyZXNzLCBhc3NldC50b2tlbklkKTtcbiAgICAgICAgY29uc3Qgb2ZmZXJBc3NldEl0ZW1zID0gdGhpcy5nZXRORlRJdGVtcyhbbmZ0XSwgW0JpZ0ludChxdWFudGl0eSA/PyAxKV0pO1xuICAgICAgICBpZiAoZW5nbGlzaEF1Y3Rpb24gJiYgcGF5bWVudFRva2VuQWRkcmVzcyA9PSBldGhlcnNfMS5ldGhlcnMuWmVyb0FkZHJlc3MpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRW5nbGlzaCBhdWN0aW9ucyBtdXN0IHVzZSB3cmFwcGVkIEVUSCBvciBhbiBFUkMtMjAgdG9rZW4uYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBiYXNlUHJpY2UsIGVuZFByaWNlIH0gPSBhd2FpdCB0aGlzLl9nZXRQcmljZVBhcmFtZXRlcnModHlwZXNfMi5PcmRlclNpZGUuTElTVElORywgcGF5bWVudFRva2VuQWRkcmVzcywgZXhwaXJhdGlvblRpbWUgPz8gKDAsIHV0aWxzXzIuZ2V0TWF4T3JkZXJFeHBpcmF0aW9uVGltZXN0YW1wKSgpLCBzdGFydEFtb3VudCwgZW5kQW1vdW50ID8/IHVuZGVmaW5lZCk7XG4gICAgICAgIGNvbnN0IGNvbGxlY3Rpb24gPSBhd2FpdCB0aGlzLmFwaS5nZXRDb2xsZWN0aW9uKG5mdC5jb2xsZWN0aW9uKTtcbiAgICAgICAgY29uc3QgY29uc2lkZXJhdGlvbkZlZUl0ZW1zID0gYXdhaXQgdGhpcy5nZXRGZWVzKHtcbiAgICAgICAgICAgIGNvbGxlY3Rpb24sXG4gICAgICAgICAgICBzZWxsZXI6IGFjY291bnRBZGRyZXNzLFxuICAgICAgICAgICAgcGF5bWVudFRva2VuQWRkcmVzcyxcbiAgICAgICAgICAgIHN0YXJ0QW1vdW50OiBiYXNlUHJpY2UsXG4gICAgICAgICAgICBlbmRBbW91bnQ6IGVuZFByaWNlLFxuICAgICAgICAgICAgZXhjbHVkZU9wdGlvbmFsQ3JlYXRvckZlZXMsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoYnV5ZXJBZGRyZXNzKSB7XG4gICAgICAgICAgICBjb25zaWRlcmF0aW9uRmVlSXRlbXMucHVzaCguLi4oMCwgcHJpdmF0ZUxpc3RpbmdzXzEuZ2V0UHJpdmF0ZUxpc3RpbmdDb25zaWRlcmF0aW9ucykob2ZmZXJBc3NldEl0ZW1zLCBidXllckFkZHJlc3MpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZW5nbGlzaEF1Y3Rpb24pIHtcbiAgICAgICAgICAgIHpvbmUgPSAoMCwgdXRpbHNfMi5pc1Rlc3RDaGFpbikodGhpcy5jaGFpbilcbiAgICAgICAgICAgICAgICA/IGNvbnN0YW50c18yLkVOR0xJU0hfQVVDVElPTl9aT05FX1RFU1RORVRTXG4gICAgICAgICAgICAgICAgOiBjb25zdGFudHNfMi5FTkdMSVNIX0FVQ1RJT05fWk9ORV9NQUlOTkVUUztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjb2xsZWN0aW9uLnJlcXVpcmVkWm9uZSkge1xuICAgICAgICAgICAgem9uZSA9IGNvbGxlY3Rpb24ucmVxdWlyZWRab25lO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgZXhlY3V0ZUFsbEFjdGlvbnMgfSA9IGF3YWl0IHRoaXMuc2VhcG9ydF92MV82LmNyZWF0ZU9yZGVyKHtcbiAgICAgICAgICAgIG9mZmVyOiBvZmZlckFzc2V0SXRlbXMsXG4gICAgICAgICAgICBjb25zaWRlcmF0aW9uOiBjb25zaWRlcmF0aW9uRmVlSXRlbXMsXG4gICAgICAgICAgICBzdGFydFRpbWU6IGxpc3RpbmdUaW1lPy50b1N0cmluZygpLFxuICAgICAgICAgICAgZW5kVGltZTogZXhwaXJhdGlvblRpbWU/LnRvU3RyaW5nKCkgPz9cbiAgICAgICAgICAgICAgICAoMCwgdXRpbHNfMi5nZXRNYXhPcmRlckV4cGlyYXRpb25UaW1lc3RhbXApKCkudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIHpvbmUsXG4gICAgICAgICAgICBkb21haW4sXG4gICAgICAgICAgICBzYWx0OiBCaWdJbnQoc2FsdCA/PyAwKS50b1N0cmluZygpLFxuICAgICAgICAgICAgcmVzdHJpY3RlZEJ5Wm9uZTogem9uZSAhPT0gZXRoZXJzXzEuWmVyb0FkZHJlc3MsXG4gICAgICAgICAgICBhbGxvd1BhcnRpYWxGaWxsczogZW5nbGlzaEF1Y3Rpb24gPyBmYWxzZSA6IHRydWUsXG4gICAgICAgIH0sIGFjY291bnRBZGRyZXNzKTtcbiAgICAgICAgY29uc3Qgb3JkZXIgPSBhd2FpdCBleGVjdXRlQWxsQWN0aW9ucygpO1xuICAgICAgICByZXR1cm4gdGhpcy5hcGkucG9zdE9yZGVyKG9yZGVyLCB7XG4gICAgICAgICAgICBwcm90b2NvbDogXCJzZWFwb3J0XCIsXG4gICAgICAgICAgICBwcm90b2NvbEFkZHJlc3M6IHV0aWxzXzEuREVGQVVMVF9TRUFQT1JUX0NPTlRSQUNUX0FERFJFU1MsXG4gICAgICAgICAgICBzaWRlOiB0eXBlc18yLk9yZGVyU2lkZS5MSVNUSU5HLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFuZCBzdWJtaXQgYSBjb2xsZWN0aW9uIG9mZmVyLlxuICAgICAqIEBwYXJhbSBvcHRpb25zXG4gICAgICogQHBhcmFtIG9wdGlvbnMuY29sbGVjdGlvblNsdWcgSWRlbnRpZmllciBmb3IgdGhlIGNvbGxlY3Rpb24uXG4gICAgICogQHBhcmFtIG9wdGlvbnMuYWNjb3VudEFkZHJlc3MgQWRkcmVzcyBvZiB0aGUgd2FsbGV0IG1ha2luZyB0aGUgb2ZmZXIuXG4gICAgICogQHBhcmFtIG9wdGlvbnMuYW1vdW50IFZhbHVlIG9mIHRoZSBvZmZlciBpbiB1bml0cywgbm90IGJhc2UgdW5pdHMgZS5nLiBub3Qgd2VpLCBvZiB0aGUgcGF5bWVudCB0b2tlbiAob3IgV0VUSCBpZiBubyBwYXltZW50IHRva2VuIGFkZHJlc3Mgc3BlY2lmaWVkKS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5xdWFudGl0eSBUaGUgbnVtYmVyIG9mIGFzc2V0cyB0byBiaWQgZm9yIChpZiBmdW5naWJsZSBvciBzZW1pLWZ1bmdpYmxlKS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5kb21haW4gQW4gb3B0aW9uYWwgZG9tYWluIHRvIGJlIGhhc2hlZCBhbmQgaW5jbHVkZWQgaW4gdGhlIGZpcnN0IGZvdXIgYnl0ZXMgb2YgdGhlIHJhbmRvbSBzYWx0LiBUaGlzIGNhbiBiZSB1c2VkIGZvciBvbi1jaGFpbiBvcmRlciBhdHRyaWJ1dGlvbiB0byBhc3Npc3Qgd2l0aCBhbmFseXRpY3MuXG4gICAgICogQHBhcmFtIG9wdGlvbnMuc2FsdCBBcmJpdHJhcnkgc2FsdC4gSWYgbm90IHBhc3NlZCBpbiwgYSByYW5kb20gc2FsdCB3aWxsIGJlIGdlbmVyYXRlZCB3aXRoIHRoZSBmaXJzdCBmb3VyIGJ5dGVzIGJlaW5nIHRoZSBkb21haW4gaGFzaCBvciBlbXB0eS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5leHBpcmF0aW9uVGltZSBFeHBpcmF0aW9uIHRpbWUgZm9yIHRoZSBvcmRlciwgaW4gVVRDIHNlY29uZHMuXG4gICAgICogQHBhcmFtIG9wdGlvbnMucGF5bWVudFRva2VuQWRkcmVzcyBFUkMyMCBhZGRyZXNzIGZvciB0aGUgcGF5bWVudCB0b2tlbiBpbiB0aGUgb3JkZXIuIElmIHVuc3BlY2lmaWVkLCBkZWZhdWx0cyB0byBXRVRILlxuICAgICAqIEBwYXJhbSBvcHRpb25zLmV4Y2x1ZGVPcHRpb25hbENyZWF0b3JGZWVzIElmIHRydWUsIG9wdGlvbmFsIGNyZWF0b3IgZmVlcyB3aWxsIGJlIGV4Y2x1ZGVkIGZyb20gdGhlIG9mZmVyLiBEZWZhdWx0OiBmYWxzZS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5vZmZlclByb3RlY3Rpb25FbmFibGVkIEJ1aWxkIHRoZSBvZmZlciBvbiBPcGVuU2VhJ3Mgc2lnbmVkIHpvbmUgdG8gcHJvdmlkZSBvZmZlciBwcm90ZWN0aW9ucyBmcm9tIHJlY2VpdmluZyBhbiBpdGVtIHdoaWNoIGlzIGRpc2FibGVkIGZyb20gdHJhZGluZy5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy50cmFpdFR5cGUgSWYgZGVmaW5lZCwgdGhlIHRyYWl0IG5hbWUgdG8gY3JlYXRlIHRoZSBjb2xsZWN0aW9uIG9mZmVyIGZvci5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy50cmFpdFZhbHVlIElmIGRlZmluZWQsIHRoZSB0cmFpdCB2YWx1ZSB0byBjcmVhdGUgdGhlIGNvbGxlY3Rpb24gb2ZmZXIgZm9yLlxuICAgICAqIEByZXR1cm5zIFRoZSB7QGxpbmsgQ29sbGVjdGlvbk9mZmVyfSB0aGF0IHdhcyBjcmVhdGVkLlxuICAgICAqL1xuICAgIGFzeW5jIGNyZWF0ZUNvbGxlY3Rpb25PZmZlcih7IGNvbGxlY3Rpb25TbHVnLCBhY2NvdW50QWRkcmVzcywgYW1vdW50LCBxdWFudGl0eSwgZG9tYWluLCBzYWx0LCBleHBpcmF0aW9uVGltZSwgcGF5bWVudFRva2VuQWRkcmVzcyA9ICgwLCB1dGlsc18yLmdldFdFVEhBZGRyZXNzKSh0aGlzLmNoYWluKSwgZXhjbHVkZU9wdGlvbmFsQ3JlYXRvckZlZXMgPSBmYWxzZSwgb2ZmZXJQcm90ZWN0aW9uRW5hYmxlZCA9IHRydWUsIHRyYWl0VHlwZSwgdHJhaXRWYWx1ZSwgfSkge1xuICAgICAgICBhd2FpdCB0aGlzLl9yZXF1aXJlQWNjb3VudElzQXZhaWxhYmxlKGFjY291bnRBZGRyZXNzKTtcbiAgICAgICAgY29uc3QgY29sbGVjdGlvbiA9IGF3YWl0IHRoaXMuYXBpLmdldENvbGxlY3Rpb24oY29sbGVjdGlvblNsdWcpO1xuICAgICAgICBjb25zdCBidWlsZE9mZmVyUmVzdWx0ID0gYXdhaXQgdGhpcy5hcGkuYnVpbGRPZmZlcihhY2NvdW50QWRkcmVzcywgcXVhbnRpdHksIGNvbGxlY3Rpb25TbHVnLCBvZmZlclByb3RlY3Rpb25FbmFibGVkLCB0cmFpdFR5cGUsIHRyYWl0VmFsdWUpO1xuICAgICAgICBjb25zdCBpdGVtID0gYnVpbGRPZmZlclJlc3VsdC5wYXJ0aWFsUGFyYW1ldGVycy5jb25zaWRlcmF0aW9uWzBdO1xuICAgICAgICBjb25zdCBjb252ZXJ0ZWRDb25zaWRlcmF0aW9uSXRlbSA9IHtcbiAgICAgICAgICAgIGl0ZW1UeXBlOiBpdGVtLml0ZW1UeXBlLFxuICAgICAgICAgICAgdG9rZW46IGl0ZW0udG9rZW4sXG4gICAgICAgICAgICBpZGVudGlmaWVyOiBpdGVtLmlkZW50aWZpZXJPckNyaXRlcmlhLFxuICAgICAgICAgICAgYW1vdW50OiBpdGVtLnN0YXJ0QW1vdW50LFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCB7IGJhc2VQcmljZSB9ID0gYXdhaXQgdGhpcy5fZ2V0UHJpY2VQYXJhbWV0ZXJzKHR5cGVzXzIuT3JkZXJTaWRlLkxJU1RJTkcsIHBheW1lbnRUb2tlbkFkZHJlc3MsIGV4cGlyYXRpb25UaW1lID8/ICgwLCB1dGlsc18yLmdldE1heE9yZGVyRXhwaXJhdGlvblRpbWVzdGFtcCkoKSwgYW1vdW50KTtcbiAgICAgICAgY29uc3QgY29uc2lkZXJhdGlvbkZlZUl0ZW1zID0gYXdhaXQgdGhpcy5nZXRGZWVzKHtcbiAgICAgICAgICAgIGNvbGxlY3Rpb24sXG4gICAgICAgICAgICBwYXltZW50VG9rZW5BZGRyZXNzLFxuICAgICAgICAgICAgc3RhcnRBbW91bnQ6IGJhc2VQcmljZSxcbiAgICAgICAgICAgIGVuZEFtb3VudDogYmFzZVByaWNlLFxuICAgICAgICAgICAgZXhjbHVkZU9wdGlvbmFsQ3JlYXRvckZlZXMsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBjb25zaWRlcmF0aW9uSXRlbXMgPSBbXG4gICAgICAgICAgICBjb252ZXJ0ZWRDb25zaWRlcmF0aW9uSXRlbSxcbiAgICAgICAgICAgIC4uLmNvbnNpZGVyYXRpb25GZWVJdGVtcyxcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgICAgICAgIG9mZmVyZXI6IGFjY291bnRBZGRyZXNzLFxuICAgICAgICAgICAgb2ZmZXI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRva2VuOiBwYXltZW50VG9rZW5BZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICBhbW91bnQ6IGJhc2VQcmljZS50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgY29uc2lkZXJhdGlvbjogY29uc2lkZXJhdGlvbkl0ZW1zLFxuICAgICAgICAgICAgZW5kVGltZTogZXhwaXJhdGlvblRpbWU/LnRvU3RyaW5nKCkgPz9cbiAgICAgICAgICAgICAgICAoMCwgdXRpbHNfMi5nZXRNYXhPcmRlckV4cGlyYXRpb25UaW1lc3RhbXApKCkudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIHpvbmU6IGJ1aWxkT2ZmZXJSZXN1bHQucGFydGlhbFBhcmFtZXRlcnMuem9uZSxcbiAgICAgICAgICAgIGRvbWFpbixcbiAgICAgICAgICAgIHNhbHQ6IEJpZ0ludChzYWx0ID8/IDApLnRvU3RyaW5nKCksXG4gICAgICAgICAgICByZXN0cmljdGVkQnlab25lOiB0cnVlLFxuICAgICAgICAgICAgYWxsb3dQYXJ0aWFsRmlsbHM6IHRydWUsXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHsgZXhlY3V0ZUFsbEFjdGlvbnMgfSA9IGF3YWl0IHRoaXMuc2VhcG9ydF92MV82LmNyZWF0ZU9yZGVyKHBheWxvYWQsIGFjY291bnRBZGRyZXNzKTtcbiAgICAgICAgY29uc3Qgb3JkZXIgPSBhd2FpdCBleGVjdXRlQWxsQWN0aW9ucygpO1xuICAgICAgICByZXR1cm4gdGhpcy5hcGkucG9zdENvbGxlY3Rpb25PZmZlcihvcmRlciwgY29sbGVjdGlvblNsdWcsIHRyYWl0VHlwZSwgdHJhaXRWYWx1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZ1bGZpbGwgYSBwcml2YXRlIG9yZGVyIGZvciBhIGRlc2lnbmF0ZWQgYWRkcmVzcy5cbiAgICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgICAqIEBwYXJhbSBvcHRpb25zLm9yZGVyIFRoZSBvcmRlciB0byBmdWxmaWxsXG4gICAgICogQHBhcmFtIG9wdGlvbnMuYWNjb3VudEFkZHJlc3MgQWRkcmVzcyBvZiB0aGUgd2FsbGV0IHRha2luZyB0aGUgb3JkZXIuXG4gICAgICogQHBhcmFtIG9wdGlvbnMuZG9tYWluIEFuIG9wdGlvbmFsIGRvbWFpbiB0byBiZSBoYXNoZWQgYW5kIGluY2x1ZGVkIGF0IHRoZSBlbmQgb2YgZnVsZmlsbG1lbnQgY2FsbGRhdGEuXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgIFRoaXMgY2FuIGJlIHVzZWQgZm9yIG9uLWNoYWluIG9yZGVyIGF0dHJpYnV0aW9uIHRvIGFzc2lzdCB3aXRoIGFuYWx5dGljcy5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5vdmVycmlkZXMgVHJhbnNhY3Rpb24gb3ZlcnJpZGVzLCBpZ25vcmVkIGlmIG5vdCBzZXQuXG4gICAgICogQHJldHVybnMgVHJhbnNhY3Rpb24gaGFzaCBvZiB0aGUgb3JkZXIuXG4gICAgICovXG4gICAgYXN5bmMgZnVsZmlsbFByaXZhdGVPcmRlcih7IG9yZGVyLCBhY2NvdW50QWRkcmVzcywgZG9tYWluLCBvdmVycmlkZXMsIH0pIHtcbiAgICAgICAgaWYgKCFvcmRlci50YWtlcj8uYWRkcmVzcykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3JkZXIgaXMgbm90IGEgcHJpdmF0ZSBsaXN0aW5nIC0gbXVzdCBoYXZlIGEgdGFrZXIgYWRkcmVzc1wiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb3VudGVyT3JkZXIgPSAoMCwgcHJpdmF0ZUxpc3RpbmdzXzEuY29uc3RydWN0UHJpdmF0ZUxpc3RpbmdDb3VudGVyT3JkZXIpKG9yZGVyLnByb3RvY29sRGF0YSwgb3JkZXIudGFrZXIuYWRkcmVzcyk7XG4gICAgICAgIGNvbnN0IGZ1bGZpbGxtZW50cyA9ICgwLCBwcml2YXRlTGlzdGluZ3NfMS5nZXRQcml2YXRlTGlzdGluZ0Z1bGZpbGxtZW50cykob3JkZXIucHJvdG9jb2xEYXRhKTtcbiAgICAgICAgY29uc3Qgc2VhcG9ydCA9IHRoaXMuZ2V0U2VhcG9ydChvcmRlci5wcm90b2NvbEFkZHJlc3MpO1xuICAgICAgICBjb25zdCB0cmFuc2FjdGlvbiA9IGF3YWl0IHNlYXBvcnRcbiAgICAgICAgICAgIC5tYXRjaE9yZGVycyh7XG4gICAgICAgICAgICBvcmRlcnM6IFtvcmRlci5wcm90b2NvbERhdGEsIGNvdW50ZXJPcmRlcl0sXG4gICAgICAgICAgICBmdWxmaWxsbWVudHMsXG4gICAgICAgICAgICBvdmVycmlkZXM6IHtcbiAgICAgICAgICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGNvdW50ZXJPcmRlci5wYXJhbWV0ZXJzLm9mZmVyWzBdLnN0YXJ0QW1vdW50LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFjY291bnRBZGRyZXNzLFxuICAgICAgICAgICAgZG9tYWluLFxuICAgICAgICB9KVxuICAgICAgICAgICAgLnRyYW5zYWN0KCk7XG4gICAgICAgIGNvbnN0IHRyYW5zYWN0aW9uUmVjZWlwdCA9IGF3YWl0IHRyYW5zYWN0aW9uLndhaXQoKTtcbiAgICAgICAgaWYgKCF0cmFuc2FjdGlvblJlY2VpcHQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgdHJhbnNhY3Rpb24gcmVjZWlwdFwiKTtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCB0aGlzLl9jb25maXJtVHJhbnNhY3Rpb24odHJhbnNhY3Rpb25SZWNlaXB0Lmhhc2gsIHR5cGVzXzIuRXZlbnRUeXBlLk1hdGNoT3JkZXJzLCBcIkZ1bGZpbGxpbmcgb3JkZXJcIik7XG4gICAgICAgIHJldHVybiB0cmFuc2FjdGlvblJlY2VpcHQuaGFzaDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRnVsZmlsbCBhbiBvcmRlciBmb3IgYW4gYXNzZXQuIFRoZSBvcmRlciBjYW4gYmUgZWl0aGVyIGEgbGlzdGluZyBvciBhbiBvZmZlci5cbiAgICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgICAqIEBwYXJhbSBvcHRpb25zLm9yZGVyIFRoZSBvcmRlciB0byBmdWxmaWxsLCBhLmsuYS4gXCJ0YWtlXCJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5hY2NvdW50QWRkcmVzcyBBZGRyZXNzIG9mIHRoZSB3YWxsZXQgdGFraW5nIHRoZSBvZmZlci5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5yZWNpcGllbnRBZGRyZXNzIFRoZSBvcHRpb25hbCBhZGRyZXNzIHRvIHJlY2VpdmUgdGhlIG9yZGVyJ3MgaXRlbShzKSBvciBjdXJyZW5jaWVzLiBJZiBub3Qgc3BlY2lmaWVkLCBkZWZhdWx0cyB0byBhY2NvdW50QWRkcmVzcy5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5kb21haW4gQW4gb3B0aW9uYWwgZG9tYWluIHRvIGJlIGhhc2hlZCBhbmQgaW5jbHVkZWQgYXQgdGhlIGVuZCBvZiBmdWxmaWxsbWVudCBjYWxsZGF0YS4gIFRoaXMgY2FuIGJlIHVzZWQgZm9yIG9uLWNoYWluIG9yZGVyIGF0dHJpYnV0aW9uIHRvIGFzc2lzdCB3aXRoIGFuYWx5dGljcy5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5vdmVycmlkZXMgVHJhbnNhY3Rpb24gb3ZlcnJpZGVzLCBpZ25vcmVkIGlmIG5vdCBzZXQuXG4gICAgICogQHJldHVybnMgVHJhbnNhY3Rpb24gaGFzaCBvZiB0aGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAdGhyb3dzIEVycm9yIGlmIHRoZSBhY2NvdW50QWRkcmVzcyBpcyBub3QgYXZhaWxhYmxlIHRocm91Z2ggd2FsbGV0IG9yIHByb3ZpZGVyLlxuICAgICAqIEB0aHJvd3MgRXJyb3IgaWYgdGhlIG9yZGVyJ3MgcHJvdG9jb2wgYWRkcmVzcyBpcyBub3Qgc3VwcG9ydGVkIGJ5IE9wZW5TZWEuIFNlZSB7QGxpbmsgaXNWYWxpZFByb3RvY29sfS5cbiAgICAgKiBAdGhyb3dzIEVycm9yIGlmIGF0dGVtcHRpbmcgdG8gZnVsZmlsbCB0aGUgb3JkZXIgd2l0aCBhIHJlY2lwaWVudCBhZGRyZXNzIHdoaWNoIGRvZXMgbm90IG1hdGNoIGEgcHJpdmF0ZSBsaXN0aW5nLlxuICAgICAqL1xuICAgIGFzeW5jIGZ1bGZpbGxPcmRlcih7IG9yZGVyLCBhY2NvdW50QWRkcmVzcywgcmVjaXBpZW50QWRkcmVzcywgZG9tYWluLCBvdmVycmlkZXMsIH0pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5fcmVxdWlyZUFjY291bnRJc0F2YWlsYWJsZShhY2NvdW50QWRkcmVzcyk7XG4gICAgICAgIGNvbnN0IHByb3RvY29sQWRkcmVzcyA9IG9yZGVyLnByb3RvY29sQWRkcmVzcyA/PyBvcmRlci5wcm90b2NvbF9hZGRyZXNzO1xuICAgICAgICAoMCwgdXRpbHNfMi5yZXF1aXJlVmFsaWRQcm90b2NvbCkocHJvdG9jb2xBZGRyZXNzKTtcbiAgICAgICAgY29uc3Qgb3JkZXJIYXNoID0gb3JkZXIub3JkZXJIYXNoID8/IG9yZGVyLm9yZGVyX2hhc2g7XG4gICAgICAgIGNvbnN0IHNpZGUgPSBvcmRlci5zaWRlID8/XG4gICAgICAgICAgICAoW3R5cGVzXzEuT3JkZXJUeXBlLkJBU0lDLCB0eXBlc18xLk9yZGVyVHlwZS5FTkdMSVNIXS5pbmNsdWRlcyhvcmRlci50eXBlKVxuICAgICAgICAgICAgICAgID8gdHlwZXNfMi5PcmRlclNpZGUuTElTVElOR1xuICAgICAgICAgICAgICAgIDogdHlwZXNfMi5PcmRlclNpZGUuT0ZGRVIpO1xuICAgICAgICBsZXQgZXh0cmFEYXRhID0gdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBwcm90b2NvbERhdGEgPSBvcmRlci5wcm90b2NvbERhdGEgPz8gb3JkZXIucHJvdG9jb2xfZGF0YTtcbiAgICAgICAgaWYgKG9yZGVySGFzaCkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5hcGkuZ2VuZXJhdGVGdWxmaWxsbWVudERhdGEoYWNjb3VudEFkZHJlc3MsIG9yZGVySGFzaCwgcHJvdG9jb2xBZGRyZXNzLCBzaWRlKTtcbiAgICAgICAgICAgIC8vIElmIHRoZSBvcmRlciBpcyB1c2luZyBvZmZlciBwcm90ZWN0aW9uLCB0aGUgZXh0cmFEYXRhXG4gICAgICAgICAgICAvLyBtdXN0IGJlIGluY2x1ZGVkIHdpdGggdGhlIG9yZGVyIHRvIHN1Y2Nlc3NmdWxseSBmdWxmaWxsLlxuICAgICAgICAgICAgY29uc3QgaW5wdXREYXRhID0gcmVzdWx0LmZ1bGZpbGxtZW50X2RhdGEudHJhbnNhY3Rpb24uaW5wdXRfZGF0YTtcbiAgICAgICAgICAgIGlmIChcIm9yZGVyc1wiIGluIGlucHV0RGF0YSAmJiBcImV4dHJhRGF0YVwiIGluIGlucHV0RGF0YS5vcmRlcnNbMF0pIHtcbiAgICAgICAgICAgICAgICBleHRyYURhdGEgPSBpbnB1dERhdGEub3JkZXJzWzBdLmV4dHJhRGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IHJlc3VsdC5mdWxmaWxsbWVudF9kYXRhLm9yZGVyc1swXS5zaWduYXR1cmU7XG4gICAgICAgICAgICBwcm90b2NvbERhdGEuc2lnbmF0dXJlID0gc2lnbmF0dXJlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGlzUHJpdmF0ZUxpc3RpbmcgPSBcInRha2VyXCIgaW4gb3JkZXIgPyAhIW9yZGVyLnRha2VyIDogZmFsc2U7XG4gICAgICAgIGlmIChpc1ByaXZhdGVMaXN0aW5nKSB7XG4gICAgICAgICAgICBpZiAocmVjaXBpZW50QWRkcmVzcykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlByaXZhdGUgbGlzdGluZ3MgY2Fubm90IGJlIGZ1bGZpbGxlZCB3aXRoIGEgcmVjaXBpZW50IGFkZHJlc3NcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mdWxmaWxsUHJpdmF0ZU9yZGVyKHtcbiAgICAgICAgICAgICAgICBvcmRlcjogb3JkZXIsXG4gICAgICAgICAgICAgICAgYWNjb3VudEFkZHJlc3MsXG4gICAgICAgICAgICAgICAgZG9tYWluLFxuICAgICAgICAgICAgICAgIG92ZXJyaWRlcyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNlYXBvcnQgPSB0aGlzLmdldFNlYXBvcnQocHJvdG9jb2xBZGRyZXNzKTtcbiAgICAgICAgY29uc3QgeyBleGVjdXRlQWxsQWN0aW9ucyB9ID0gYXdhaXQgc2VhcG9ydC5mdWxmaWxsT3JkZXIoe1xuICAgICAgICAgICAgb3JkZXI6IHByb3RvY29sRGF0YSxcbiAgICAgICAgICAgIGFjY291bnRBZGRyZXNzLFxuICAgICAgICAgICAgcmVjaXBpZW50QWRkcmVzcyxcbiAgICAgICAgICAgIGV4dHJhRGF0YSxcbiAgICAgICAgICAgIGRvbWFpbixcbiAgICAgICAgICAgIG92ZXJyaWRlcyxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gYXdhaXQgZXhlY3V0ZUFsbEFjdGlvbnMoKTtcbiAgICAgICAgY29uc3QgdHJhbnNhY3Rpb25IYXNoID0gZXRoZXJzXzEuZXRoZXJzLlRyYW5zYWN0aW9uLmZyb20odHJhbnNhY3Rpb24pLmhhc2g7XG4gICAgICAgIGlmICghdHJhbnNhY3Rpb25IYXNoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIHRyYW5zYWN0aW9uIGhhc2hcIik7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgdGhpcy5fY29uZmlybVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uSGFzaCwgdHlwZXNfMi5FdmVudFR5cGUuTWF0Y2hPcmRlcnMsIFwiRnVsZmlsbGluZyBvcmRlclwiKTtcbiAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9uSGFzaDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXRpbGl0eSBmdW5jdGlvbiB0byBnZXQgdGhlIFNlYXBvcnQgY2xpZW50IGJhc2VkIG9uIHRoZSBhZGRyZXNzLlxuICAgICAqIEBwYXJhbSBwcm90b2NvbEFkZHJlc3MgVGhlIFNlYXBvcnQgYWRkcmVzcy5cbiAgICAgKi9cbiAgICBnZXRTZWFwb3J0KHByb3RvY29sQWRkcmVzcykge1xuICAgICAgICBjb25zdCBjaGVja3N1bW1lZFByb3RvY29sQWRkcmVzcyA9IGV0aGVyc18xLmV0aGVycy5nZXRBZGRyZXNzKHByb3RvY29sQWRkcmVzcyk7XG4gICAgICAgIHN3aXRjaCAoY2hlY2tzdW1tZWRQcm90b2NvbEFkZHJlc3MpIHtcbiAgICAgICAgICAgIGNhc2UgY29uc3RhbnRzXzEuQ1JPU1NfQ0hBSU5fU0VBUE9SVF9WMV81X0FERFJFU1M6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VhcG9ydF92MV81O1xuICAgICAgICAgICAgY2FzZSBjb25zdGFudHNfMS5DUk9TU19DSEFJTl9TRUFQT1JUX1YxXzZfQUREUkVTUzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZWFwb3J0X3YxXzY7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgcHJvdG9jb2wgYWRkcmVzczogJHtwcm90b2NvbEFkZHJlc3N9YCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FuY2VsIG9yZGVycyBvbmNoYWluLCBwcmV2ZW50aW5nIHRoZW0gZnJvbSBiZWluZyBmdWxmaWxsZWQuXG4gICAgICogQHBhcmFtIG9wdGlvbnNcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5vcmRlcnMgVGhlIG9yZGVycyB0byBjYW5jZWxcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5hY2NvdW50QWRkcmVzcyBUaGUgYWNjb3VudCBhZGRyZXNzIGNhbmNlbGxpbmcgdGhlIG9yZGVycy5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5kb21haW4gQW4gb3B0aW9uYWwgZG9tYWluIHRvIGJlIGhhc2hlZCBhbmQgaW5jbHVkZWQgYXQgdGhlIGVuZCBvZiBmdWxmaWxsbWVudCBjYWxsZGF0YS5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgVGhpcyBjYW4gYmUgdXNlZCBmb3Igb24tY2hhaW4gb3JkZXIgYXR0cmlidXRpb24gdG8gYXNzaXN0IHdpdGggYW5hbHl0aWNzLlxuICAgICAqIEBwYXJhbSBvcHRpb25zLm92ZXJyaWRlcyBUcmFuc2FjdGlvbiBvdmVycmlkZXMsIGlnbm9yZWQgaWYgbm90IHNldC5cbiAgICAgKiBAcmV0dXJucyBUcmFuc2FjdGlvbiBoYXNoIG9mIHRoZSBvcmRlci5cbiAgICAgKi9cbiAgICBhc3luYyBjYW5jZWxTZWFwb3J0T3JkZXJzKHsgb3JkZXJzLCBhY2NvdW50QWRkcmVzcywgZG9tYWluLCBwcm90b2NvbEFkZHJlc3MgPSB1dGlsc18xLkRFRkFVTFRfU0VBUE9SVF9DT05UUkFDVF9BRERSRVNTLCBvdmVycmlkZXMsIH0pIHtcbiAgICAgICAgY29uc3Qgc2VhcG9ydCA9IHRoaXMuZ2V0U2VhcG9ydChwcm90b2NvbEFkZHJlc3MpO1xuICAgICAgICBjb25zdCB0cmFuc2FjdGlvbiA9IGF3YWl0IHNlYXBvcnRcbiAgICAgICAgICAgIC5jYW5jZWxPcmRlcnMob3JkZXJzLCBhY2NvdW50QWRkcmVzcywgZG9tYWluLCBvdmVycmlkZXMpXG4gICAgICAgICAgICAudHJhbnNhY3QoKTtcbiAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9uLmhhc2g7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbmNlbCBhbiBvcmRlciBvbmNoYWluLCBwcmV2ZW50aW5nIGl0IGZyb20gZXZlciBiZWluZyBmdWxmaWxsZWQuXG4gICAgICogQHBhcmFtIG9wdGlvbnNcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5vcmRlciBUaGUgb3JkZXIgdG8gY2FuY2VsXG4gICAgICogQHBhcmFtIG9wdGlvbnMuYWNjb3VudEFkZHJlc3MgVGhlIGFjY291bnQgYWRkcmVzcyB0aGF0IHdpbGwgYmUgY2FuY2VsbGluZyB0aGUgb3JkZXIuXG4gICAgICogQHBhcmFtIG9wdGlvbnMuZG9tYWluIEFuIG9wdGlvbmFsIGRvbWFpbiB0byBiZSBoYXNoZWQgYW5kIGluY2x1ZGVkIGF0IHRoZSBlbmQgb2YgZnVsZmlsbG1lbnQgY2FsbGRhdGEuICBUaGlzIGNhbiBiZSB1c2VkIGZvciBvbi1jaGFpbiBvcmRlciBhdHRyaWJ1dGlvbiB0byBhc3Npc3Qgd2l0aCBhbmFseXRpY3MuXG4gICAgICpcbiAgICAgKiBAdGhyb3dzIEVycm9yIGlmIHRoZSBhY2NvdW50QWRkcmVzcyBpcyBub3QgYXZhaWxhYmxlIHRocm91Z2ggd2FsbGV0IG9yIHByb3ZpZGVyLlxuICAgICAqIEB0aHJvd3MgRXJyb3IgaWYgdGhlIG9yZGVyJ3MgcHJvdG9jb2wgYWRkcmVzcyBpcyBub3Qgc3VwcG9ydGVkIGJ5IE9wZW5TZWEuIFNlZSB7QGxpbmsgaXNWYWxpZFByb3RvY29sfS5cbiAgICAgKi9cbiAgICBhc3luYyBjYW5jZWxPcmRlcih7IG9yZGVyLCBhY2NvdW50QWRkcmVzcywgZG9tYWluLCB9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMuX3JlcXVpcmVBY2NvdW50SXNBdmFpbGFibGUoYWNjb3VudEFkZHJlc3MpO1xuICAgICAgICAoMCwgdXRpbHNfMi5yZXF1aXJlVmFsaWRQcm90b2NvbCkob3JkZXIucHJvdG9jb2xBZGRyZXNzKTtcbiAgICAgICAgdGhpcy5fZGlzcGF0Y2godHlwZXNfMi5FdmVudFR5cGUuQ2FuY2VsT3JkZXIsIHsgb3JkZXJWMjogb3JkZXIsIGFjY291bnRBZGRyZXNzIH0pO1xuICAgICAgICAvLyBUcmFuc2FjdCBhbmQgZ2V0IHRoZSB0cmFuc2FjdGlvbiBoYXNoXG4gICAgICAgIGNvbnN0IHRyYW5zYWN0aW9uSGFzaCA9IGF3YWl0IHRoaXMuY2FuY2VsU2VhcG9ydE9yZGVycyh7XG4gICAgICAgICAgICBvcmRlcnM6IFtvcmRlci5wcm90b2NvbERhdGEucGFyYW1ldGVyc10sXG4gICAgICAgICAgICBhY2NvdW50QWRkcmVzcyxcbiAgICAgICAgICAgIGRvbWFpbixcbiAgICAgICAgICAgIHByb3RvY29sQWRkcmVzczogb3JkZXIucHJvdG9jb2xBZGRyZXNzLFxuICAgICAgICB9KTtcbiAgICAgICAgLy8gQXdhaXQgdHJhbnNhY3Rpb24gY29uZmlybWF0aW9uXG4gICAgICAgIGF3YWl0IHRoaXMuX2NvbmZpcm1UcmFuc2FjdGlvbih0cmFuc2FjdGlvbkhhc2gsIHR5cGVzXzIuRXZlbnRUeXBlLkNhbmNlbE9yZGVyLCBcIkNhbmNlbGxpbmcgb3JkZXJcIik7XG4gICAgfVxuICAgIF9nZXRTZWFwb3J0VmVyc2lvbihwcm90b2NvbEFkZHJlc3MpIHtcbiAgICAgICAgY29uc3QgcHJvdG9jb2xBZGRyZXNzQ2hlY2tzdW1tZWQgPSBldGhlcnNfMS5ldGhlcnMuZ2V0QWRkcmVzcyhwcm90b2NvbEFkZHJlc3MpO1xuICAgICAgICBzd2l0Y2ggKHByb3RvY29sQWRkcmVzc0NoZWNrc3VtbWVkKSB7XG4gICAgICAgICAgICBjYXNlIGNvbnN0YW50c18xLkNST1NTX0NIQUlOX1NFQVBPUlRfVjFfNl9BRERSRVNTOlxuICAgICAgICAgICAgICAgIHJldHVybiBcIjEuNlwiO1xuICAgICAgICAgICAgY2FzZSBjb25zdGFudHNfMS5DUk9TU19DSEFJTl9TRUFQT1JUX1YxXzVfQUREUkVTUzpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCIxLjVcIjtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBvciB1bnN1cHBvcnRlZCBwcm90b2NvbCBhZGRyZXNzXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgb2ZmZXJlciBzaWduYXR1cmUgZm9yIGNhbmNlbGluZyBhbiBvcmRlciBvZmZjaGFpbi5cbiAgICAgKiBUaGUgc2lnbmF0dXJlIHdpbGwgb25seSBiZSB2YWxpZCBpZiB0aGUgc2lnbmVyIGFkZHJlc3MgaXMgdGhlIGFkZHJlc3Mgb2YgdGhlIG9yZGVyJ3Mgb2ZmZXJlci5cbiAgICAgKi9cbiAgICBhc3luYyBfZ2V0T2ZmZXJlclNpZ25hdHVyZShwcm90b2NvbEFkZHJlc3MsIG9yZGVySGFzaCwgY2hhaW4pIHtcbiAgICAgICAgY29uc3QgY2hhaW5JZCA9ICgwLCB1dGlsc18yLmdldENoYWluSWQpKGNoYWluKTtcbiAgICAgICAgY29uc3QgbmFtZSA9IFwiU2VhcG9ydFwiO1xuICAgICAgICBjb25zdCB2ZXJzaW9uID0gdGhpcy5fZ2V0U2VhcG9ydFZlcnNpb24ocHJvdG9jb2xBZGRyZXNzKTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9zaWduZXJPclByb3ZpZGVyLnNpZ25UeXBlZERhdGEgPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUGxlYXNlIHBhc3MgYW4gZXRoZXJzIFNpZ25lciBpbnRvIHRoaXMgc2RrIHRvIGRlcml2ZSBhbiBvZmZlcmVyIHNpZ25hdHVyZVwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fc2lnbmVyT3JQcm92aWRlci5zaWduVHlwZWREYXRhKHsgY2hhaW5JZCwgbmFtZSwgdmVyc2lvbiwgdmVyaWZ5aW5nQ29udHJhY3Q6IHByb3RvY29sQWRkcmVzcyB9LCB7IE9yZGVySGFzaDogW3sgbmFtZTogXCJvcmRlckhhc2hcIiwgdHlwZTogXCJieXRlczMyXCIgfV0gfSwgeyBvcmRlckhhc2ggfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE9mZmNoYWluIGNhbmNlbCBhbiBvcmRlciwgb2ZmZXIgb3IgbGlzdGluZywgYnkgaXRzIG9yZGVyIGhhc2ggd2hlbiBwcm90ZWN0ZWQgYnkgdGhlIFNpZ25lZFpvbmUuXG4gICAgICogUHJvdG9jb2wgYW5kIENoYWluIGFyZSByZXF1aXJlZCB0byBwcmV2ZW50IGhhc2ggY29sbGlzaW9ucy5cbiAgICAgKiBQbGVhc2Ugbm90ZSBjYW5jZWxsYXRpb24gaXMgb25seSBhc3N1cmVkIGlmIGEgZnVsZmlsbG1lbnQgc2lnbmF0dXJlIHdhcyBub3QgdmVuZGVkIHByaW9yIHRvIGNhbmNlbGxhdGlvbi5cbiAgICAgKiBAcGFyYW0gcHJvdG9jb2xBZGRyZXNzIFRoZSBTZWFwb3J0IGFkZHJlc3MgZm9yIHRoZSBvcmRlci5cbiAgICAgKiBAcGFyYW0gb3JkZXJIYXNoIFRoZSBvcmRlciBoYXNoLCBvciBleHRlcm5hbCBpZGVudGlmaWVyLCBvZiB0aGUgb3JkZXIuXG4gICAgICogQHBhcmFtIGNoYWluIFRoZSBjaGFpbiB3aGVyZSB0aGUgb3JkZXIgaXMgbG9jYXRlZC5cbiAgICAgKiBAcGFyYW0gb2ZmZXJlclNpZ25hdHVyZSBBbiBFSVAtNzEyIHNpZ25hdHVyZSBmcm9tIHRoZSBvZmZlcmVyIG9mIHRoZSBvcmRlci5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBJZiB0aGlzIGlzIG5vdCBwcm92aWRlZCwgdGhlIHVzZXIgYXNzb2NpYXRlZCB3aXRoIHRoZSBBUEkgS2V5IHdpbGwgYmUgY2hlY2tlZCBpbnN0ZWFkLlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBzaWduYXR1cmUgbXVzdCBiZSBhIEVJUC03MTIgc2lnbmF0dXJlIGNvbnNpc3Rpbmcgb2YgdGhlIG9yZGVyJ3MgU2VhcG9ydCBjb250cmFjdCdzXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSwgdmVyc2lvbiwgYWRkcmVzcywgYW5kIGNoYWluLiBUaGUgc3RydWN0IHRvIHNpZ24gaXMgYE9yZGVySGFzaGAgY29udGFpbmluZyBhXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgc2luZ2xlIGJ5dGVzMzIgZmllbGQuXG4gICAgICogQHBhcmFtIHVzZVNpZ25lclRvRGVyaXZlT2ZmZXJlclNpZ25hdHVyZSBEZXJpdmUgdGhlIG9mZmVyZXJTaWduYXR1cmUgZnJvbSB0aGUgRXRoZXJzIHNpZ25lciBwYXNzZWQgaW50byB0aGlzIHNkay5cbiAgICAgKiBAcmV0dXJucyBUaGUgcmVzcG9uc2UgZnJvbSB0aGUgQVBJLlxuICAgICAqL1xuICAgIGFzeW5jIG9mZmNoYWluQ2FuY2VsT3JkZXIocHJvdG9jb2xBZGRyZXNzLCBvcmRlckhhc2gsIGNoYWluID0gdGhpcy5jaGFpbiwgb2ZmZXJlclNpZ25hdHVyZSwgdXNlU2lnbmVyVG9EZXJpdmVPZmZlcmVyU2lnbmF0dXJlKSB7XG4gICAgICAgIGlmICh1c2VTaWduZXJUb0Rlcml2ZU9mZmVyZXJTaWduYXR1cmUpIHtcbiAgICAgICAgICAgIG9mZmVyZXJTaWduYXR1cmUgPSBhd2FpdCB0aGlzLl9nZXRPZmZlcmVyU2lnbmF0dXJlKHByb3RvY29sQWRkcmVzcywgb3JkZXJIYXNoLCBjaGFpbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuYXBpLm9mZmNoYWluQ2FuY2VsT3JkZXIocHJvdG9jb2xBZGRyZXNzLCBvcmRlckhhc2gsIGNoYWluLCBvZmZlcmVyU2lnbmF0dXJlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIGFuIG9yZGVyIGlzIGZ1bGZpbGxhYmxlLlxuICAgICAqIEFuIG9yZGVyIG1heSBub3QgYmUgZnVsZmlsbGFibGUgaWYgYSB0YXJnZXQgaXRlbSdzIHRyYW5zZmVyIGZ1bmN0aW9uXG4gICAgICogaXMgbG9ja2VkIGZvciBzb21lIHJlYXNvbiwgZS5nLiBhbiBpdGVtIGlzIGJlaW5nIHJlbnRlZCB3aXRoaW4gYSBnYW1lXG4gICAgICogb3IgdHJhZGluZyBoYXMgYmVlbiBsb2NrZWQgZm9yIGFuIGl0ZW0gdHlwZS5cbiAgICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgICAqIEBwYXJhbSBvcHRpb25zLm9yZGVyIE9yZGVyIHRvIGNoZWNrXG4gICAgICogQHBhcmFtIG9wdGlvbnMuYWNjb3VudEFkZHJlc3MgVGhlIGFjY291bnQgYWRkcmVzcyB0aGF0IHdpbGwgYmUgZnVsZmlsbGluZyB0aGUgb3JkZXJcbiAgICAgKiBAcmV0dXJucyBUcnVlIGlmIHRoZSBvcmRlciBpcyBmdWxmaWxsYWJsZSwgZWxzZSBGYWxzZS5cbiAgICAgKlxuICAgICAqIEB0aHJvd3MgRXJyb3IgaWYgdGhlIG9yZGVyJ3MgcHJvdG9jb2wgYWRkcmVzcyBpcyBub3Qgc3VwcG9ydGVkIGJ5IE9wZW5TZWEuIFNlZSB7QGxpbmsgaXNWYWxpZFByb3RvY29sfS5cbiAgICAgKi9cbiAgICBhc3luYyBpc09yZGVyRnVsZmlsbGFibGUoeyBvcmRlciwgYWNjb3VudEFkZHJlc3MsIH0pIHtcbiAgICAgICAgKDAsIHV0aWxzXzIucmVxdWlyZVZhbGlkUHJvdG9jb2wpKG9yZGVyLnByb3RvY29sQWRkcmVzcyk7XG4gICAgICAgIGNvbnN0IHNlYXBvcnQgPSB0aGlzLmdldFNlYXBvcnQob3JkZXIucHJvdG9jb2xBZGRyZXNzKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGlzVmFsaWQgPSBhd2FpdCBzZWFwb3J0XG4gICAgICAgICAgICAgICAgLnZhbGlkYXRlKFtvcmRlci5wcm90b2NvbERhdGFdLCBhY2NvdW50QWRkcmVzcylcbiAgICAgICAgICAgICAgICAuc3RhdGljQ2FsbCgpO1xuICAgICAgICAgICAgcmV0dXJuICEhaXNWYWxpZDtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmICgoMCwgdXRpbHNfMi5oYXNFcnJvckNvZGUpKGVycm9yKSAmJiBlcnJvci5jb2RlID09PSBcIkNBTExfRVhDRVBUSU9OXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgYW4gYWNjb3VudCdzIGJhbGFuY2Ugb2YgYW55IEFzc2V0LiBUaGlzIGFzc2V0IGNhbiBiZSBhbiBFUkMyMCwgRVJDMTE1NSwgb3IgRVJDNzIxLlxuICAgICAqIEBwYXJhbSBvcHRpb25zXG4gICAgICogQHBhcmFtIG9wdGlvbnMuYWNjb3VudEFkZHJlc3MgQWNjb3VudCBhZGRyZXNzIHRvIGNoZWNrXG4gICAgICogQHBhcmFtIG9wdGlvbnMuYXNzZXQgVGhlIEFzc2V0IHRvIGNoZWNrIGJhbGFuY2UgZm9yLiB0b2tlblN0YW5kYXJkIG11c3QgYmUgc2V0LlxuICAgICAqIEByZXR1cm5zIFRoZSBiYWxhbmNlIG9mIHRoZSBhc3NldCBmb3IgdGhlIGFjY291bnQuXG4gICAgICpcbiAgICAgKiBAdGhyb3dzIEVycm9yIGlmIHRoZSB0b2tlbiBzdGFuZGFyZCBkb2VzIG5vdCBzdXBwb3J0IGJhbGFuY2VPZi5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRCYWxhbmNlKHsgYWNjb3VudEFkZHJlc3MsIGFzc2V0LCB9KSB7XG4gICAgICAgIHN3aXRjaCAoYXNzZXQudG9rZW5TdGFuZGFyZCkge1xuICAgICAgICAgICAgY2FzZSB0eXBlc18yLlRva2VuU3RhbmRhcmQuRVJDMjA6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb250cmFjdCA9IGNvbnRyYWN0c18xLkVSQzIwX19mYWN0b3J5LmNvbm5lY3QoYXNzZXQudG9rZW5BZGRyZXNzLCB0aGlzLnByb3ZpZGVyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgY29udHJhY3QuYmFsYW5jZU9mLnN0YXRpY0NhbGwoYWNjb3VudEFkZHJlc3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB0eXBlc18yLlRva2VuU3RhbmRhcmQuRVJDMTE1NToge1xuICAgICAgICAgICAgICAgIGlmIChhc3NldC50b2tlbklkID09PSB1bmRlZmluZWQgfHwgYXNzZXQudG9rZW5JZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIEVSQzExNTUgdG9rZW5JZCBmb3IgZ2V0QmFsYW5jZVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgY29udHJhY3QgPSBjb250cmFjdHNfMS5FUkMxMTU1X19mYWN0b3J5LmNvbm5lY3QoYXNzZXQudG9rZW5BZGRyZXNzLCB0aGlzLnByb3ZpZGVyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgY29udHJhY3QuYmFsYW5jZU9mLnN0YXRpY0NhbGwoYWNjb3VudEFkZHJlc3MsIGFzc2V0LnRva2VuSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB0eXBlc18yLlRva2VuU3RhbmRhcmQuRVJDNzIxOiB7XG4gICAgICAgICAgICAgICAgaWYgKGFzc2V0LnRva2VuSWQgPT09IHVuZGVmaW5lZCB8fCBhc3NldC50b2tlbklkID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgRVJDNzIxIHRva2VuSWQgZm9yIGdldEJhbGFuY2VcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRyYWN0ID0gY29udHJhY3RzXzEuRVJDNzIxX19mYWN0b3J5LmNvbm5lY3QoYXNzZXQudG9rZW5BZGRyZXNzLCB0aGlzLnByb3ZpZGVyKTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvd25lciA9IGF3YWl0IGNvbnRyYWN0Lm93bmVyT2Yuc3RhdGljQ2FsbChhc3NldC50b2tlbklkKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEJpZ0ludChvd25lci50b0xvd2VyQ2FzZSgpID09IGFjY291bnRBZGRyZXNzLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIoYEZhaWxlZCB0byBnZXQgb3duZXJPZiBFUkM3MjE6ICR7ZXJyb3IubWVzc2FnZSA/PyBlcnJvcn1gKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDBuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgdG9rZW4gc3RhbmRhcmQgZm9yIGdldEJhbGFuY2VcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogVHJhbnNmZXIgYW4gYXNzZXQuIFRoaXMgYXNzZXQgY2FuIGJlIGFuIEVSQzIwLCBFUkMxMTU1LCBvciBFUkM3MjEuXG4gICAgICogQHBhcmFtIG9wdGlvbnNcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5hc3NldCBUaGUgQXNzZXQgdG8gdHJhbnNmZXIuIHRva2VuU3RhbmRhcmQgbXVzdCBiZSBzZXQuXG4gICAgICogQHBhcmFtIG9wdGlvbnMuYW1vdW50IEFtb3VudCBvZiBhc3NldCB0byB0cmFuc2Zlci4gTm90IHVzZWQgZm9yIEVSQzcyMS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5mcm9tQWRkcmVzcyBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBmcm9tXG4gICAgICogQHBhcmFtIG9wdGlvbnMudG9BZGRyZXNzIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIHRvXG4gICAgICogQHBhcmFtIG9wdGlvbnMub3ZlcnJpZGVzIFRyYW5zYWN0aW9uIG92ZXJyaWRlcywgaWdub3JlZCBpZiBub3Qgc2V0LlxuICAgICAqL1xuICAgIGFzeW5jIHRyYW5zZmVyKHsgYXNzZXQsIGFtb3VudCwgZnJvbUFkZHJlc3MsIHRvQWRkcmVzcywgb3ZlcnJpZGVzLCB9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMuX3JlcXVpcmVBY2NvdW50SXNBdmFpbGFibGUoZnJvbUFkZHJlc3MpO1xuICAgICAgICBvdmVycmlkZXMgPSB7IC4uLm92ZXJyaWRlcywgZnJvbTogZnJvbUFkZHJlc3MgfTtcbiAgICAgICAgbGV0IHRyYW5zYWN0aW9uO1xuICAgICAgICBzd2l0Y2ggKGFzc2V0LnRva2VuU3RhbmRhcmQpIHtcbiAgICAgICAgICAgIGNhc2UgdHlwZXNfMi5Ub2tlblN0YW5kYXJkLkVSQzIwOiB7XG4gICAgICAgICAgICAgICAgaWYgKCFhbW91bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBFUkMyMCBhbW91bnQgZm9yIHRyYW5zZmVyXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBjb250cmFjdCA9IGNvbnRyYWN0c18xLkVSQzIwX19mYWN0b3J5LmNvbm5lY3QoYXNzZXQudG9rZW5BZGRyZXNzLCB0aGlzLl9zaWduZXJPclByb3ZpZGVyKTtcbiAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbiA9IGNvbnRyYWN0LnRyYW5zZmVyKHRvQWRkcmVzcywgYW1vdW50LCBvdmVycmlkZXMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB0eXBlc18yLlRva2VuU3RhbmRhcmQuRVJDMTE1NToge1xuICAgICAgICAgICAgICAgIGlmIChhc3NldC50b2tlbklkID09PSB1bmRlZmluZWQgfHwgYXNzZXQudG9rZW5JZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIEVSQzExNTUgdG9rZW5JZCBmb3IgdHJhbnNmZXJcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghYW1vdW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgRVJDMTE1NSBhbW91bnQgZm9yIHRyYW5zZmVyXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBjb250cmFjdCA9IGNvbnRyYWN0c18xLkVSQzExNTVfX2ZhY3RvcnkuY29ubmVjdChhc3NldC50b2tlbkFkZHJlc3MsIHRoaXMuX3NpZ25lck9yUHJvdmlkZXIpO1xuICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uID0gY29udHJhY3Quc2FmZVRyYW5zZmVyRnJvbShmcm9tQWRkcmVzcywgdG9BZGRyZXNzLCBhc3NldC50b2tlbklkLCBhbW91bnQsIFwiXCIsIG92ZXJyaWRlcyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHR5cGVzXzIuVG9rZW5TdGFuZGFyZC5FUkM3MjE6IHtcbiAgICAgICAgICAgICAgICBpZiAoYXNzZXQudG9rZW5JZCA9PT0gdW5kZWZpbmVkIHx8IGFzc2V0LnRva2VuSWQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBFUkM3MjEgdG9rZW5JZCBmb3IgdHJhbnNmZXJcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRyYWN0ID0gY29udHJhY3RzXzEuRVJDNzIxX19mYWN0b3J5LmNvbm5lY3QoYXNzZXQudG9rZW5BZGRyZXNzLCB0aGlzLl9zaWduZXJPclByb3ZpZGVyKTtcbiAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbiA9IGNvbnRyYWN0LnRyYW5zZmVyRnJvbShmcm9tQWRkcmVzcywgdG9BZGRyZXNzLCBhc3NldC50b2tlbklkLCBvdmVycmlkZXMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCB0b2tlbiBzdGFuZGFyZCBmb3IgdHJhbnNmZXJcIik7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHRyYW5zYWN0aW9uUmVzcG9uc2UgPSBhd2FpdCB0cmFuc2FjdGlvbjtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX2NvbmZpcm1UcmFuc2FjdGlvbih0cmFuc2FjdGlvblJlc3BvbnNlLmhhc2gsIHR5cGVzXzIuRXZlbnRUeXBlLlRyYW5zZmVyLCBcIlRyYW5zZmVycmluZyBhc3NldFwiKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgdGhpcy5fZGlzcGF0Y2godHlwZXNfMi5FdmVudFR5cGUuVHJhbnNhY3Rpb25EZW5pZWQsIHtcbiAgICAgICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICAgICAgICBhY2NvdW50QWRkcmVzczogZnJvbUFkZHJlc3MsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnN0ZWFkIG9mIHNpZ25pbmcgYW4gb2ZmLWNoYWluIG9yZGVyLCB0aGlzIG1ldGhvZHMgYWxsb3dzIHlvdSB0byBhcHByb3ZlIGFuIG9yZGVyXG4gICAgICogd2l0aCBvbiBvbi1jaGFpbiB0cmFuc2FjdGlvbi5cbiAgICAgKiBAcGFyYW0gb3JkZXIgT3JkZXIgdG8gYXBwcm92ZVxuICAgICAqIEBwYXJhbSBkb21haW4gQW4gb3B0aW9uYWwgZG9tYWluIHRvIGJlIGhhc2hlZCBhbmQgaW5jbHVkZWQgYXQgdGhlIGVuZCBvZiBmdWxmaWxsbWVudCBjYWxsZGF0YS4gIFRoaXMgY2FuIGJlIHVzZWQgZm9yIG9uLWNoYWluIG9yZGVyIGF0dHJpYnV0aW9uIHRvIGFzc2lzdCB3aXRoIGFuYWx5dGljcy5cbiAgICAgKiBAcmV0dXJucyBUcmFuc2FjdGlvbiBoYXNoIG9mIHRoZSBhcHByb3ZhbCB0cmFuc2FjdGlvblxuICAgICAqXG4gICAgICogQHRocm93cyBFcnJvciBpZiB0aGUgYWNjb3VudEFkZHJlc3MgaXMgbm90IGF2YWlsYWJsZSB0aHJvdWdoIHdhbGxldCBvciBwcm92aWRlci5cbiAgICAgKiBAdGhyb3dzIEVycm9yIGlmIHRoZSBvcmRlcidzIHByb3RvY29sIGFkZHJlc3MgaXMgbm90IHN1cHBvcnRlZCBieSBPcGVuU2VhLiBTZWUge0BsaW5rIGlzVmFsaWRQcm90b2NvbH0uXG4gICAgICovXG4gICAgYXN5bmMgYXBwcm92ZU9yZGVyKG9yZGVyLCBkb21haW4pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5fcmVxdWlyZUFjY291bnRJc0F2YWlsYWJsZShvcmRlci5tYWtlci5hZGRyZXNzKTtcbiAgICAgICAgKDAsIHV0aWxzXzIucmVxdWlyZVZhbGlkUHJvdG9jb2wpKG9yZGVyLnByb3RvY29sQWRkcmVzcyk7XG4gICAgICAgIHRoaXMuX2Rpc3BhdGNoKHR5cGVzXzIuRXZlbnRUeXBlLkFwcHJvdmVPcmRlciwge1xuICAgICAgICAgICAgb3JkZXJWMjogb3JkZXIsXG4gICAgICAgICAgICBhY2NvdW50QWRkcmVzczogb3JkZXIubWFrZXIuYWRkcmVzcyxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHNlYXBvcnQgPSB0aGlzLmdldFNlYXBvcnQob3JkZXIucHJvdG9jb2xBZGRyZXNzKTtcbiAgICAgICAgY29uc3QgdHJhbnNhY3Rpb24gPSBhd2FpdCBzZWFwb3J0XG4gICAgICAgICAgICAudmFsaWRhdGUoW29yZGVyLnByb3RvY29sRGF0YV0sIG9yZGVyLm1ha2VyLmFkZHJlc3MsIGRvbWFpbilcbiAgICAgICAgICAgIC50cmFuc2FjdCgpO1xuICAgICAgICBhd2FpdCB0aGlzLl9jb25maXJtVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24uaGFzaCwgdHlwZXNfMi5FdmVudFR5cGUuQXBwcm92ZU9yZGVyLCBcIkFwcHJvdmluZyBvcmRlclwiKTtcbiAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9uLmhhc2g7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbXB1dGUgdGhlIGBiYXNlUHJpY2VgIGFuZCBgZW5kUHJpY2VgIHBhcmFtZXRlcnMgdG8gYmUgdXNlZCB0byBwcmljZSBhbiBvcmRlci5cbiAgICAgKiBBbHNvIHZhbGlkYXRlcyB0aGUgZXhwaXJhdGlvbiB0aW1lIGFuZCBhdWN0aW9uIHR5cGUuXG4gICAgICogQHBhcmFtIHRva2VuQWRkcmVzcyBBZGRyZXNzIG9mIHRoZSBFUkMtMjAgdG9rZW4gdG8gdXNlIGZvciB0cmFkaW5nLiBVc2UgdGhlIG51bGwgYWRkcmVzcyBmb3IgRVRILlxuICAgICAqIEBwYXJhbSBleHBpcmF0aW9uVGltZSBXaGVuIHRoZSBhdWN0aW9uIGV4cGlyZXMsIG9yIDAgaWYgbmV2ZXIuXG4gICAgICogQHBhcmFtIHN0YXJ0QW1vdW50IFRoZSBiYXNlIHZhbHVlIGZvciB0aGUgb3JkZXIsIGluIHRoZSB0b2tlbidzIG1haW4gdW5pdHMgKGUuZy4gRVRIIGluc3RlYWQgb2Ygd2VpKVxuICAgICAqIEBwYXJhbSBlbmRBbW91bnQgVGhlIGVuZCB2YWx1ZSBmb3IgdGhlIG9yZGVyLCBpbiB0aGUgdG9rZW4ncyBtYWluIHVuaXRzIChlLmcuIEVUSCBpbnN0ZWFkIG9mIHdlaSlcbiAgICAgKi9cbiAgICBhc3luYyBfZ2V0UHJpY2VQYXJhbWV0ZXJzKG9yZGVyU2lkZSwgdG9rZW5BZGRyZXNzLCBleHBpcmF0aW9uVGltZSwgc3RhcnRBbW91bnQsIGVuZEFtb3VudCkge1xuICAgICAgICB0b2tlbkFkZHJlc3MgPSB0b2tlbkFkZHJlc3MudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgY29uc3QgaXNFdGhlciA9IHRva2VuQWRkcmVzcyA9PT0gZXRoZXJzXzEuZXRoZXJzLlplcm9BZGRyZXNzO1xuICAgICAgICBsZXQgZGVjaW1hbHMgPSAxODtcbiAgICAgICAgaWYgKCFpc0V0aGVyKSB7XG4gICAgICAgICAgICBpZiAodG9rZW5BZGRyZXNzIGluIHRoaXMuX2NhY2hlZFBheW1lbnRUb2tlbkRlY2ltYWxzKSB7XG4gICAgICAgICAgICAgICAgZGVjaW1hbHMgPSB0aGlzLl9jYWNoZWRQYXltZW50VG9rZW5EZWNpbWFsc1t0b2tlbkFkZHJlc3NdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGF5bWVudFRva2VuID0gYXdhaXQgdGhpcy5hcGkuZ2V0UGF5bWVudFRva2VuKHRva2VuQWRkcmVzcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVkUGF5bWVudFRva2VuRGVjaW1hbHNbdG9rZW5BZGRyZXNzXSA9IHBheW1lbnRUb2tlbi5kZWNpbWFscztcbiAgICAgICAgICAgICAgICBkZWNpbWFscyA9IHBheW1lbnRUb2tlbi5kZWNpbWFscztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGFydEFtb3VudFdlaSA9IGV0aGVyc18xLmV0aGVycy5wYXJzZVVuaXRzKHN0YXJ0QW1vdW50LnRvU3RyaW5nKCksIGRlY2ltYWxzKTtcbiAgICAgICAgY29uc3QgZW5kQW1vdW50V2VpID0gZW5kQW1vdW50XG4gICAgICAgICAgICA/IGV0aGVyc18xLmV0aGVycy5wYXJzZVVuaXRzKGVuZEFtb3VudC50b1N0cmluZygpLCBkZWNpbWFscylcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBwcmljZURpZmZXZWkgPSBlbmRBbW91bnRXZWkgIT09IHVuZGVmaW5lZCA/IHN0YXJ0QW1vdW50V2VpIC0gZW5kQW1vdW50V2VpIDogMG47XG4gICAgICAgIGNvbnN0IGJhc2VQcmljZSA9IHN0YXJ0QW1vdW50V2VpO1xuICAgICAgICBjb25zdCBlbmRQcmljZSA9IGVuZEFtb3VudFdlaTtcbiAgICAgICAgLy8gVmFsaWRhdGlvblxuICAgICAgICBpZiAoc3RhcnRBbW91bnQgPT0gbnVsbCB8fCBzdGFydEFtb3VudFdlaSA8IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlN0YXJ0aW5nIHByaWNlIG11c3QgYmUgYSBudW1iZXIgPj0gMFwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNFdGhlciAmJiBvcmRlclNpZGUgPT09IHR5cGVzXzIuT3JkZXJTaWRlLk9GRkVSKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPZmZlcnMgbXVzdCB1c2Ugd3JhcHBlZCBFVEggb3IgYW4gRVJDLTIwIHRva2VuLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJpY2VEaWZmV2VpIDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRW5kIHByaWNlIG11c3QgYmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSBzdGFydCBwcmljZS5cIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByaWNlRGlmZldlaSA+IDAgJiYgQmlnSW50KGV4cGlyYXRpb25UaW1lKSA9PT0gMG4pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGlyYXRpb24gdGltZSBtdXN0IGJlIHNldCBpZiBvcmRlciB3aWxsIGNoYW5nZSBpbiBwcmljZS5cIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgYmFzZVByaWNlLCBlbmRQcmljZSB9O1xuICAgIH1cbiAgICBfZGlzcGF0Y2goZXZlbnQsIGRhdGEpIHtcbiAgICAgICAgdGhpcy5fZW1pdHRlci5lbWl0KGV2ZW50LCBkYXRhKTtcbiAgICB9XG4gICAgLyoqIEdldCB0aGUgYWNjb3VudHMgYXZhaWxhYmxlIGZyb20gdGhlIHNpZ25lciBvciBwcm92aWRlci4gKi9cbiAgICBhc3luYyBfZ2V0QXZhaWxhYmxlQWNjb3VudHMoKSB7XG4gICAgICAgIGNvbnN0IGF2YWlsYWJsZUFjY291bnRzID0gW107XG4gICAgICAgIGlmIChcImFkZHJlc3NcIiBpbiB0aGlzLl9zaWduZXJPclByb3ZpZGVyKSB7XG4gICAgICAgICAgICBhdmFpbGFibGVBY2NvdW50cy5wdXNoKHRoaXMuX3NpZ25lck9yUHJvdmlkZXIuYWRkcmVzcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoXCJsaXN0QWNjb3VudHNcIiBpbiB0aGlzLl9zaWduZXJPclByb3ZpZGVyKSB7XG4gICAgICAgICAgICBjb25zdCBhZGRyZXNzZXMgPSAoYXdhaXQgdGhpcy5fc2lnbmVyT3JQcm92aWRlci5saXN0QWNjb3VudHMoKSkubWFwKChhY2N0KSA9PiBhY2N0LmFkZHJlc3MpO1xuICAgICAgICAgICAgYXZhaWxhYmxlQWNjb3VudHMucHVzaCguLi5hZGRyZXNzZXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKFwiZ2V0QWRkcmVzc1wiIGluIHRoaXMuX3NpZ25lck9yUHJvdmlkZXIpIHtcbiAgICAgICAgICAgIGF2YWlsYWJsZUFjY291bnRzLnB1c2goYXdhaXQgdGhpcy5fc2lnbmVyT3JQcm92aWRlci5nZXRBZGRyZXNzKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhdmFpbGFibGVBY2NvdW50cztcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhyb3dzIGFuIGVycm9yIGlmIGFuIGFjY291bnQgaXMgbm90IGF2YWlsYWJsZSB0aHJvdWdoIHRoZSBwcm92aWRlci5cbiAgICAgKiBAcGFyYW0gYWNjb3VudEFkZHJlc3MgVGhlIGFjY291bnQgYWRkcmVzcyB0byBjaGVjayBpcyBhdmFpbGFibGUuXG4gICAgICovXG4gICAgYXN5bmMgX3JlcXVpcmVBY2NvdW50SXNBdmFpbGFibGUoYWNjb3VudEFkZHJlc3MpIHtcbiAgICAgICAgY29uc3QgYWNjb3VudEFkZHJlc3NDaGVja3N1bW1lZCA9IGV0aGVyc18xLmV0aGVycy5nZXRBZGRyZXNzKGFjY291bnRBZGRyZXNzKTtcbiAgICAgICAgY29uc3QgYXZhaWxhYmxlQWNjb3VudHMgPSBhd2FpdCB0aGlzLl9nZXRBdmFpbGFibGVBY2NvdW50cygpO1xuICAgICAgICBpZiAoYXZhaWxhYmxlQWNjb3VudHMuaW5jbHVkZXMoYWNjb3VudEFkZHJlc3NDaGVja3N1bW1lZCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFNwZWNpZmllZCBhY2NvdW50QWRkcmVzcyBpcyBub3QgYXZhaWxhYmxlIHRocm91Z2ggd2FsbGV0IG9yIHByb3ZpZGVyOiAke2FjY291bnRBZGRyZXNzQ2hlY2tzdW1tZWR9LiBBY2NvdW50cyBhdmFpbGFibGU6ICR7YXZhaWxhYmxlQWNjb3VudHMubGVuZ3RoID4gMCA/IGF2YWlsYWJsZUFjY291bnRzLmpvaW4oXCIsIFwiKSA6IFwibm9uZVwifWApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXYWl0IGZvciBhIHRyYW5zYWN0aW9uIHRvIGNvbmZpcm0gYW5kIGxvZyB0aGUgc3VjY2VzcyBvciBmYWlsdXJlLlxuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbkhhc2ggVGhlIHRyYW5zYWN0aW9uIGhhc2ggdG8gd2FpdCBmb3IuXG4gICAgICogQHBhcmFtIGV2ZW50IFRoZSBldmVudCB0eXBlIHRvIGxvZy5cbiAgICAgKiBAcGFyYW0gZGVzY3JpcHRpb24gVGhlIGRlc2NyaXB0aW9uIG9mIHRoZSB0cmFuc2FjdGlvbi5cbiAgICAgKi9cbiAgICBhc3luYyBfY29uZmlybVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uSGFzaCwgZXZlbnQsIGRlc2NyaXB0aW9uKSB7XG4gICAgICAgIGNvbnN0IHRyYW5zYWN0aW9uRXZlbnREYXRhID0geyB0cmFuc2FjdGlvbkhhc2gsIGV2ZW50IH07XG4gICAgICAgIHRoaXMubG9nZ2VyKGBUcmFuc2FjdGlvbiBzdGFydGVkOiAke2Rlc2NyaXB0aW9ufWApO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5fZGlzcGF0Y2godHlwZXNfMi5FdmVudFR5cGUuVHJhbnNhY3Rpb25DcmVhdGVkLCB0cmFuc2FjdGlvbkV2ZW50RGF0YSk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnByb3ZpZGVyLndhaXRGb3JUcmFuc2FjdGlvbih0cmFuc2FjdGlvbkhhc2gpO1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIoYFRyYW5zYWN0aW9uIHN1Y2NlZWRlZDogJHtkZXNjcmlwdGlvbn1gKTtcbiAgICAgICAgICAgIHRoaXMuX2Rpc3BhdGNoKHR5cGVzXzIuRXZlbnRUeXBlLlRyYW5zYWN0aW9uQ29uZmlybWVkLCB0cmFuc2FjdGlvbkV2ZW50RGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLmxvZ2dlcihgVHJhbnNhY3Rpb24gZmFpbGVkOiAke2Rlc2NyaXB0aW9ufWApO1xuICAgICAgICAgICAgdGhpcy5fZGlzcGF0Y2godHlwZXNfMi5FdmVudFR5cGUuVHJhbnNhY3Rpb25GYWlsZWQsIHtcbiAgICAgICAgICAgICAgICAuLi50cmFuc2FjdGlvbkV2ZW50RGF0YSxcbiAgICAgICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLk9wZW5TZWFTREsgPSBPcGVuU2VhU0RLO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2RrLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/opensea-js/lib/sdk.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/opensea-js/lib/typechain/contracts/factories/ERC1155__factory.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/opensea-js/lib/typechain/contracts/factories/ERC1155__factory.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ERC1155__factory = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(rsc)/./node_modules/ethers/lib.commonjs/index.js\");\nconst _abi = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"operator\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bool\",\n                name: \"approved\",\n                type: \"bool\",\n            },\n        ],\n        name: \"ApprovalForAll\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"operator\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256[]\",\n                name: \"ids\",\n                type: \"uint256[]\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256[]\",\n                name: \"values\",\n                type: \"uint256[]\",\n            },\n        ],\n        name: \"TransferBatch\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"operator\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"id\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"TransferSingle\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"string\",\n                name: \"value\",\n                type: \"string\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"id\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"URI\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"id\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"balanceOf\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address[]\",\n                name: \"accounts\",\n                type: \"address[]\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"ids\",\n                type: \"uint256[]\",\n            },\n        ],\n        name: \"balanceOfBatch\",\n        outputs: [\n            {\n                internalType: \"uint256[]\",\n                name: \"\",\n                type: \"uint256[]\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"operator\",\n                type: \"address\",\n            },\n        ],\n        name: \"isApprovedForAll\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"ids\",\n                type: \"uint256[]\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"amounts\",\n                type: \"uint256[]\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"safeBatchTransferFrom\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"id\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"safeTransferFrom\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"operator\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"approved\",\n                type: \"bool\",\n            },\n        ],\n        name: \"setApprovalForAll\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"id\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"uri\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nclass ERC1155__factory {\n    static createInterface() {\n        return new ethers_1.Interface(_abi);\n    }\n    static connect(address, runner) {\n        return new ethers_1.Contract(address, _abi, runner);\n    }\n}\nexports.ERC1155__factory = ERC1155__factory;\nERC1155__factory.abi = _abi;\n//# sourceMappingURL=ERC1155__factory.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/opensea-js/lib/typechain/contracts/factories/ERC1155__factory.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/opensea-js/lib/typechain/contracts/factories/ERC20__factory.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/opensea-js/lib/typechain/contracts/factories/ERC20__factory.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ERC20__factory = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(rsc)/./node_modules/ethers/lib.commonjs/index.js\");\nconst _abi = [\n    {\n        constant: true,\n        inputs: [],\n        name: \"name\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                name: \"_spender\",\n                type: \"address\",\n            },\n            {\n                name: \"_value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"approve\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: \"totalSupply\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                name: \"_from\",\n                type: \"address\",\n            },\n            {\n                name: \"_to\",\n                type: \"address\",\n            },\n            {\n                name: \"_value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transferFrom\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: \"decimals\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [\n            {\n                name: \"_owner\",\n                type: \"address\",\n            },\n        ],\n        name: \"balanceOf\",\n        outputs: [\n            {\n                name: \"balance\",\n                type: \"uint256\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: \"symbol\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                name: \"_to\",\n                type: \"address\",\n            },\n            {\n                name: \"_value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transfer\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [\n            {\n                name: \"_owner\",\n                type: \"address\",\n            },\n            {\n                name: \"_spender\",\n                type: \"address\",\n            },\n        ],\n        name: \"allowance\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        payable: true,\n        stateMutability: \"payable\",\n        type: \"fallback\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Approval\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Transfer\",\n        type: \"event\",\n    },\n];\nclass ERC20__factory {\n    static createInterface() {\n        return new ethers_1.Interface(_abi);\n    }\n    static connect(address, runner) {\n        return new ethers_1.Contract(address, _abi, runner);\n    }\n}\nexports.ERC20__factory = ERC20__factory;\nERC20__factory.abi = _abi;\n//# sourceMappingURL=ERC20__factory.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/opensea-js/lib/typechain/contracts/factories/ERC20__factory.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/opensea-js/lib/typechain/contracts/factories/ERC721__factory.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/opensea-js/lib/typechain/contracts/factories/ERC721__factory.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ERC721__factory = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(rsc)/./node_modules/ethers/lib.commonjs/index.js\");\nconst _abi = [\n    {\n        constant: false,\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"tokenId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"approve\",\n        outputs: [],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"tokenId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"mint\",\n        outputs: [],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"tokenId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"safeTransferFrom\",\n        outputs: [],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"tokenId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"safeTransferFrom\",\n        outputs: [],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"approved\",\n                type: \"bool\",\n            },\n        ],\n        name: \"setApprovalForAll\",\n        outputs: [],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"tokenId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transferFrom\",\n        outputs: [],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"tokenId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Transfer\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"approved\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"tokenId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Approval\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"operator\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bool\",\n                name: \"approved\",\n                type: \"bool\",\n            },\n        ],\n        name: \"ApprovalForAll\",\n        type: \"event\",\n    },\n    {\n        constant: true,\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n        ],\n        name: \"balanceOf\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"tokenId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"getApproved\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"operator\",\n                type: \"address\",\n            },\n        ],\n        name: \"isApprovedForAll\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"tokenId\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ownerOf\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nclass ERC721__factory {\n    static createInterface() {\n        return new ethers_1.Interface(_abi);\n    }\n    static connect(address, runner) {\n        return new ethers_1.Contract(address, _abi, runner);\n    }\n}\nexports.ERC721__factory = ERC721__factory;\nERC721__factory.abi = _abi;\n//# sourceMappingURL=ERC721__factory.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/opensea-js/lib/typechain/contracts/factories/ERC721__factory.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/opensea-js/lib/typechain/contracts/factories/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/opensea-js/lib/typechain/contracts/factories/index.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ERC721__factory = exports.ERC20__factory = exports.ERC1155__factory = void 0;\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nvar ERC1155__factory_1 = __webpack_require__(/*! ./ERC1155__factory */ \"(rsc)/./node_modules/opensea-js/lib/typechain/contracts/factories/ERC1155__factory.js\");\nObject.defineProperty(exports, \"ERC1155__factory\", ({ enumerable: true, get: function () { return ERC1155__factory_1.ERC1155__factory; } }));\nvar ERC20__factory_1 = __webpack_require__(/*! ./ERC20__factory */ \"(rsc)/./node_modules/opensea-js/lib/typechain/contracts/factories/ERC20__factory.js\");\nObject.defineProperty(exports, \"ERC20__factory\", ({ enumerable: true, get: function () { return ERC20__factory_1.ERC20__factory; } }));\nvar ERC721__factory_1 = __webpack_require__(/*! ./ERC721__factory */ \"(rsc)/./node_modules/opensea-js/lib/typechain/contracts/factories/ERC721__factory.js\");\nObject.defineProperty(exports, \"ERC721__factory\", ({ enumerable: true, get: function () { return ERC721__factory_1.ERC721__factory; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbnNlYS1qcy9saWIvdHlwZWNoYWluL2NvbnRyYWN0cy9mYWN0b3JpZXMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCLEdBQUcsc0JBQXNCLEdBQUcsd0JBQXdCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixtQkFBTyxDQUFDLGlIQUFvQjtBQUNyRCxvREFBbUQsRUFBRSxxQ0FBcUMsK0NBQStDLEVBQUM7QUFDMUksdUJBQXVCLG1CQUFPLENBQUMsNkdBQWtCO0FBQ2pELGtEQUFpRCxFQUFFLHFDQUFxQywyQ0FBMkMsRUFBQztBQUNwSSx3QkFBd0IsbUJBQU8sQ0FBQywrR0FBbUI7QUFDbkQsbURBQWtELEVBQUUscUNBQXFDLDZDQUE2QyxFQUFDO0FBQ3ZJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2RwLXRlc3QtYWdlbnQvLi9ub2RlX21vZHVsZXMvb3BlbnNlYS1qcy9saWIvdHlwZWNoYWluL2NvbnRyYWN0cy9mYWN0b3JpZXMvaW5kZXguanM/ZDNhMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRVJDNzIxX19mYWN0b3J5ID0gZXhwb3J0cy5FUkMyMF9fZmFjdG9yeSA9IGV4cG9ydHMuRVJDMTE1NV9fZmFjdG9yeSA9IHZvaWQgMDtcbi8qIEF1dG9nZW5lcmF0ZWQgZmlsZS4gRG8gbm90IGVkaXQgbWFudWFsbHkuICovXG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cbnZhciBFUkMxMTU1X19mYWN0b3J5XzEgPSByZXF1aXJlKFwiLi9FUkMxMTU1X19mYWN0b3J5XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRVJDMTE1NV9fZmFjdG9yeVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gRVJDMTE1NV9fZmFjdG9yeV8xLkVSQzExNTVfX2ZhY3Rvcnk7IH0gfSk7XG52YXIgRVJDMjBfX2ZhY3RvcnlfMSA9IHJlcXVpcmUoXCIuL0VSQzIwX19mYWN0b3J5XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRVJDMjBfX2ZhY3RvcnlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEVSQzIwX19mYWN0b3J5XzEuRVJDMjBfX2ZhY3Rvcnk7IH0gfSk7XG52YXIgRVJDNzIxX19mYWN0b3J5XzEgPSByZXF1aXJlKFwiLi9FUkM3MjFfX2ZhY3RvcnlcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJFUkM3MjFfX2ZhY3RvcnlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEVSQzcyMV9fZmFjdG9yeV8xLkVSQzcyMV9fZmFjdG9yeTsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/opensea-js/lib/typechain/contracts/factories/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/opensea-js/lib/typechain/contracts/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/opensea-js/lib/typechain/contracts/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ERC721__factory = exports.ERC20__factory = exports.ERC1155__factory = exports.factories = void 0;\nexports.factories = __webpack_require__(/*! ./factories */ \"(rsc)/./node_modules/opensea-js/lib/typechain/contracts/factories/index.js\");\nvar ERC1155__factory_1 = __webpack_require__(/*! ./factories/ERC1155__factory */ \"(rsc)/./node_modules/opensea-js/lib/typechain/contracts/factories/ERC1155__factory.js\");\nObject.defineProperty(exports, \"ERC1155__factory\", ({ enumerable: true, get: function () { return ERC1155__factory_1.ERC1155__factory; } }));\nvar ERC20__factory_1 = __webpack_require__(/*! ./factories/ERC20__factory */ \"(rsc)/./node_modules/opensea-js/lib/typechain/contracts/factories/ERC20__factory.js\");\nObject.defineProperty(exports, \"ERC20__factory\", ({ enumerable: true, get: function () { return ERC20__factory_1.ERC20__factory; } }));\nvar ERC721__factory_1 = __webpack_require__(/*! ./factories/ERC721__factory */ \"(rsc)/./node_modules/opensea-js/lib/typechain/contracts/factories/ERC721__factory.js\");\nObject.defineProperty(exports, \"ERC721__factory\", ({ enumerable: true, get: function () { return ERC721__factory_1.ERC721__factory; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbnNlYS1qcy9saWIvdHlwZWNoYWluL2NvbnRyYWN0cy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUIsR0FBRyxzQkFBc0IsR0FBRyx3QkFBd0IsR0FBRyxpQkFBaUI7QUFDL0Ysd0lBQTBDO0FBQzFDLHlCQUF5QixtQkFBTyxDQUFDLDJIQUE4QjtBQUMvRCxvREFBbUQsRUFBRSxxQ0FBcUMsK0NBQStDLEVBQUM7QUFDMUksdUJBQXVCLG1CQUFPLENBQUMsdUhBQTRCO0FBQzNELGtEQUFpRCxFQUFFLHFDQUFxQywyQ0FBMkMsRUFBQztBQUNwSSx3QkFBd0IsbUJBQU8sQ0FBQyx5SEFBNkI7QUFDN0QsbURBQWtELEVBQUUscUNBQXFDLDZDQUE2QyxFQUFDO0FBQ3ZJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2RwLXRlc3QtYWdlbnQvLi9ub2RlX21vZHVsZXMvb3BlbnNlYS1qcy9saWIvdHlwZWNoYWluL2NvbnRyYWN0cy9pbmRleC5qcz8yYjAzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5FUkM3MjFfX2ZhY3RvcnkgPSBleHBvcnRzLkVSQzIwX19mYWN0b3J5ID0gZXhwb3J0cy5FUkMxMTU1X19mYWN0b3J5ID0gZXhwb3J0cy5mYWN0b3JpZXMgPSB2b2lkIDA7XG5leHBvcnRzLmZhY3RvcmllcyA9IHJlcXVpcmUoXCIuL2ZhY3Rvcmllc1wiKTtcbnZhciBFUkMxMTU1X19mYWN0b3J5XzEgPSByZXF1aXJlKFwiLi9mYWN0b3JpZXMvRVJDMTE1NV9fZmFjdG9yeVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkVSQzExNTVfX2ZhY3RvcnlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEVSQzExNTVfX2ZhY3RvcnlfMS5FUkMxMTU1X19mYWN0b3J5OyB9IH0pO1xudmFyIEVSQzIwX19mYWN0b3J5XzEgPSByZXF1aXJlKFwiLi9mYWN0b3JpZXMvRVJDMjBfX2ZhY3RvcnlcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJFUkMyMF9fZmFjdG9yeVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gRVJDMjBfX2ZhY3RvcnlfMS5FUkMyMF9fZmFjdG9yeTsgfSB9KTtcbnZhciBFUkM3MjFfX2ZhY3RvcnlfMSA9IHJlcXVpcmUoXCIuL2ZhY3Rvcmllcy9FUkM3MjFfX2ZhY3RvcnlcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJFUkM3MjFfX2ZhY3RvcnlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEVSQzcyMV9fZmFjdG9yeV8xLkVSQzcyMV9fZmFjdG9yeTsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/opensea-js/lib/typechain/contracts/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/opensea-js/lib/types.js":
/*!**********************************************!*\
  !*** ./node_modules/opensea-js/lib/types.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SafelistStatus = exports.TokenStandard = exports.OrderSide = exports.Chain = exports.EventType = void 0;\n/**\n * Events emitted by the SDK which can be used by frontend applications\n * to update state or show useful messages to users.\n * @category Events\n */\nvar EventType;\n(function (EventType) {\n    /**\n     * Emitted when the transaction is sent to the network and the application\n     * is waiting for the transaction to be mined.\n     */\n    EventType[\"TransactionCreated\"] = \"TransactionCreated\";\n    /**\n     * Emitted when the transaction has succeeded is mined and confirmed.\n     */\n    EventType[\"TransactionConfirmed\"] = \"TransactionConfirmed\";\n    /**\n     * Emitted when the transaction has failed to be submitted.\n     */\n    EventType[\"TransactionDenied\"] = \"TransactionDenied\";\n    /**\n     * Emitted when the transaction has failed to be mined.\n     */\n    EventType[\"TransactionFailed\"] = \"TransactionFailed\";\n    /**\n     * Emitted when the {@link OpenSeaSDK.wrapEth} method is called.\n     */\n    EventType[\"WrapEth\"] = \"WrapEth\";\n    /**\n     * Emitted when the {@link OpenSeaSDK.unwrapWeth} method is called.\n     */\n    EventType[\"UnwrapWeth\"] = \"UnwrapWeth\";\n    /**\n     * Emitted when fulfilling a public or private order.\n     */\n    EventType[\"MatchOrders\"] = \"MatchOrders\";\n    /**\n     * Emitted when the {@link OpenSeaSDK.cancelOrder} method is called.\n     */\n    EventType[\"CancelOrder\"] = \"CancelOrder\";\n    /**\n     * Emitted when the {@link OpenSeaSDK.approveOrder} method is called.\n     */\n    EventType[\"ApproveOrder\"] = \"ApproveOrder\";\n    /**\n     * Emitted when the {@link OpenSeaSDK.transfer} method is called.\n     */\n    EventType[\"Transfer\"] = \"Transfer\";\n})(EventType || (exports.EventType = EventType = {}));\n/**\n * Each of the possible chains that OpenSea supports.\n * ⚠️NOTE: When adding to this list, also add to the util functions `getChainId` and `getWETHAddress`\n */\nvar Chain;\n(function (Chain) {\n    // Mainnet Chains\n    /** Ethereum */\n    Chain[\"Mainnet\"] = \"ethereum\";\n    /** Polygon */\n    Chain[\"Polygon\"] = \"matic\";\n    /** Klaytn */\n    Chain[\"Klaytn\"] = \"klaytn\";\n    /** Base */\n    Chain[\"Base\"] = \"base\";\n    /** Blast */\n    Chain[\"Blast\"] = \"blast\";\n    /** Arbitrum */\n    Chain[\"Arbitrum\"] = \"arbitrum\";\n    /** Arbitrum Nova */\n    Chain[\"ArbitrumNova\"] = \"arbitrum_nova\";\n    /** Avalanche */\n    Chain[\"Avalanche\"] = \"avalanche\";\n    /** Optimism */\n    Chain[\"Optimism\"] = \"optimism\";\n    /** Solana */\n    Chain[\"Solana\"] = \"solana\";\n    /** Zora */\n    Chain[\"Zora\"] = \"zora\";\n    /** Sei */\n    Chain[\"Sei\"] = \"sei\";\n    /** B3 */\n    Chain[\"B3\"] = \"b3\";\n    /** Bera Chain */\n    Chain[\"BeraChain\"] = \"bera_chain\";\n    /** ApeChain */\n    Chain[\"ApeChain\"] = \"ape_chain\";\n    /** Flow */\n    Chain[\"Flow\"] = \"flow\";\n    // Testnet Chains\n    // ⚠️NOTE: When adding to this list, also add to the util function `isTestChain`\n    /** Sepolia */\n    Chain[\"Sepolia\"] = \"sepolia\";\n    /** Polygon Amoy */\n    Chain[\"Amoy\"] = \"amoy\";\n    /** Klaytn Baobab */\n    Chain[\"Baobab\"] = \"baobab\";\n    /** Base Testnet */\n    Chain[\"BaseSepolia\"] = \"base_sepolia\";\n    /** Blast Testnet */\n    Chain[\"BlastSepolia\"] = \"blast_sepolia\";\n    /** Arbitrum Sepolia */\n    Chain[\"ArbitrumSepolia\"] = \"arbitrum_sepolia\";\n    /** Avalanche Fuji */\n    Chain[\"Fuji\"] = \"avalanche_fuji\";\n    /** Optimism Sepolia */\n    Chain[\"OptimismSepolia\"] = \"optimism_sepolia\";\n    /** Solana Devnet */\n    Chain[\"SolanaDevnet\"] = \"soldev\";\n    /** Zora Sepolia */\n    Chain[\"ZoraSepolia\"] = \"zora_sepolia\";\n    /** Sei Testnet */\n    Chain[\"SeiTestnet\"] = \"sei_testnet\";\n    /** B3 Sepolia */\n    Chain[\"B3Sepolia\"] = \"b3_sepolia\";\n    /** Flow Testnet */\n    Chain[\"FlowTestnet\"] = \"flow_testnet\";\n})(Chain || (exports.Chain = Chain = {}));\n/**\n * Order side: listing (ask) or offer (bid)\n */\nvar OrderSide;\n(function (OrderSide) {\n    OrderSide[\"LISTING\"] = \"ask\";\n    OrderSide[\"OFFER\"] = \"bid\";\n})(OrderSide || (exports.OrderSide = OrderSide = {}));\n/**\n * Token standards\n */\nvar TokenStandard;\n(function (TokenStandard) {\n    TokenStandard[\"ERC20\"] = \"ERC20\";\n    TokenStandard[\"ERC721\"] = \"ERC721\";\n    TokenStandard[\"ERC1155\"] = \"ERC1155\";\n})(TokenStandard || (exports.TokenStandard = TokenStandard = {}));\n/**\n * The collection's approval status within OpenSea.\n * Can be one of:\n * - not_requested: brand new collections\n * - requested: collections that requested safelisting on our site\n * - approved: collections that are approved on our site and can be found in search results\n * - verified: verified collections\n */\nvar SafelistStatus;\n(function (SafelistStatus) {\n    SafelistStatus[\"NOT_REQUESTED\"] = \"not_requested\";\n    SafelistStatus[\"REQUESTED\"] = \"requested\";\n    SafelistStatus[\"APPROVED\"] = \"approved\";\n    SafelistStatus[\"VERIFIED\"] = \"verified\";\n    SafelistStatus[\"DISABLED_TOP_TRENDING\"] = \"disabled_top_trending\";\n})(SafelistStatus || (exports.SafelistStatus = SafelistStatus = {}));\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/opensea-js/lib/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/opensea-js/lib/utils/index.js":
/*!****************************************************!*\
  !*** ./node_modules/opensea-js/lib/utils/index.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/opensea-js/lib/utils/utils.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbnNlYS1qcy9saWIvdXRpbHMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLG1FQUFTO0FBQzlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2RwLXRlc3QtYWdlbnQvLi9ub2RlX21vZHVsZXMvb3BlbnNlYS1qcy9saWIvdXRpbHMvaW5kZXguanM/MTg2ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3V0aWxzXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/opensea-js/lib/utils/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/opensea-js/lib/utils/utils.js":
/*!****************************************************!*\
  !*** ./node_modules/opensea-js/lib/utils/utils.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.decodeTokenIds = exports.requireValidProtocol = exports.isValidProtocol = exports.isTestChain = exports.basisPointsForFee = exports.totalBasisPointsForFees = exports.getAddressAfterRemappingSharedStorefrontAddressToLazyMintAdapterAddress = exports.getWETHAddress = exports.getChainId = exports.getAssetItemType = exports.hasErrorCode = exports.getMaxOrderExpirationTimestamp = exports.estimateGas = exports.feeFromJSON = exports.accountFromJSON = exports.paymentTokenFromJSON = exports.rarityFromJSON = exports.collectionFromJSON = void 0;\nconst constants_1 = __webpack_require__(/*! @opensea/seaport-js/lib/constants */ \"(rsc)/./node_modules/@opensea/seaport-js/lib/constants.js\");\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(rsc)/./node_modules/ethers/lib.commonjs/index.js\");\nconst constants_2 = __webpack_require__(/*! ../constants */ \"(rsc)/./node_modules/opensea-js/lib/constants.js\");\nconst types_1 = __webpack_require__(/*! ../types */ \"(rsc)/./node_modules/opensea-js/lib/types.js\");\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst collectionFromJSON = (collection) => {\n    return {\n        name: collection.name,\n        collection: collection.collection,\n        description: collection.description,\n        imageUrl: collection.image_url,\n        bannerImageUrl: collection.banner_image_url,\n        owner: collection.owner,\n        safelistStatus: collection.safelist_status,\n        category: collection.category,\n        isDisabled: collection.is_disabled,\n        isNSFW: collection.is_nsfw,\n        traitOffersEnabled: collection.trait_offers_enabled,\n        collectionOffersEnabled: collection.collection_offers_enabled,\n        openseaUrl: collection.opensea_url,\n        projectUrl: collection.project_url,\n        wikiUrl: collection.wiki_url,\n        discordUrl: collection.discord_url,\n        telegramUrl: collection.telegram_url,\n        twitterUsername: collection.twitter_username,\n        instagramUsername: collection.instagram_username,\n        contracts: (collection.contracts ?? []).map((contract) => ({\n            address: contract.address,\n            chain: contract.chain,\n        })),\n        editors: collection.editors,\n        fees: (collection.fees ?? []).map(exports.feeFromJSON),\n        rarity: (0, exports.rarityFromJSON)(collection.rarity),\n        paymentTokens: (collection.payment_tokens ?? []).map(exports.paymentTokenFromJSON),\n        totalSupply: collection.total_supply,\n        createdDate: collection.created_date,\n        requiredZone: collection.required_zone,\n    };\n};\nexports.collectionFromJSON = collectionFromJSON;\nconst rarityFromJSON = (rarity) => {\n    if (!rarity) {\n        return null;\n    }\n    const fromJSON = {\n        strategyId: rarity.strategy_id,\n        strategyVersion: rarity.strategy_version,\n        calculatedAt: rarity.calculated_at,\n        maxRank: rarity.max_rank,\n        tokensScored: rarity.tokens_scored,\n    };\n    return fromJSON;\n};\nexports.rarityFromJSON = rarityFromJSON;\nconst paymentTokenFromJSON = (token) => {\n    const fromJSON = {\n        name: token.name,\n        symbol: token.symbol,\n        decimals: token.decimals,\n        address: token.address,\n        chain: token.chain,\n        imageUrl: token.image,\n        ethPrice: token.eth_price,\n        usdPrice: token.usd_price,\n    };\n    return fromJSON;\n};\nexports.paymentTokenFromJSON = paymentTokenFromJSON;\nconst accountFromJSON = (account) => {\n    return {\n        address: account.address,\n        username: account.username,\n        profileImageUrl: account.profile_image_url,\n        bannerImageUrl: account.banner_image_url,\n        website: account.website,\n        socialMediaAccounts: (account.social_media_accounts ?? []).map((acct) => ({\n            platform: acct.platform,\n            username: acct.username,\n        })),\n        bio: account.bio,\n        joinedDate: account.joined_date,\n    };\n};\nexports.accountFromJSON = accountFromJSON;\nconst feeFromJSON = (fee) => {\n    const fromJSON = {\n        fee: fee.fee,\n        recipient: fee.recipient,\n        required: fee.required,\n    };\n    return fromJSON;\n};\nexports.feeFromJSON = feeFromJSON;\n/**\n * Estimate gas usage for a transaction.\n * @param provider The Provider\n * @param from Address sending transaction\n * @param to Destination contract address\n * @param data Data to send to contract\n * @param value Value in ETH to send with data\n */\nasync function estimateGas(provider, { from, to, data, value = 0n }) {\n    return await provider.estimateGas({\n        from,\n        to,\n        value: value.toString(),\n        data,\n    });\n}\nexports.estimateGas = estimateGas;\n/**\n * The longest time that an order is valid for is one month from the current date\n * @returns unix timestamp\n */\nconst getMaxOrderExpirationTimestamp = () => {\n    const maxExpirationDate = new Date();\n    maxExpirationDate.setMonth(maxExpirationDate.getMonth() + constants_2.MAX_EXPIRATION_MONTHS);\n    maxExpirationDate.setDate(maxExpirationDate.getDate() - 1);\n    return Math.round(maxExpirationDate.getTime() / 1000);\n};\nexports.getMaxOrderExpirationTimestamp = getMaxOrderExpirationTimestamp;\nconst hasErrorCode = (error) => {\n    const untypedError = error;\n    return !!untypedError.code;\n};\nexports.hasErrorCode = hasErrorCode;\nconst getAssetItemType = (tokenStandard) => {\n    switch (tokenStandard) {\n        case \"ERC20\":\n            return constants_1.ItemType.ERC20;\n        case \"ERC721\":\n            return constants_1.ItemType.ERC721;\n        case \"ERC1155\":\n            return constants_1.ItemType.ERC1155;\n        default:\n            throw new Error(`Unknown schema name: ${tokenStandard}`);\n    }\n};\nexports.getAssetItemType = getAssetItemType;\nconst getChainId = (chain) => {\n    switch (chain) {\n        case types_1.Chain.Mainnet:\n            return \"1\";\n        case types_1.Chain.Polygon:\n            return \"137\";\n        case types_1.Chain.Amoy:\n            return \"80002\";\n        case types_1.Chain.Sepolia:\n            return \"11155111\";\n        case types_1.Chain.Klaytn:\n            return \"8217\";\n        case types_1.Chain.Baobab:\n            return \"1001\";\n        case types_1.Chain.Avalanche:\n            return \"43114\";\n        case types_1.Chain.Fuji:\n            return \"43113\";\n        case types_1.Chain.Arbitrum:\n            return \"42161\";\n        case types_1.Chain.ArbitrumNova:\n            return \"42170\";\n        case types_1.Chain.ArbitrumSepolia:\n            return \"421614\";\n        case types_1.Chain.Blast:\n            return \"238\";\n        case types_1.Chain.BlastSepolia:\n            return \"168587773\";\n        case types_1.Chain.Base:\n            return \"8453\";\n        case types_1.Chain.BaseSepolia:\n            return \"84532\";\n        case types_1.Chain.Optimism:\n            return \"10\";\n        case types_1.Chain.OptimismSepolia:\n            return \"11155420\";\n        case types_1.Chain.Zora:\n            return \"7777777\";\n        case types_1.Chain.ZoraSepolia:\n            return \"999999999\";\n        case types_1.Chain.Sei:\n            return \"1329\";\n        case types_1.Chain.SeiTestnet:\n            return \"1328\";\n        case types_1.Chain.B3:\n            return \"8333\";\n        case types_1.Chain.B3Sepolia:\n            return \"1993\";\n        case types_1.Chain.BeraChain:\n            return \"80094\";\n        case types_1.Chain.Flow:\n            return \"747\";\n        case types_1.Chain.FlowTestnet:\n            return \"545\";\n        case types_1.Chain.ApeChain:\n            return \"33139\";\n        default:\n            throw new Error(`Unknown chainId for ${chain}`);\n    }\n};\nexports.getChainId = getChainId;\n/** This should be the wrapped native asset for the chain. */\nconst getWETHAddress = (chain) => {\n    switch (chain) {\n        case types_1.Chain.Mainnet:\n            return \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\";\n        case types_1.Chain.Polygon:\n            return \"0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619\";\n        case types_1.Chain.Amoy:\n            return \"0x52eF3d68BaB452a294342DC3e5f464d7f610f72E\";\n        case types_1.Chain.Sepolia:\n            return \"0x7b79995e5f793a07bc00c21412e50ecae098e7f9\";\n        case types_1.Chain.Klaytn:\n            return \"0xfd844c2fca5e595004b17615f891620d1cb9bbb2\";\n        case types_1.Chain.Baobab:\n            return \"0x9330dd6713c8328a8d82b14e3f60a0f0b4cc7bfb\";\n        case types_1.Chain.Avalanche:\n            return \"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7\";\n        case types_1.Chain.Fuji:\n            return \"0xd00ae08403B9bbb9124bB305C09058E32C39A48c\";\n        case types_1.Chain.Arbitrum:\n            return \"0x82af49447d8a07e3bd95bd0d56f35241523fbab1\";\n        case types_1.Chain.ArbitrumNova:\n            return \"0x722e8bdd2ce80a4422e880164f2079488e115365\";\n        case types_1.Chain.ArbitrumSepolia:\n            return \"0x980b62da83eff3d4576c647993b0c1d7faf17c73\";\n        case types_1.Chain.Blast:\n            return \"0x4300000000000000000000000000000000000004\";\n        case types_1.Chain.BlastSepolia:\n            return \"0x4200000000000000000000000000000000000023\";\n        // OP Chains have WETH at the same address\n        case types_1.Chain.Base:\n        case types_1.Chain.BaseSepolia:\n        case types_1.Chain.Optimism:\n        case types_1.Chain.OptimismSepolia:\n        case types_1.Chain.Zora:\n        case types_1.Chain.ZoraSepolia:\n        case types_1.Chain.B3:\n        case types_1.Chain.B3Sepolia:\n            return \"0x4200000000000000000000000000000000000006\";\n        case types_1.Chain.BeraChain:\n            return \"0x6969696969696969696969696969696969696969\";\n        case types_1.Chain.Sei:\n            return \"0xe30fedd158a2e3b13e9badaeabafc5516e95e8c7\";\n        case types_1.Chain.SeiTestnet:\n            return \"0x3921ea6cf927be80211bb57f19830700285b0ada\";\n        case types_1.Chain.Flow:\n            return \"0xd3bf53dac106a0290b0483ecbc89d40fcc961f3e\";\n        case types_1.Chain.FlowTestnet:\n            return \"0x23b1864b73c6E7Cd6D90bDFa3E62B159eBDdbAb3\";\n        case types_1.Chain.ApeChain:\n            return \"0x48b62137edfa95a428d35c09e44256a739f6b557\";\n        default:\n            throw new Error(`Unknown WETH address for ${chain}`);\n    }\n};\nexports.getWETHAddress = getWETHAddress;\n/**\n * Checks if the token address is the shared storefront address and if so replaces\n * that address with the lazy mint adapter address. Otherwise, returns the input token address\n * @param tokenAddress token address\n * @returns input token address or lazy mint adapter address\n */\nconst getAddressAfterRemappingSharedStorefrontAddressToLazyMintAdapterAddress = (tokenAddress) => {\n    return constants_2.SHARED_STOREFRONT_ADDRESSES.includes(tokenAddress.toLowerCase())\n        ? constants_2.SHARED_STOREFRONT_LAZY_MINT_ADAPTER_CROSS_CHAIN_ADDRESS\n        : tokenAddress;\n};\nexports.getAddressAfterRemappingSharedStorefrontAddressToLazyMintAdapterAddress = getAddressAfterRemappingSharedStorefrontAddressToLazyMintAdapterAddress;\n/**\n * Sums up the basis points for fees.\n * @param fees The fees to sum up\n * @returns sum of basis points\n */\nconst totalBasisPointsForFees = (fees) => {\n    const feeBasisPoints = fees.map((fee) => (0, exports.basisPointsForFee)(fee));\n    const totalBasisPoints = feeBasisPoints.reduce((sum, basisPoints) => basisPoints + sum, 0n);\n    return totalBasisPoints;\n};\nexports.totalBasisPointsForFees = totalBasisPointsForFees;\n/**\n * Converts a fee to its basis points representation.\n * @param fee The fee to convert\n * @returns the basis points\n */\nconst basisPointsForFee = (fee) => {\n    return BigInt(ethers_1.FixedNumber.fromString(fee.fee.toString())\n        .mul(constants_2.FIXED_NUMBER_100)\n        .toFormat(0) // format to 0 decimal places to convert to bigint\n        .toString());\n};\nexports.basisPointsForFee = basisPointsForFee;\n/**\n * Checks whether the current chain is a test chain.\n * @param chain Chain to check.\n * @returns True if the chain is a test chain.\n */\nconst isTestChain = (chain) => {\n    switch (chain) {\n        case types_1.Chain.Sepolia:\n        case types_1.Chain.Amoy:\n        case types_1.Chain.Baobab:\n        case types_1.Chain.BaseSepolia:\n        case types_1.Chain.BlastSepolia:\n        case types_1.Chain.ArbitrumSepolia:\n        case types_1.Chain.Fuji:\n        case types_1.Chain.OptimismSepolia:\n        case types_1.Chain.SolanaDevnet:\n        case types_1.Chain.ZoraSepolia:\n        case types_1.Chain.SeiTestnet:\n        case types_1.Chain.B3Sepolia:\n        case types_1.Chain.FlowTestnet:\n            return true;\n        default:\n            return false;\n    }\n};\nexports.isTestChain = isTestChain;\n/**\n * Returns if a protocol address is valid.\n * @param protocolAddress The protocol address\n */\nconst isValidProtocol = (protocolAddress) => {\n    const checkSumAddress = ethers_1.ethers.getAddress(protocolAddress);\n    const validProtocolAddresses = [\n        constants_1.CROSS_CHAIN_SEAPORT_V1_6_ADDRESS,\n        constants_1.CROSS_CHAIN_SEAPORT_V1_5_ADDRESS,\n    ].map((address) => ethers_1.ethers.getAddress(address));\n    return validProtocolAddresses.includes(checkSumAddress);\n};\nexports.isValidProtocol = isValidProtocol;\n/**\n * Throws an error if the protocol address is not valid.\n * @param protocolAddress The protocol address\n */\nconst requireValidProtocol = (protocolAddress) => {\n    if (!(0, exports.isValidProtocol)(protocolAddress)) {\n        throw new Error(`Unsupported protocol address: ${protocolAddress}`);\n    }\n};\nexports.requireValidProtocol = requireValidProtocol;\n/**\n * Decodes an encoded string of token IDs into an array of individual token IDs using bigint for precise calculations.\n *\n * The encoded token IDs can be in the following formats:\n * 1. Single numbers: '123' => ['123']\n * 2. Comma-separated numbers: '1,2,3,4' => ['1', '2', '3', '4']\n * 3. Ranges of numbers: '5:8' => ['5', '6', '7', '8']\n * 4. Combinations of single numbers and ranges: '1,3:5,8' => ['1', '3', '4', '5', '8']\n * 5. Wildcard '*' (matches all token IDs): '*' => ['*']\n *\n * @param encodedTokenIds - The encoded string of token IDs to be decoded.\n * @returns An array of individual token IDs after decoding the input.\n *\n * @throws {Error} If the input is not correctly formatted or if bigint operations fail.\n *\n * @example\n * const encoded = '1,3:5,8';\n * const decoded = decodeTokenIds(encoded); // Output: ['1', '3', '4', '5', '8']\n *\n * @example\n * const encodedWildcard = '*';\n * const decodedWildcard = decodeTokenIds(encodedWildcard); // Output: ['*']\n *\n * @example\n * const emptyEncoded = '';\n * const decodedEmpty = decodeTokenIds(emptyEncoded); // Output: []\n */\nconst decodeTokenIds = (encodedTokenIds) => {\n    if (encodedTokenIds === \"*\") {\n        return [\"*\"];\n    }\n    const validFormatRegex = /^(\\d+(:\\d+)?)(,\\d+(:\\d+)?)*$/;\n    if (!validFormatRegex.test(encodedTokenIds)) {\n        throw new Error(\"Invalid input format. Expected a valid comma-separated list of numbers and ranges.\");\n    }\n    const ranges = encodedTokenIds.split(\",\");\n    const tokenIds = [];\n    for (const range of ranges) {\n        if (range.includes(\":\")) {\n            const [startStr, endStr] = range.split(\":\");\n            const start = BigInt(startStr);\n            const end = BigInt(endStr);\n            const diff = end - start + 1n;\n            if (diff <= 0) {\n                throw new Error(`Invalid range. End value: ${end} must be greater than or equal to the start value: ${start}.`);\n            }\n            for (let i = 0n; i < diff; i += 1n) {\n                tokenIds.push((start + i).toString());\n            }\n        }\n        else {\n            const tokenId = BigInt(range);\n            tokenIds.push(tokenId.toString());\n        }\n    }\n    return tokenIds;\n};\nexports.decodeTokenIds = decodeTokenIds;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/opensea-js/lib/utils/utils.js\n");

/***/ })

};
;