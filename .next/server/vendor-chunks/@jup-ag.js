"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@jup-ag";
exports.ids = ["vendor-chunks/@jup-ag"];
exports.modules = {

/***/ "(rsc)/./node_modules/@jup-ag/api/dist/index.mjs":
/*!*************************************************!*\
  !*** ./node_modules/@jup-ag/api/dist/index.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccountMetaFromJSON: () => (/* binding */ AccountMetaFromJSON),\n/* harmony export */   AccountMetaFromJSONTyped: () => (/* binding */ AccountMetaFromJSONTyped),\n/* harmony export */   AccountMetaToJSON: () => (/* binding */ AccountMetaToJSON),\n/* harmony export */   BASE_PATH: () => (/* binding */ BASE_PATH),\n/* harmony export */   BaseAPI: () => (/* binding */ BaseAPI),\n/* harmony export */   BlobApiResponse: () => (/* binding */ BlobApiResponse),\n/* harmony export */   COLLECTION_FORMATS: () => (/* binding */ COLLECTION_FORMATS),\n/* harmony export */   Configuration: () => (/* binding */ Configuration),\n/* harmony export */   DefaultConfig: () => (/* binding */ DefaultConfig),\n/* harmony export */   FetchError: () => (/* binding */ FetchError),\n/* harmony export */   IndexedRouteMapResponseFromJSON: () => (/* binding */ IndexedRouteMapResponseFromJSON),\n/* harmony export */   IndexedRouteMapResponseFromJSONTyped: () => (/* binding */ IndexedRouteMapResponseFromJSONTyped),\n/* harmony export */   IndexedRouteMapResponseToJSON: () => (/* binding */ IndexedRouteMapResponseToJSON),\n/* harmony export */   InstructionFromJSON: () => (/* binding */ InstructionFromJSON),\n/* harmony export */   InstructionFromJSONTyped: () => (/* binding */ InstructionFromJSONTyped),\n/* harmony export */   InstructionToJSON: () => (/* binding */ InstructionToJSON),\n/* harmony export */   JSONApiResponse: () => (/* binding */ JSONApiResponse),\n/* harmony export */   PlatformFeeFromJSON: () => (/* binding */ PlatformFeeFromJSON),\n/* harmony export */   PlatformFeeFromJSONTyped: () => (/* binding */ PlatformFeeFromJSONTyped),\n/* harmony export */   PlatformFeeToJSON: () => (/* binding */ PlatformFeeToJSON),\n/* harmony export */   QuoteGetSwapModeEnum: () => (/* binding */ QuoteGetSwapModeEnum),\n/* harmony export */   QuoteResponseFromJSON: () => (/* binding */ QuoteResponseFromJSON),\n/* harmony export */   QuoteResponseFromJSONTyped: () => (/* binding */ QuoteResponseFromJSONTyped),\n/* harmony export */   QuoteResponseToJSON: () => (/* binding */ QuoteResponseToJSON),\n/* harmony export */   RequiredError: () => (/* binding */ RequiredError),\n/* harmony export */   ResponseError: () => (/* binding */ ResponseError),\n/* harmony export */   RoutePlanStepFromJSON: () => (/* binding */ RoutePlanStepFromJSON),\n/* harmony export */   RoutePlanStepFromJSONTyped: () => (/* binding */ RoutePlanStepFromJSONTyped),\n/* harmony export */   RoutePlanStepToJSON: () => (/* binding */ RoutePlanStepToJSON),\n/* harmony export */   SwapApi: () => (/* binding */ SwapApi),\n/* harmony export */   SwapInfoFromJSON: () => (/* binding */ SwapInfoFromJSON),\n/* harmony export */   SwapInfoFromJSONTyped: () => (/* binding */ SwapInfoFromJSONTyped),\n/* harmony export */   SwapInfoToJSON: () => (/* binding */ SwapInfoToJSON),\n/* harmony export */   SwapInstructionsResponseFromJSON: () => (/* binding */ SwapInstructionsResponseFromJSON),\n/* harmony export */   SwapInstructionsResponseFromJSONTyped: () => (/* binding */ SwapInstructionsResponseFromJSONTyped),\n/* harmony export */   SwapInstructionsResponseToJSON: () => (/* binding */ SwapInstructionsResponseToJSON),\n/* harmony export */   SwapMode: () => (/* binding */ SwapMode),\n/* harmony export */   SwapModeFromJSON: () => (/* binding */ SwapModeFromJSON),\n/* harmony export */   SwapModeFromJSONTyped: () => (/* binding */ SwapModeFromJSONTyped),\n/* harmony export */   SwapModeToJSON: () => (/* binding */ SwapModeToJSON),\n/* harmony export */   SwapRequestFromJSON: () => (/* binding */ SwapRequestFromJSON),\n/* harmony export */   SwapRequestFromJSONTyped: () => (/* binding */ SwapRequestFromJSONTyped),\n/* harmony export */   SwapRequestPrioritizationFeeLamportsFromJSON: () => (/* binding */ SwapRequestPrioritizationFeeLamportsFromJSON),\n/* harmony export */   SwapRequestPrioritizationFeeLamportsFromJSONTyped: () => (/* binding */ SwapRequestPrioritizationFeeLamportsFromJSONTyped),\n/* harmony export */   SwapRequestPrioritizationFeeLamportsPriorityLevelWithMaxLamportsFromJSON: () => (/* binding */ SwapRequestPrioritizationFeeLamportsPriorityLevelWithMaxLamportsFromJSON),\n/* harmony export */   SwapRequestPrioritizationFeeLamportsPriorityLevelWithMaxLamportsFromJSONTyped: () => (/* binding */ SwapRequestPrioritizationFeeLamportsPriorityLevelWithMaxLamportsFromJSONTyped),\n/* harmony export */   SwapRequestPrioritizationFeeLamportsPriorityLevelWithMaxLamportsPriorityLevelEnum: () => (/* binding */ SwapRequestPrioritizationFeeLamportsPriorityLevelWithMaxLamportsPriorityLevelEnum),\n/* harmony export */   SwapRequestPrioritizationFeeLamportsPriorityLevelWithMaxLamportsToJSON: () => (/* binding */ SwapRequestPrioritizationFeeLamportsPriorityLevelWithMaxLamportsToJSON),\n/* harmony export */   SwapRequestPrioritizationFeeLamportsToJSON: () => (/* binding */ SwapRequestPrioritizationFeeLamportsToJSON),\n/* harmony export */   SwapRequestToJSON: () => (/* binding */ SwapRequestToJSON),\n/* harmony export */   SwapResponseFromJSON: () => (/* binding */ SwapResponseFromJSON),\n/* harmony export */   SwapResponseFromJSONTyped: () => (/* binding */ SwapResponseFromJSONTyped),\n/* harmony export */   SwapResponseToJSON: () => (/* binding */ SwapResponseToJSON),\n/* harmony export */   TextApiResponse: () => (/* binding */ TextApiResponse),\n/* harmony export */   VoidApiResponse: () => (/* binding */ VoidApiResponse),\n/* harmony export */   canConsumeForm: () => (/* binding */ canConsumeForm),\n/* harmony export */   createJupiterApiClient: () => (/* binding */ createJupiterApiClient),\n/* harmony export */   exists: () => (/* binding */ exists),\n/* harmony export */   instanceOfAccountMeta: () => (/* binding */ instanceOfAccountMeta),\n/* harmony export */   instanceOfIndexedRouteMapResponse: () => (/* binding */ instanceOfIndexedRouteMapResponse),\n/* harmony export */   instanceOfInstruction: () => (/* binding */ instanceOfInstruction),\n/* harmony export */   instanceOfPlatformFee: () => (/* binding */ instanceOfPlatformFee),\n/* harmony export */   instanceOfQuoteResponse: () => (/* binding */ instanceOfQuoteResponse),\n/* harmony export */   instanceOfRoutePlanStep: () => (/* binding */ instanceOfRoutePlanStep),\n/* harmony export */   instanceOfSwapInfo: () => (/* binding */ instanceOfSwapInfo),\n/* harmony export */   instanceOfSwapInstructionsResponse: () => (/* binding */ instanceOfSwapInstructionsResponse),\n/* harmony export */   instanceOfSwapRequest: () => (/* binding */ instanceOfSwapRequest),\n/* harmony export */   instanceOfSwapRequestPrioritizationFeeLamports: () => (/* binding */ instanceOfSwapRequestPrioritizationFeeLamports),\n/* harmony export */   instanceOfSwapRequestPrioritizationFeeLamportsPriorityLevelWithMaxLamports: () => (/* binding */ instanceOfSwapRequestPrioritizationFeeLamportsPriorityLevelWithMaxLamports),\n/* harmony export */   instanceOfSwapResponse: () => (/* binding */ instanceOfSwapResponse),\n/* harmony export */   mapValues: () => (/* binding */ mapValues),\n/* harmony export */   querystring: () => (/* binding */ querystring)\n/* harmony export */ });\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\n\n// generated/runtime.ts\nvar BASE_PATH = \"https://api.jup.ag\".replace(/\\/+$/, \"\");\nvar Configuration = class {\n  constructor(configuration = {}) {\n    this.configuration = configuration;\n  }\n  set config(configuration) {\n    this.configuration = configuration;\n  }\n  get basePath() {\n    return this.configuration.basePath != null ? this.configuration.basePath : BASE_PATH;\n  }\n  get fetchApi() {\n    return this.configuration.fetchApi;\n  }\n  get middleware() {\n    return this.configuration.middleware || [];\n  }\n  get queryParamsStringify() {\n    return this.configuration.queryParamsStringify || querystring;\n  }\n  get username() {\n    return this.configuration.username;\n  }\n  get password() {\n    return this.configuration.password;\n  }\n  get apiKey() {\n    const apiKey = this.configuration.apiKey;\n    if (apiKey) {\n      return typeof apiKey === \"function\" ? apiKey : () => apiKey;\n    }\n    return void 0;\n  }\n  get accessToken() {\n    const accessToken = this.configuration.accessToken;\n    if (accessToken) {\n      return typeof accessToken === \"function\" ? accessToken : () => __async(this, null, function* () {\n        return accessToken;\n      });\n    }\n    return void 0;\n  }\n  get headers() {\n    return this.configuration.headers;\n  }\n  get credentials() {\n    return this.configuration.credentials;\n  }\n};\nvar DefaultConfig = new Configuration();\nvar _BaseAPI = class _BaseAPI {\n  constructor(configuration = DefaultConfig) {\n    this.configuration = configuration;\n    this.fetchApi = (url, init) => __async(this, null, function* () {\n      let fetchParams = { url, init };\n      for (const middleware of this.middleware) {\n        if (middleware.pre) {\n          fetchParams = (yield middleware.pre(__spreadValues({\n            fetch: this.fetchApi\n          }, fetchParams))) || fetchParams;\n        }\n      }\n      let response = void 0;\n      try {\n        response = yield (this.configuration.fetchApi || fetch)(fetchParams.url, fetchParams.init);\n      } catch (e) {\n        for (const middleware of this.middleware) {\n          if (middleware.onError) {\n            response = (yield middleware.onError({\n              fetch: this.fetchApi,\n              url: fetchParams.url,\n              init: fetchParams.init,\n              error: e,\n              response: response ? response.clone() : void 0\n            })) || response;\n          }\n        }\n        if (response === void 0) {\n          if (e instanceof Error) {\n            throw new FetchError(e, \"The request failed and the interceptors did not return an alternative response\");\n          } else {\n            throw e;\n          }\n        }\n      }\n      for (const middleware of this.middleware) {\n        if (middleware.post) {\n          response = (yield middleware.post({\n            fetch: this.fetchApi,\n            url: fetchParams.url,\n            init: fetchParams.init,\n            response: response.clone()\n          })) || response;\n        }\n      }\n      return response;\n    });\n    this.middleware = configuration.middleware;\n  }\n  withMiddleware(...middlewares) {\n    const next = this.clone();\n    next.middleware = next.middleware.concat(...middlewares);\n    return next;\n  }\n  withPreMiddleware(...preMiddlewares) {\n    const middlewares = preMiddlewares.map((pre) => ({ pre }));\n    return this.withMiddleware(...middlewares);\n  }\n  withPostMiddleware(...postMiddlewares) {\n    const middlewares = postMiddlewares.map((post) => ({ post }));\n    return this.withMiddleware(...middlewares);\n  }\n  /**\n   * Check if the given MIME is a JSON MIME.\n   * JSON MIME examples:\n   *   application/json\n   *   application/json; charset=UTF8\n   *   APPLICATION/JSON\n   *   application/vnd.company+json\n   * @param mime - MIME (Multipurpose Internet Mail Extensions)\n   * @return True if the given MIME is JSON, false otherwise.\n   */\n  isJsonMime(mime) {\n    if (!mime) {\n      return false;\n    }\n    return _BaseAPI.jsonRegex.test(mime);\n  }\n  request(context, initOverrides) {\n    return __async(this, null, function* () {\n      const { url, init } = yield this.createFetchParams(context, initOverrides);\n      const response = yield this.fetchApi(url, init);\n      if (response && (response.status >= 200 && response.status < 300)) {\n        return response;\n      }\n      throw new ResponseError(response, \"Response returned an error code\");\n    });\n  }\n  createFetchParams(context, initOverrides) {\n    return __async(this, null, function* () {\n      let url = this.configuration.basePath + context.path;\n      if (context.query !== void 0 && Object.keys(context.query).length !== 0) {\n        url += \"?\" + this.configuration.queryParamsStringify(context.query);\n      }\n      const headers = Object.assign({}, this.configuration.headers, context.headers);\n      Object.keys(headers).forEach((key) => headers[key] === void 0 ? delete headers[key] : {});\n      const initOverrideFn = typeof initOverrides === \"function\" ? initOverrides : () => __async(this, null, function* () {\n        return initOverrides;\n      });\n      const initParams = {\n        method: context.method,\n        headers,\n        body: context.body,\n        credentials: this.configuration.credentials\n      };\n      const overriddenInit = __spreadValues(__spreadValues({}, initParams), yield initOverrideFn({\n        init: initParams,\n        context\n      }));\n      let body;\n      if (isFormData(overriddenInit.body) || overriddenInit.body instanceof URLSearchParams || isBlob(overriddenInit.body)) {\n        body = overriddenInit.body;\n      } else if (this.isJsonMime(headers[\"Content-Type\"])) {\n        body = JSON.stringify(overriddenInit.body);\n      } else {\n        body = overriddenInit.body;\n      }\n      const init = __spreadProps(__spreadValues({}, overriddenInit), {\n        body\n      });\n      return { url, init };\n    });\n  }\n  /**\n   * Create a shallow clone of `this` by constructing a new instance\n   * and then shallow cloning data members.\n   */\n  clone() {\n    const constructor = this.constructor;\n    const next = new constructor(this.configuration);\n    next.middleware = this.middleware.slice();\n    return next;\n  }\n};\n_BaseAPI.jsonRegex = new RegExp(\"^(:?application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(:?;.*)?$\", \"i\");\nvar BaseAPI = _BaseAPI;\nfunction isBlob(value) {\n  return typeof Blob !== \"undefined\" && value instanceof Blob;\n}\nfunction isFormData(value) {\n  return typeof FormData !== \"undefined\" && value instanceof FormData;\n}\nvar ResponseError = class extends Error {\n  constructor(response, msg) {\n    super(msg);\n    this.response = response;\n    this.name = \"ResponseError\";\n  }\n};\nvar FetchError = class extends Error {\n  constructor(cause, msg) {\n    super(msg);\n    this.cause = cause;\n    this.name = \"FetchError\";\n  }\n};\nvar RequiredError = class extends Error {\n  constructor(field, msg) {\n    super(msg);\n    this.field = field;\n    this.name = \"RequiredError\";\n  }\n};\nvar COLLECTION_FORMATS = {\n  csv: \",\",\n  ssv: \" \",\n  tsv: \"\t\",\n  pipes: \"|\"\n};\nfunction exists(json, key) {\n  const value = json[key];\n  return value !== null && value !== void 0;\n}\nfunction querystring(params, prefix = \"\") {\n  return Object.keys(params).map((key) => querystringSingleKey(key, params[key], prefix)).filter((part) => part.length > 0).join(\"&\");\n}\nfunction querystringSingleKey(key, value, keyPrefix = \"\") {\n  const fullKey = keyPrefix + (keyPrefix.length ? `[${key}]` : key);\n  if (value instanceof Array) {\n    const multiValue = value.map((singleValue) => encodeURIComponent(String(singleValue))).join(`&${encodeURIComponent(fullKey)}=`);\n    return `${encodeURIComponent(fullKey)}=${multiValue}`;\n  }\n  if (value instanceof Set) {\n    const valueAsArray = Array.from(value);\n    return querystringSingleKey(key, valueAsArray, keyPrefix);\n  }\n  if (value instanceof Date) {\n    return `${encodeURIComponent(fullKey)}=${encodeURIComponent(value.toISOString())}`;\n  }\n  if (value instanceof Object) {\n    return querystring(value, fullKey);\n  }\n  return `${encodeURIComponent(fullKey)}=${encodeURIComponent(String(value))}`;\n}\nfunction mapValues(data, fn) {\n  return Object.keys(data).reduce(\n    (acc, key) => __spreadProps(__spreadValues({}, acc), { [key]: fn(data[key]) }),\n    {}\n  );\n}\nfunction canConsumeForm(consumes) {\n  for (const consume of consumes) {\n    if (\"multipart/form-data\" === consume.contentType) {\n      return true;\n    }\n  }\n  return false;\n}\nvar JSONApiResponse = class {\n  constructor(raw, transformer = (jsonValue) => jsonValue) {\n    this.raw = raw;\n    this.transformer = transformer;\n  }\n  value() {\n    return __async(this, null, function* () {\n      return this.transformer(yield this.raw.json());\n    });\n  }\n};\nvar VoidApiResponse = class {\n  constructor(raw) {\n    this.raw = raw;\n  }\n  value() {\n    return __async(this, null, function* () {\n      return void 0;\n    });\n  }\n};\nvar BlobApiResponse = class {\n  constructor(raw) {\n    this.raw = raw;\n  }\n  value() {\n    return __async(this, null, function* () {\n      return yield this.raw.blob();\n    });\n  }\n};\nvar TextApiResponse = class {\n  constructor(raw) {\n    this.raw = raw;\n  }\n  value() {\n    return __async(this, null, function* () {\n      return yield this.raw.text();\n    });\n  }\n};\n\n// generated/models/AccountMeta.ts\nfunction instanceOfAccountMeta(value) {\n  let isInstance = true;\n  isInstance = isInstance && \"pubkey\" in value;\n  isInstance = isInstance && \"isSigner\" in value;\n  isInstance = isInstance && \"isWritable\" in value;\n  return isInstance;\n}\nfunction AccountMetaFromJSON(json) {\n  return AccountMetaFromJSONTyped(json, false);\n}\nfunction AccountMetaFromJSONTyped(json, ignoreDiscriminator) {\n  if (json === void 0 || json === null) {\n    return json;\n  }\n  return {\n    \"pubkey\": json[\"pubkey\"],\n    \"isSigner\": json[\"isSigner\"],\n    \"isWritable\": json[\"isWritable\"]\n  };\n}\nfunction AccountMetaToJSON(value) {\n  if (value === void 0) {\n    return void 0;\n  }\n  if (value === null) {\n    return null;\n  }\n  return {\n    \"pubkey\": value.pubkey,\n    \"isSigner\": value.isSigner,\n    \"isWritable\": value.isWritable\n  };\n}\n\n// generated/models/IndexedRouteMapResponse.ts\nfunction instanceOfIndexedRouteMapResponse(value) {\n  let isInstance = true;\n  isInstance = isInstance && \"mintKeys\" in value;\n  isInstance = isInstance && \"indexedRouteMap\" in value;\n  return isInstance;\n}\nfunction IndexedRouteMapResponseFromJSON(json) {\n  return IndexedRouteMapResponseFromJSONTyped(json, false);\n}\nfunction IndexedRouteMapResponseFromJSONTyped(json, ignoreDiscriminator) {\n  if (json === void 0 || json === null) {\n    return json;\n  }\n  return {\n    \"mintKeys\": json[\"mintKeys\"],\n    \"indexedRouteMap\": json[\"indexedRouteMap\"]\n  };\n}\nfunction IndexedRouteMapResponseToJSON(value) {\n  if (value === void 0) {\n    return void 0;\n  }\n  if (value === null) {\n    return null;\n  }\n  return {\n    \"mintKeys\": value.mintKeys,\n    \"indexedRouteMap\": value.indexedRouteMap\n  };\n}\n\n// generated/models/Instruction.ts\nfunction instanceOfInstruction(value) {\n  let isInstance = true;\n  isInstance = isInstance && \"programId\" in value;\n  isInstance = isInstance && \"accounts\" in value;\n  isInstance = isInstance && \"data\" in value;\n  return isInstance;\n}\nfunction InstructionFromJSON(json) {\n  return InstructionFromJSONTyped(json, false);\n}\nfunction InstructionFromJSONTyped(json, ignoreDiscriminator) {\n  if (json === void 0 || json === null) {\n    return json;\n  }\n  return {\n    \"programId\": json[\"programId\"],\n    \"accounts\": json[\"accounts\"].map(AccountMetaFromJSON),\n    \"data\": json[\"data\"]\n  };\n}\nfunction InstructionToJSON(value) {\n  if (value === void 0) {\n    return void 0;\n  }\n  if (value === null) {\n    return null;\n  }\n  return {\n    \"programId\": value.programId,\n    \"accounts\": value.accounts.map(AccountMetaToJSON),\n    \"data\": value.data\n  };\n}\n\n// generated/models/PlatformFee.ts\nfunction instanceOfPlatformFee(value) {\n  let isInstance = true;\n  return isInstance;\n}\nfunction PlatformFeeFromJSON(json) {\n  return PlatformFeeFromJSONTyped(json, false);\n}\nfunction PlatformFeeFromJSONTyped(json, ignoreDiscriminator) {\n  if (json === void 0 || json === null) {\n    return json;\n  }\n  return {\n    \"amount\": !exists(json, \"amount\") ? void 0 : json[\"amount\"],\n    \"feeBps\": !exists(json, \"feeBps\") ? void 0 : json[\"feeBps\"]\n  };\n}\nfunction PlatformFeeToJSON(value) {\n  if (value === void 0) {\n    return void 0;\n  }\n  if (value === null) {\n    return null;\n  }\n  return {\n    \"amount\": value.amount,\n    \"feeBps\": value.feeBps\n  };\n}\n\n// generated/models/SwapInfo.ts\nfunction instanceOfSwapInfo(value) {\n  let isInstance = true;\n  isInstance = isInstance && \"ammKey\" in value;\n  isInstance = isInstance && \"inputMint\" in value;\n  isInstance = isInstance && \"outputMint\" in value;\n  isInstance = isInstance && \"inAmount\" in value;\n  isInstance = isInstance && \"outAmount\" in value;\n  isInstance = isInstance && \"feeAmount\" in value;\n  isInstance = isInstance && \"feeMint\" in value;\n  return isInstance;\n}\nfunction SwapInfoFromJSON(json) {\n  return SwapInfoFromJSONTyped(json, false);\n}\nfunction SwapInfoFromJSONTyped(json, ignoreDiscriminator) {\n  if (json === void 0 || json === null) {\n    return json;\n  }\n  return {\n    \"ammKey\": json[\"ammKey\"],\n    \"label\": !exists(json, \"label\") ? void 0 : json[\"label\"],\n    \"inputMint\": json[\"inputMint\"],\n    \"outputMint\": json[\"outputMint\"],\n    \"inAmount\": json[\"inAmount\"],\n    \"outAmount\": json[\"outAmount\"],\n    \"feeAmount\": json[\"feeAmount\"],\n    \"feeMint\": json[\"feeMint\"]\n  };\n}\nfunction SwapInfoToJSON(value) {\n  if (value === void 0) {\n    return void 0;\n  }\n  if (value === null) {\n    return null;\n  }\n  return {\n    \"ammKey\": value.ammKey,\n    \"label\": value.label,\n    \"inputMint\": value.inputMint,\n    \"outputMint\": value.outputMint,\n    \"inAmount\": value.inAmount,\n    \"outAmount\": value.outAmount,\n    \"feeAmount\": value.feeAmount,\n    \"feeMint\": value.feeMint\n  };\n}\n\n// generated/models/RoutePlanStep.ts\nfunction instanceOfRoutePlanStep(value) {\n  let isInstance = true;\n  isInstance = isInstance && \"swapInfo\" in value;\n  isInstance = isInstance && \"percent\" in value;\n  return isInstance;\n}\nfunction RoutePlanStepFromJSON(json) {\n  return RoutePlanStepFromJSONTyped(json, false);\n}\nfunction RoutePlanStepFromJSONTyped(json, ignoreDiscriminator) {\n  if (json === void 0 || json === null) {\n    return json;\n  }\n  return {\n    \"swapInfo\": SwapInfoFromJSON(json[\"swapInfo\"]),\n    \"percent\": json[\"percent\"]\n  };\n}\nfunction RoutePlanStepToJSON(value) {\n  if (value === void 0) {\n    return void 0;\n  }\n  if (value === null) {\n    return null;\n  }\n  return {\n    \"swapInfo\": SwapInfoToJSON(value.swapInfo),\n    \"percent\": value.percent\n  };\n}\n\n// generated/models/SwapMode.ts\nvar SwapMode = {\n  ExactIn: \"ExactIn\",\n  ExactOut: \"ExactOut\"\n};\nfunction SwapModeFromJSON(json) {\n  return SwapModeFromJSONTyped(json, false);\n}\nfunction SwapModeFromJSONTyped(json, ignoreDiscriminator) {\n  return json;\n}\nfunction SwapModeToJSON(value) {\n  return value;\n}\n\n// generated/models/QuoteResponse.ts\nfunction instanceOfQuoteResponse(value) {\n  let isInstance = true;\n  isInstance = isInstance && \"inputMint\" in value;\n  isInstance = isInstance && \"inAmount\" in value;\n  isInstance = isInstance && \"outputMint\" in value;\n  isInstance = isInstance && \"outAmount\" in value;\n  isInstance = isInstance && \"otherAmountThreshold\" in value;\n  isInstance = isInstance && \"swapMode\" in value;\n  isInstance = isInstance && \"slippageBps\" in value;\n  isInstance = isInstance && \"priceImpactPct\" in value;\n  isInstance = isInstance && \"routePlan\" in value;\n  return isInstance;\n}\nfunction QuoteResponseFromJSON(json) {\n  return QuoteResponseFromJSONTyped(json, false);\n}\nfunction QuoteResponseFromJSONTyped(json, ignoreDiscriminator) {\n  if (json === void 0 || json === null) {\n    return json;\n  }\n  return {\n    \"inputMint\": json[\"inputMint\"],\n    \"inAmount\": json[\"inAmount\"],\n    \"outputMint\": json[\"outputMint\"],\n    \"outAmount\": json[\"outAmount\"],\n    \"otherAmountThreshold\": json[\"otherAmountThreshold\"],\n    \"swapMode\": SwapModeFromJSON(json[\"swapMode\"]),\n    \"slippageBps\": json[\"slippageBps\"],\n    \"platformFee\": !exists(json, \"platformFee\") ? void 0 : PlatformFeeFromJSON(json[\"platformFee\"]),\n    \"priceImpactPct\": json[\"priceImpactPct\"],\n    \"routePlan\": json[\"routePlan\"].map(RoutePlanStepFromJSON),\n    \"contextSlot\": !exists(json, \"contextSlot\") ? void 0 : json[\"contextSlot\"],\n    \"timeTaken\": !exists(json, \"timeTaken\") ? void 0 : json[\"timeTaken\"]\n  };\n}\nfunction QuoteResponseToJSON(value) {\n  if (value === void 0) {\n    return void 0;\n  }\n  if (value === null) {\n    return null;\n  }\n  return {\n    \"inputMint\": value.inputMint,\n    \"inAmount\": value.inAmount,\n    \"outputMint\": value.outputMint,\n    \"outAmount\": value.outAmount,\n    \"otherAmountThreshold\": value.otherAmountThreshold,\n    \"swapMode\": SwapModeToJSON(value.swapMode),\n    \"slippageBps\": value.slippageBps,\n    \"platformFee\": PlatformFeeToJSON(value.platformFee),\n    \"priceImpactPct\": value.priceImpactPct,\n    \"routePlan\": value.routePlan.map(RoutePlanStepToJSON),\n    \"contextSlot\": value.contextSlot,\n    \"timeTaken\": value.timeTaken\n  };\n}\n\n// generated/models/SwapInstructionsResponse.ts\nfunction instanceOfSwapInstructionsResponse(value) {\n  let isInstance = true;\n  isInstance = isInstance && \"computeBudgetInstructions\" in value;\n  isInstance = isInstance && \"setupInstructions\" in value;\n  isInstance = isInstance && \"swapInstruction\" in value;\n  isInstance = isInstance && \"addressLookupTableAddresses\" in value;\n  return isInstance;\n}\nfunction SwapInstructionsResponseFromJSON(json) {\n  return SwapInstructionsResponseFromJSONTyped(json, false);\n}\nfunction SwapInstructionsResponseFromJSONTyped(json, ignoreDiscriminator) {\n  if (json === void 0 || json === null) {\n    return json;\n  }\n  return {\n    \"otherInstructions\": !exists(json, \"otherInstructions\") ? void 0 : json[\"otherInstructions\"].map(InstructionFromJSON),\n    \"computeBudgetInstructions\": json[\"computeBudgetInstructions\"].map(InstructionFromJSON),\n    \"setupInstructions\": json[\"setupInstructions\"].map(InstructionFromJSON),\n    \"swapInstruction\": InstructionFromJSON(json[\"swapInstruction\"]),\n    \"cleanupInstruction\": !exists(json, \"cleanupInstruction\") ? void 0 : InstructionFromJSON(json[\"cleanupInstruction\"]),\n    \"addressLookupTableAddresses\": json[\"addressLookupTableAddresses\"]\n  };\n}\nfunction SwapInstructionsResponseToJSON(value) {\n  if (value === void 0) {\n    return void 0;\n  }\n  if (value === null) {\n    return null;\n  }\n  return {\n    \"otherInstructions\": value.otherInstructions === void 0 ? void 0 : value.otherInstructions.map(InstructionToJSON),\n    \"computeBudgetInstructions\": value.computeBudgetInstructions.map(InstructionToJSON),\n    \"setupInstructions\": value.setupInstructions.map(InstructionToJSON),\n    \"swapInstruction\": InstructionToJSON(value.swapInstruction),\n    \"cleanupInstruction\": InstructionToJSON(value.cleanupInstruction),\n    \"addressLookupTableAddresses\": value.addressLookupTableAddresses\n  };\n}\n\n// generated/models/SwapRequestPrioritizationFeeLamportsPriorityLevelWithMaxLamports.ts\nvar SwapRequestPrioritizationFeeLamportsPriorityLevelWithMaxLamportsPriorityLevelEnum = {\n  Medium: \"medium\",\n  High: \"high\",\n  VeryHigh: \"veryHigh\"\n};\nfunction instanceOfSwapRequestPrioritizationFeeLamportsPriorityLevelWithMaxLamports(value) {\n  let isInstance = true;\n  return isInstance;\n}\nfunction SwapRequestPrioritizationFeeLamportsPriorityLevelWithMaxLamportsFromJSON(json) {\n  return SwapRequestPrioritizationFeeLamportsPriorityLevelWithMaxLamportsFromJSONTyped(json, false);\n}\nfunction SwapRequestPrioritizationFeeLamportsPriorityLevelWithMaxLamportsFromJSONTyped(json, ignoreDiscriminator) {\n  if (json === void 0 || json === null) {\n    return json;\n  }\n  return {\n    \"priorityLevel\": !exists(json, \"priorityLevel\") ? void 0 : json[\"priorityLevel\"],\n    \"maxLamports\": !exists(json, \"maxLamports\") ? void 0 : json[\"maxLamports\"]\n  };\n}\nfunction SwapRequestPrioritizationFeeLamportsPriorityLevelWithMaxLamportsToJSON(value) {\n  if (value === void 0) {\n    return void 0;\n  }\n  if (value === null) {\n    return null;\n  }\n  return {\n    \"priorityLevel\": value.priorityLevel,\n    \"maxLamports\": value.maxLamports\n  };\n}\n\n// generated/models/SwapRequestPrioritizationFeeLamports.ts\nfunction instanceOfSwapRequestPrioritizationFeeLamports(value) {\n  let isInstance = true;\n  return isInstance;\n}\nfunction SwapRequestPrioritizationFeeLamportsFromJSON(json) {\n  return SwapRequestPrioritizationFeeLamportsFromJSONTyped(json, false);\n}\nfunction SwapRequestPrioritizationFeeLamportsFromJSONTyped(json, ignoreDiscriminator) {\n  if (json === void 0 || json === null) {\n    return json;\n  }\n  return {\n    \"priorityLevelWithMaxLamports\": !exists(json, \"priorityLevelWithMaxLamports\") ? void 0 : SwapRequestPrioritizationFeeLamportsPriorityLevelWithMaxLamportsFromJSON(json[\"priorityLevelWithMaxLamports\"]),\n    \"jitoTipLamports\": !exists(json, \"jitoTipLamports\") ? void 0 : json[\"jitoTipLamports\"]\n  };\n}\nfunction SwapRequestPrioritizationFeeLamportsToJSON(value) {\n  if (value === void 0) {\n    return void 0;\n  }\n  if (value === null) {\n    return null;\n  }\n  return {\n    \"priorityLevelWithMaxLamports\": SwapRequestPrioritizationFeeLamportsPriorityLevelWithMaxLamportsToJSON(value.priorityLevelWithMaxLamports),\n    \"jitoTipLamports\": value.jitoTipLamports\n  };\n}\n\n// generated/models/SwapRequest.ts\nfunction instanceOfSwapRequest(value) {\n  let isInstance = true;\n  isInstance = isInstance && \"userPublicKey\" in value;\n  isInstance = isInstance && \"quoteResponse\" in value;\n  return isInstance;\n}\nfunction SwapRequestFromJSON(json) {\n  return SwapRequestFromJSONTyped(json, false);\n}\nfunction SwapRequestFromJSONTyped(json, ignoreDiscriminator) {\n  if (json === void 0 || json === null) {\n    return json;\n  }\n  return {\n    \"userPublicKey\": json[\"userPublicKey\"],\n    \"wrapAndUnwrapSol\": !exists(json, \"wrapAndUnwrapSol\") ? void 0 : json[\"wrapAndUnwrapSol\"],\n    \"useSharedAccounts\": !exists(json, \"useSharedAccounts\") ? void 0 : json[\"useSharedAccounts\"],\n    \"feeAccount\": !exists(json, \"feeAccount\") ? void 0 : json[\"feeAccount\"],\n    \"trackingAccount\": !exists(json, \"trackingAccount\") ? void 0 : json[\"trackingAccount\"],\n    \"prioritizationFeeLamports\": !exists(json, \"prioritizationFeeLamports\") ? void 0 : SwapRequestPrioritizationFeeLamportsFromJSON(json[\"prioritizationFeeLamports\"]),\n    \"asLegacyTransaction\": !exists(json, \"asLegacyTransaction\") ? void 0 : json[\"asLegacyTransaction\"],\n    \"destinationTokenAccount\": !exists(json, \"destinationTokenAccount\") ? void 0 : json[\"destinationTokenAccount\"],\n    \"dynamicComputeUnitLimit\": !exists(json, \"dynamicComputeUnitLimit\") ? void 0 : json[\"dynamicComputeUnitLimit\"],\n    \"skipUserAccountsRpcCalls\": !exists(json, \"skipUserAccountsRpcCalls\") ? void 0 : json[\"skipUserAccountsRpcCalls\"],\n    \"dynamicSlippage\": !exists(json, \"dynamicSlippage\") ? void 0 : json[\"dynamicSlippage\"],\n    \"computeUnitPriceMicroLamports\": !exists(json, \"computeUnitPriceMicroLamports\") ? void 0 : json[\"computeUnitPriceMicroLamports\"],\n    \"blockhashSlotsToExpiry\": !exists(json, \"blockhashSlotsToExpiry\") ? void 0 : json[\"blockhashSlotsToExpiry\"],\n    \"quoteResponse\": QuoteResponseFromJSON(json[\"quoteResponse\"])\n  };\n}\nfunction SwapRequestToJSON(value) {\n  if (value === void 0) {\n    return void 0;\n  }\n  if (value === null) {\n    return null;\n  }\n  return {\n    \"userPublicKey\": value.userPublicKey,\n    \"wrapAndUnwrapSol\": value.wrapAndUnwrapSol,\n    \"useSharedAccounts\": value.useSharedAccounts,\n    \"feeAccount\": value.feeAccount,\n    \"trackingAccount\": value.trackingAccount,\n    \"prioritizationFeeLamports\": SwapRequestPrioritizationFeeLamportsToJSON(value.prioritizationFeeLamports),\n    \"asLegacyTransaction\": value.asLegacyTransaction,\n    \"destinationTokenAccount\": value.destinationTokenAccount,\n    \"dynamicComputeUnitLimit\": value.dynamicComputeUnitLimit,\n    \"skipUserAccountsRpcCalls\": value.skipUserAccountsRpcCalls,\n    \"dynamicSlippage\": value.dynamicSlippage,\n    \"computeUnitPriceMicroLamports\": value.computeUnitPriceMicroLamports,\n    \"blockhashSlotsToExpiry\": value.blockhashSlotsToExpiry,\n    \"quoteResponse\": QuoteResponseToJSON(value.quoteResponse)\n  };\n}\n\n// generated/models/SwapResponse.ts\nfunction instanceOfSwapResponse(value) {\n  let isInstance = true;\n  isInstance = isInstance && \"swapTransaction\" in value;\n  isInstance = isInstance && \"lastValidBlockHeight\" in value;\n  return isInstance;\n}\nfunction SwapResponseFromJSON(json) {\n  return SwapResponseFromJSONTyped(json, false);\n}\nfunction SwapResponseFromJSONTyped(json, ignoreDiscriminator) {\n  if (json === void 0 || json === null) {\n    return json;\n  }\n  return {\n    \"swapTransaction\": json[\"swapTransaction\"],\n    \"lastValidBlockHeight\": json[\"lastValidBlockHeight\"],\n    \"prioritizationFeeLamports\": !exists(json, \"prioritizationFeeLamports\") ? void 0 : json[\"prioritizationFeeLamports\"]\n  };\n}\nfunction SwapResponseToJSON(value) {\n  if (value === void 0) {\n    return void 0;\n  }\n  if (value === null) {\n    return null;\n  }\n  return {\n    \"swapTransaction\": value.swapTransaction,\n    \"lastValidBlockHeight\": value.lastValidBlockHeight,\n    \"prioritizationFeeLamports\": value.prioritizationFeeLamports\n  };\n}\n\n// generated/apis/SwapApi.ts\nvar SwapApi = class extends BaseAPI {\n  /**\n   * Returns a hash, which key is the program id and value is the label. This is used to help map error from transaction by identifying the fault program id. This can be used in conjunction with the `excludeDexes` or `dexes` parameter. \n   */\n  programIdToLabelGetRaw(initOverrides) {\n    return __async(this, null, function* () {\n      const queryParameters = {};\n      const headerParameters = {};\n      const response = yield this.request({\n        path: `/swap/v1/program-id-to-label`,\n        method: \"GET\",\n        headers: headerParameters,\n        query: queryParameters\n      }, initOverrides);\n      return new JSONApiResponse(response);\n    });\n  }\n  /**\n   * Returns a hash, which key is the program id and value is the label. This is used to help map error from transaction by identifying the fault program id. This can be used in conjunction with the `excludeDexes` or `dexes` parameter. \n   */\n  programIdToLabelGet(initOverrides) {\n    return __async(this, null, function* () {\n      const response = yield this.programIdToLabelGetRaw(initOverrides);\n      return yield response.value();\n    });\n  }\n  /**\n   * Request for a quote to be used in `POST /swap`  :::note Refer to https://station.jup.ag/docs/swap-api/get-quote for more information ::: \n   * quote\n   */\n  quoteGetRaw(requestParameters, initOverrides) {\n    return __async(this, null, function* () {\n      if (requestParameters.inputMint === null || requestParameters.inputMint === void 0) {\n        throw new RequiredError(\"inputMint\", \"Required parameter requestParameters.inputMint was null or undefined when calling quoteGet.\");\n      }\n      if (requestParameters.outputMint === null || requestParameters.outputMint === void 0) {\n        throw new RequiredError(\"outputMint\", \"Required parameter requestParameters.outputMint was null or undefined when calling quoteGet.\");\n      }\n      if (requestParameters.amount === null || requestParameters.amount === void 0) {\n        throw new RequiredError(\"amount\", \"Required parameter requestParameters.amount was null or undefined when calling quoteGet.\");\n      }\n      const queryParameters = {};\n      if (requestParameters.inputMint !== void 0) {\n        queryParameters[\"inputMint\"] = requestParameters.inputMint;\n      }\n      if (requestParameters.outputMint !== void 0) {\n        queryParameters[\"outputMint\"] = requestParameters.outputMint;\n      }\n      if (requestParameters.amount !== void 0) {\n        queryParameters[\"amount\"] = requestParameters.amount;\n      }\n      if (requestParameters.slippageBps !== void 0) {\n        queryParameters[\"slippageBps\"] = requestParameters.slippageBps;\n      }\n      if (requestParameters.swapMode !== void 0) {\n        queryParameters[\"swapMode\"] = requestParameters.swapMode;\n      }\n      if (requestParameters.dexes) {\n        queryParameters[\"dexes\"] = requestParameters.dexes;\n      }\n      if (requestParameters.excludeDexes) {\n        queryParameters[\"excludeDexes\"] = requestParameters.excludeDexes;\n      }\n      if (requestParameters.restrictIntermediateTokens !== void 0) {\n        queryParameters[\"restrictIntermediateTokens\"] = requestParameters.restrictIntermediateTokens;\n      }\n      if (requestParameters.onlyDirectRoutes !== void 0) {\n        queryParameters[\"onlyDirectRoutes\"] = requestParameters.onlyDirectRoutes;\n      }\n      if (requestParameters.asLegacyTransaction !== void 0) {\n        queryParameters[\"asLegacyTransaction\"] = requestParameters.asLegacyTransaction;\n      }\n      if (requestParameters.platformFeeBps !== void 0) {\n        queryParameters[\"platformFeeBps\"] = requestParameters.platformFeeBps;\n      }\n      if (requestParameters.maxAccounts !== void 0) {\n        queryParameters[\"maxAccounts\"] = requestParameters.maxAccounts;\n      }\n      if (requestParameters.dynamicSlippage !== void 0) {\n        queryParameters[\"dynamicSlippage\"] = requestParameters.dynamicSlippage;\n      }\n      const headerParameters = {};\n      const response = yield this.request({\n        path: `/swap/v1/quote`,\n        method: \"GET\",\n        headers: headerParameters,\n        query: queryParameters\n      }, initOverrides);\n      return new JSONApiResponse(response, (jsonValue) => QuoteResponseFromJSON(jsonValue));\n    });\n  }\n  /**\n   * Request for a quote to be used in `POST /swap`  :::note Refer to https://station.jup.ag/docs/swap-api/get-quote for more information ::: \n   * quote\n   */\n  quoteGet(requestParameters, initOverrides) {\n    return __async(this, null, function* () {\n      const response = yield this.quoteGetRaw(requestParameters, initOverrides);\n      return yield response.value();\n    });\n  }\n  /**\n   * Request for swap instructions that you can use from the quote you get from `/quote`  :::note Refer to https://station.jup.ag/docs/swap-api/build-swap-transaction#build-your-own-transaction-with-instructions for more information ::: \n   * swap-instructions\n   */\n  swapInstructionsPostRaw(requestParameters, initOverrides) {\n    return __async(this, null, function* () {\n      if (requestParameters.swapRequest === null || requestParameters.swapRequest === void 0) {\n        throw new RequiredError(\"swapRequest\", \"Required parameter requestParameters.swapRequest was null or undefined when calling swapInstructionsPost.\");\n      }\n      const queryParameters = {};\n      const headerParameters = {};\n      headerParameters[\"Content-Type\"] = \"application/json\";\n      const response = yield this.request({\n        path: `/swap/v1/swap-instructions`,\n        method: \"POST\",\n        headers: headerParameters,\n        query: queryParameters,\n        body: SwapRequestToJSON(requestParameters.swapRequest)\n      }, initOverrides);\n      return new JSONApiResponse(response, (jsonValue) => SwapInstructionsResponseFromJSON(jsonValue));\n    });\n  }\n  /**\n   * Request for swap instructions that you can use from the quote you get from `/quote`  :::note Refer to https://station.jup.ag/docs/swap-api/build-swap-transaction#build-your-own-transaction-with-instructions for more information ::: \n   * swap-instructions\n   */\n  swapInstructionsPost(requestParameters, initOverrides) {\n    return __async(this, null, function* () {\n      const response = yield this.swapInstructionsPostRaw(requestParameters, initOverrides);\n      return yield response.value();\n    });\n  }\n  /**\n   * Request for a base64-encoded unsigned swap transaction based on the `/quote` response  :::note Refer to https://station.jup.ag/docs/swap-api/build-swap-transaction for more information ::: \n   */\n  swapPostRaw(requestParameters, initOverrides) {\n    return __async(this, null, function* () {\n      if (requestParameters.swapRequest === null || requestParameters.swapRequest === void 0) {\n        throw new RequiredError(\"swapRequest\", \"Required parameter requestParameters.swapRequest was null or undefined when calling swapPost.\");\n      }\n      const queryParameters = {};\n      const headerParameters = {};\n      headerParameters[\"Content-Type\"] = \"application/json\";\n      const response = yield this.request({\n        path: `/swap/v1/swap`,\n        method: \"POST\",\n        headers: headerParameters,\n        query: queryParameters,\n        body: SwapRequestToJSON(requestParameters.swapRequest)\n      }, initOverrides);\n      return new JSONApiResponse(response, (jsonValue) => SwapResponseFromJSON(jsonValue));\n    });\n  }\n  /**\n   * Request for a base64-encoded unsigned swap transaction based on the `/quote` response  :::note Refer to https://station.jup.ag/docs/swap-api/build-swap-transaction for more information ::: \n   */\n  swapPost(requestParameters, initOverrides) {\n    return __async(this, null, function* () {\n      const response = yield this.swapPostRaw(requestParameters, initOverrides);\n      return yield response.value();\n    });\n  }\n};\nvar QuoteGetSwapModeEnum = {\n  ExactIn: \"ExactIn\",\n  ExactOut: \"ExactOut\"\n};\n\n// src/index.ts\nvar createJupiterApiClient = (config) => {\n  return new SwapApi(new Configuration(config));\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@jup-ag/api/dist/index.mjs\n");

/***/ })

};
;