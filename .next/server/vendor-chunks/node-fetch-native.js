/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/node-fetch-native";
exports.ids = ["vendor-chunks/node-fetch-native"];
exports.modules = {

/***/ "(rsc)/./node_modules/node-fetch-native/dist/chunks/multipart-parser.cjs":
/*!*************************************************************************!*\
  !*** ./node_modules/node-fetch-native/dist/chunks/multipart-parser.cjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("var N=Object.defineProperty;var c=(_,a)=>N(_,\"name\",{value:a,configurable:!0});__webpack_require__(/*! node:fs */ \"node:fs\"),__webpack_require__(/*! node:path */ \"node:path\");const node=__webpack_require__(/*! ../node.cjs */ \"(rsc)/./node_modules/node-fetch-native/dist/node.cjs\");__webpack_require__(/*! node:http */ \"node:http\"),__webpack_require__(/*! node:https */ \"node:https\"),__webpack_require__(/*! node:zlib */ \"node:zlib\"),__webpack_require__(/*! node:stream */ \"node:stream\"),__webpack_require__(/*! node:buffer */ \"node:buffer\"),__webpack_require__(/*! node:util */ \"node:util\"),__webpack_require__(/*! ../shared/node-fetch-native.DhEqb06g.cjs */ \"(rsc)/./node_modules/node-fetch-native/dist/shared/node-fetch-native.DhEqb06g.cjs\"),__webpack_require__(/*! node:url */ \"node:url\"),__webpack_require__(/*! node:net */ \"node:net\");let s=0;const S={START_BOUNDARY:s++,HEADER_FIELD_START:s++,HEADER_FIELD:s++,HEADER_VALUE_START:s++,HEADER_VALUE:s++,HEADER_VALUE_ALMOST_DONE:s++,HEADERS_ALMOST_DONE:s++,PART_DATA_START:s++,PART_DATA:s++,END:s++};let f=1;const F={PART_BOUNDARY:f,LAST_BOUNDARY:f*=2},LF=10,CR=13,SPACE=32,HYPHEN=45,COLON=58,A=97,Z=122,lower=c(_=>_|32,\"lower\"),noop=c(()=>{},\"noop\");class MultipartParser{static{c(this,\"MultipartParser\")}constructor(a){this.index=0,this.flags=0,this.onHeaderEnd=noop,this.onHeaderField=noop,this.onHeadersEnd=noop,this.onHeaderValue=noop,this.onPartBegin=noop,this.onPartData=noop,this.onPartEnd=noop,this.boundaryChars={},a=`\\r\n--`+a;const t=new Uint8Array(a.length);for(let n=0;n<a.length;n++)t[n]=a.charCodeAt(n),this.boundaryChars[t[n]]=!0;this.boundary=t,this.lookbehind=new Uint8Array(this.boundary.length+8),this.state=S.START_BOUNDARY}write(a){let t=0;const n=a.length;let E=this.index,{lookbehind:d,boundary:h,boundaryChars:H,index:e,state:o,flags:l}=this;const b=this.boundary.length,m=b-1,O=a.length;let r,P;const u=c(D=>{this[D+\"Mark\"]=t},\"mark\"),i=c(D=>{delete this[D+\"Mark\"]},\"clear\"),T=c((D,p,R,g)=>{(p===void 0||p!==R)&&this[D](g&&g.subarray(p,R))},\"callback\"),L=c((D,p)=>{const R=D+\"Mark\";R in this&&(p?(T(D,this[R],t,a),delete this[R]):(T(D,this[R],a.length,a),this[R]=0))},\"dataCallback\");for(t=0;t<n;t++)switch(r=a[t],o){case S.START_BOUNDARY:if(e===h.length-2){if(r===HYPHEN)l|=F.LAST_BOUNDARY;else if(r!==CR)return;e++;break}else if(e-1===h.length-2){if(l&F.LAST_BOUNDARY&&r===HYPHEN)o=S.END,l=0;else if(!(l&F.LAST_BOUNDARY)&&r===LF)e=0,T(\"onPartBegin\"),o=S.HEADER_FIELD_START;else return;break}r!==h[e+2]&&(e=-2),r===h[e+2]&&e++;break;case S.HEADER_FIELD_START:o=S.HEADER_FIELD,u(\"onHeaderField\"),e=0;case S.HEADER_FIELD:if(r===CR){i(\"onHeaderField\"),o=S.HEADERS_ALMOST_DONE;break}if(e++,r===HYPHEN)break;if(r===COLON){if(e===1)return;L(\"onHeaderField\",!0),o=S.HEADER_VALUE_START;break}if(P=lower(r),P<A||P>Z)return;break;case S.HEADER_VALUE_START:if(r===SPACE)break;u(\"onHeaderValue\"),o=S.HEADER_VALUE;case S.HEADER_VALUE:r===CR&&(L(\"onHeaderValue\",!0),T(\"onHeaderEnd\"),o=S.HEADER_VALUE_ALMOST_DONE);break;case S.HEADER_VALUE_ALMOST_DONE:if(r!==LF)return;o=S.HEADER_FIELD_START;break;case S.HEADERS_ALMOST_DONE:if(r!==LF)return;T(\"onHeadersEnd\"),o=S.PART_DATA_START;break;case S.PART_DATA_START:o=S.PART_DATA,u(\"onPartData\");case S.PART_DATA:if(E=e,e===0){for(t+=m;t<O&&!(a[t]in H);)t+=b;t-=m,r=a[t]}if(e<h.length)h[e]===r?(e===0&&L(\"onPartData\",!0),e++):e=0;else if(e===h.length)e++,r===CR?l|=F.PART_BOUNDARY:r===HYPHEN?l|=F.LAST_BOUNDARY:e=0;else if(e-1===h.length)if(l&F.PART_BOUNDARY){if(e=0,r===LF){l&=~F.PART_BOUNDARY,T(\"onPartEnd\"),T(\"onPartBegin\"),o=S.HEADER_FIELD_START;break}}else l&F.LAST_BOUNDARY&&r===HYPHEN?(T(\"onPartEnd\"),o=S.END,l=0):e=0;if(e>0)d[e-1]=r;else if(E>0){const D=new Uint8Array(d.buffer,d.byteOffset,d.byteLength);T(\"onPartData\",0,E,D),E=0,u(\"onPartData\"),t--}break;case S.END:break;default:throw new Error(`Unexpected state entered: ${o}`)}L(\"onHeaderField\"),L(\"onHeaderValue\"),L(\"onPartData\"),this.index=e,this.state=o,this.flags=l}end(){if(this.state===S.HEADER_FIELD_START&&this.index===0||this.state===S.PART_DATA&&this.index===this.boundary.length)this.onPartEnd();else if(this.state!==S.END)throw new Error(\"MultipartParser.end(): stream ended unexpectedly\")}}function _fileName(_){const a=_.match(/\\bfilename=(\"(.*?)\"|([^()<>@,;:\\\\\"/[\\]?={}\\s\\t]+))($|;\\s)/i);if(!a)return;const t=a[2]||a[3]||\"\";let n=t.slice(t.lastIndexOf(\"\\\\\")+1);return n=n.replace(/%22/g,'\"'),n=n.replace(/&#(\\d{4});/g,(E,d)=>String.fromCharCode(d)),n}c(_fileName,\"_fileName\");async function toFormData(_,a){if(!/multipart/i.test(a))throw new TypeError(\"Failed to fetch\");const t=a.match(/boundary=(?:\"([^\"]+)\"|([^;]+))/i);if(!t)throw new TypeError(\"no or bad content-type header, no multipart boundary\");const n=new MultipartParser(t[1]||t[2]);let E,d,h,H,e,o;const l=[],b=new node.FormData,m=c(i=>{h+=u.decode(i,{stream:!0})},\"onPartData\"),O=c(i=>{l.push(i)},\"appendToFile\"),r=c(()=>{const i=new node.File(l,o,{type:e});b.append(H,i)},\"appendFileToFormData\"),P=c(()=>{b.append(H,h)},\"appendEntryToFormData\"),u=new TextDecoder(\"utf-8\");u.decode(),n.onPartBegin=function(){n.onPartData=m,n.onPartEnd=P,E=\"\",d=\"\",h=\"\",H=\"\",e=\"\",o=null,l.length=0},n.onHeaderField=function(i){E+=u.decode(i,{stream:!0})},n.onHeaderValue=function(i){d+=u.decode(i,{stream:!0})},n.onHeaderEnd=function(){if(d+=u.decode(),E=E.toLowerCase(),E===\"content-disposition\"){const i=d.match(/\\bname=(\"([^\"]*)\"|([^()<>@,;:\\\\\"/[\\]?={}\\s\\t]+))/i);i&&(H=i[2]||i[3]||\"\"),o=_fileName(d),o&&(n.onPartData=O,n.onPartEnd=r)}else E===\"content-type\"&&(e=d);d=\"\",E=\"\"};for await(const i of _)n.write(i);return n.end(),b}c(toFormData,\"toFormData\"),exports.toFormData=toFormData;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch-native/dist/chunks/multipart-parser.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-fetch-native/dist/index.cjs":
/*!*******************************************************!*\
  !*** ./node_modules/node-fetch-native/dist/index.cjs ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", ({value:!0}));const node=__webpack_require__(/*! ./node.cjs */ \"(rsc)/./node_modules/node-fetch-native/dist/node.cjs\");__webpack_require__(/*! node:http */ \"node:http\"),__webpack_require__(/*! node:https */ \"node:https\"),__webpack_require__(/*! node:zlib */ \"node:zlib\"),__webpack_require__(/*! node:stream */ \"node:stream\"),__webpack_require__(/*! node:buffer */ \"node:buffer\"),__webpack_require__(/*! node:util */ \"node:util\"),__webpack_require__(/*! ./shared/node-fetch-native.DhEqb06g.cjs */ \"(rsc)/./node_modules/node-fetch-native/dist/shared/node-fetch-native.DhEqb06g.cjs\"),__webpack_require__(/*! node:url */ \"node:url\"),__webpack_require__(/*! node:net */ \"node:net\"),__webpack_require__(/*! node:fs */ \"node:fs\"),__webpack_require__(/*! node:path */ \"node:path\");const o=!!globalThis.process?.env?.FORCE_NODE_FETCH,fetch=!o&&globalThis.fetch||node.fetch,Blob=!o&&globalThis.Blob||node.Blob,File=!o&&globalThis.File||node.File,FormData=!o&&globalThis.FormData||node.FormData,Headers=!o&&globalThis.Headers||node.Headers,Request=!o&&globalThis.Request||node.Request,Response=!o&&globalThis.Response||node.Response,AbortController=!o&&globalThis.AbortController||node.AbortController;exports.AbortError=node.AbortError,exports.FetchError=node.FetchError,exports.blobFrom=node.blobFrom,exports.blobFromSync=node.blobFromSync,exports.fileFrom=node.fileFrom,exports.fileFromSync=node.fileFromSync,exports.isRedirect=node.isRedirect,exports.AbortController=AbortController,exports.Blob=Blob,exports.File=File,exports.FormData=FormData,exports.Headers=Headers,exports.Request=Request,exports.Response=Response,exports[\"default\"]=fetch,exports.fetch=fetch;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC1uYXRpdmUvZGlzdC9pbmRleC5janMiLCJtYXBwaW5ncyI6IkFBQWEsOENBQTJDLENBQUMsU0FBUyxFQUFDLENBQUMsV0FBVyxtQkFBTyxDQUFDLHdFQUFZLEVBQUUsbUJBQU8sQ0FBQyw0QkFBVyxFQUFFLG1CQUFPLENBQUMsOEJBQVksRUFBRSxtQkFBTyxDQUFDLDRCQUFXLEVBQUUsbUJBQU8sQ0FBQyxnQ0FBYSxFQUFFLG1CQUFPLENBQUMsZ0NBQWEsRUFBRSxtQkFBTyxDQUFDLDRCQUFXLEVBQUUsbUJBQU8sQ0FBQyxrSUFBeUMsRUFBRSxtQkFBTyxDQUFDLDBCQUFVLEVBQUUsbUJBQU8sQ0FBQywwQkFBVSxFQUFFLG1CQUFPLENBQUMsd0JBQVMsRUFBRSxtQkFBTyxDQUFDLDRCQUFXLEVBQUUsa2FBQWthLGtCQUFrQixpQkFBaUIsa0JBQWtCLGlCQUFpQixnQkFBZ0IsZUFBZSxvQkFBb0IsbUJBQW1CLGdCQUFnQixlQUFlLG9CQUFvQixtQkFBbUIsa0JBQWtCLGlCQUFpQix1QkFBdUIsaUJBQWlCLFlBQVksTUFBTSxZQUFZLE1BQU0sZ0JBQWdCLFVBQVUsZUFBZSxTQUFTLGVBQWUsU0FBUyxnQkFBZ0IsVUFBVSxrQkFBZSxPQUFPLGFBQWEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZHAtdGVzdC1hZ2VudC8uL25vZGVfbW9kdWxlcy9ub2RlLWZldGNoLW5hdGl2ZS9kaXN0L2luZGV4LmNqcz80NzRjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2NvbnN0IG5vZGU9cmVxdWlyZShcIi4vbm9kZS5janNcIik7cmVxdWlyZShcIm5vZGU6aHR0cFwiKSxyZXF1aXJlKFwibm9kZTpodHRwc1wiKSxyZXF1aXJlKFwibm9kZTp6bGliXCIpLHJlcXVpcmUoXCJub2RlOnN0cmVhbVwiKSxyZXF1aXJlKFwibm9kZTpidWZmZXJcIikscmVxdWlyZShcIm5vZGU6dXRpbFwiKSxyZXF1aXJlKFwiLi9zaGFyZWQvbm9kZS1mZXRjaC1uYXRpdmUuRGhFcWIwNmcuY2pzXCIpLHJlcXVpcmUoXCJub2RlOnVybFwiKSxyZXF1aXJlKFwibm9kZTpuZXRcIikscmVxdWlyZShcIm5vZGU6ZnNcIikscmVxdWlyZShcIm5vZGU6cGF0aFwiKTtjb25zdCBvPSEhZ2xvYmFsVGhpcy5wcm9jZXNzPy5lbnY/LkZPUkNFX05PREVfRkVUQ0gsZmV0Y2g9IW8mJmdsb2JhbFRoaXMuZmV0Y2h8fG5vZGUuZmV0Y2gsQmxvYj0hbyYmZ2xvYmFsVGhpcy5CbG9ifHxub2RlLkJsb2IsRmlsZT0hbyYmZ2xvYmFsVGhpcy5GaWxlfHxub2RlLkZpbGUsRm9ybURhdGE9IW8mJmdsb2JhbFRoaXMuRm9ybURhdGF8fG5vZGUuRm9ybURhdGEsSGVhZGVycz0hbyYmZ2xvYmFsVGhpcy5IZWFkZXJzfHxub2RlLkhlYWRlcnMsUmVxdWVzdD0hbyYmZ2xvYmFsVGhpcy5SZXF1ZXN0fHxub2RlLlJlcXVlc3QsUmVzcG9uc2U9IW8mJmdsb2JhbFRoaXMuUmVzcG9uc2V8fG5vZGUuUmVzcG9uc2UsQWJvcnRDb250cm9sbGVyPSFvJiZnbG9iYWxUaGlzLkFib3J0Q29udHJvbGxlcnx8bm9kZS5BYm9ydENvbnRyb2xsZXI7ZXhwb3J0cy5BYm9ydEVycm9yPW5vZGUuQWJvcnRFcnJvcixleHBvcnRzLkZldGNoRXJyb3I9bm9kZS5GZXRjaEVycm9yLGV4cG9ydHMuYmxvYkZyb209bm9kZS5ibG9iRnJvbSxleHBvcnRzLmJsb2JGcm9tU3luYz1ub2RlLmJsb2JGcm9tU3luYyxleHBvcnRzLmZpbGVGcm9tPW5vZGUuZmlsZUZyb20sZXhwb3J0cy5maWxlRnJvbVN5bmM9bm9kZS5maWxlRnJvbVN5bmMsZXhwb3J0cy5pc1JlZGlyZWN0PW5vZGUuaXNSZWRpcmVjdCxleHBvcnRzLkFib3J0Q29udHJvbGxlcj1BYm9ydENvbnRyb2xsZXIsZXhwb3J0cy5CbG9iPUJsb2IsZXhwb3J0cy5GaWxlPUZpbGUsZXhwb3J0cy5Gb3JtRGF0YT1Gb3JtRGF0YSxleHBvcnRzLkhlYWRlcnM9SGVhZGVycyxleHBvcnRzLlJlcXVlc3Q9UmVxdWVzdCxleHBvcnRzLlJlc3BvbnNlPVJlc3BvbnNlLGV4cG9ydHMuZGVmYXVsdD1mZXRjaCxleHBvcnRzLmZldGNoPWZldGNoO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch-native/dist/index.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-fetch-native/dist/node.cjs":
/*!******************************************************!*\
  !*** ./node_modules/node-fetch-native/dist/node.cjs ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("var qi=Object.defineProperty;var u=(c,l)=>qi(c,\"name\",{value:l,configurable:!0});Object.defineProperty(exports, \"__esModule\", ({value:!0}));const http=__webpack_require__(/*! node:http */ \"node:http\"),https=__webpack_require__(/*! node:https */ \"node:https\"),zlib=__webpack_require__(/*! node:zlib */ \"node:zlib\"),Stream=__webpack_require__(/*! node:stream */ \"node:stream\"),require$$0=__webpack_require__(/*! node:buffer */ \"node:buffer\"),require$$0$1=__webpack_require__(/*! node:util */ \"node:util\"),_commonjsHelpers=__webpack_require__(/*! ./shared/node-fetch-native.DhEqb06g.cjs */ \"(rsc)/./node_modules/node-fetch-native/dist/shared/node-fetch-native.DhEqb06g.cjs\"),require$$1=__webpack_require__(/*! node:url */ \"node:url\"),require$$0$2=__webpack_require__(/*! node:net */ \"node:net\"),node_fs=__webpack_require__(/*! node:fs */ \"node:fs\"),node_path=__webpack_require__(/*! node:path */ \"node:path\");function _interopDefaultCompat(c){return c&&typeof c==\"object\"&&\"default\"in c?c.default:c}u(_interopDefaultCompat,\"_interopDefaultCompat\");const http__default=_interopDefaultCompat(http),https__default=_interopDefaultCompat(https),zlib__default=_interopDefaultCompat(zlib),Stream__default=_interopDefaultCompat(Stream);function dataUriToBuffer(c){if(!/^data:/i.test(c))throw new TypeError('`uri` does not appear to be a Data URI (must begin with \"data:\")');c=c.replace(/\\r?\\n/g,\"\");const l=c.indexOf(\",\");if(l===-1||l<=4)throw new TypeError(\"malformed data: URI\");const d=c.substring(5,l).split(\";\");let y=\"\",b=!1;const R=d[0]||\"text/plain\";let w=R;for(let z=1;z<d.length;z++)d[z]===\"base64\"?b=!0:d[z]&&(w+=`;${d[z]}`,d[z].indexOf(\"charset=\")===0&&(y=d[z].substring(8)));!d[0]&&!y.length&&(w+=\";charset=US-ASCII\",y=\"US-ASCII\");const A=b?\"base64\":\"ascii\",F=unescape(c.substring(l+1)),B=Buffer.from(F,A);return B.type=R,B.typeFull=w,B.charset=y,B}u(dataUriToBuffer,\"dataUriToBuffer\");var streams={},ponyfill_es2018$1={exports:{}};/**\n * @license\n * web-streams-polyfill v3.3.3\n * Copyright 2024 Mattias Buelens, Diwank Singh Tomer and other contributors.\n * This code is released under the MIT license.\n * SPDX-License-Identifier: MIT\n */var ponyfill_es2018=ponyfill_es2018$1.exports,hasRequiredPonyfill_es2018;function requirePonyfill_es2018(){return hasRequiredPonyfill_es2018||(hasRequiredPonyfill_es2018=1,function(c,l){(function(d,y){y(l)})(ponyfill_es2018,function(d){function y(){}u(y,\"noop\");function b(n){return typeof n==\"object\"&&n!==null||typeof n==\"function\"}u(b,\"typeIsObject\");const R=y;function w(n,o){try{Object.defineProperty(n,\"name\",{value:o,configurable:!0})}catch{}}u(w,\"setFunctionName\");const A=Promise,F=Promise.prototype.then,B=Promise.reject.bind(A);function z(n){return new A(n)}u(z,\"newPromise\");function W(n){return z(o=>o(n))}u(W,\"promiseResolvedWith\");function T(n){return B(n)}u(T,\"promiseRejectedWith\");function D(n,o,a){return F.call(n,o,a)}u(D,\"PerformPromiseThen\");function E(n,o,a){D(D(n,o,a),void 0,R)}u(E,\"uponPromise\");function Z(n,o){E(n,o)}u(Z,\"uponFulfillment\");function M(n,o){E(n,void 0,o)}u(M,\"uponRejection\");function U(n,o,a){return D(n,o,a)}u(U,\"transformPromiseWith\");function K(n){D(n,void 0,R)}u(K,\"setPromiseIsHandledToTrue\");let se=u(n=>{if(typeof queueMicrotask==\"function\")se=queueMicrotask;else{const o=W(void 0);se=u(a=>D(o,a),\"_queueMicrotask\")}return se(n)},\"_queueMicrotask\");function $(n,o,a){if(typeof n!=\"function\")throw new TypeError(\"Argument is not a function\");return Function.prototype.apply.call(n,o,a)}u($,\"reflectCall\");function N(n,o,a){try{return W($(n,o,a))}catch(p){return T(p)}}u(N,\"promiseCall\");const V=16384;class Q{static{u(this,\"SimpleQueue\")}constructor(){this._cursor=0,this._size=0,this._front={_elements:[],_next:void 0},this._back=this._front,this._cursor=0,this._size=0}get length(){return this._size}push(o){const a=this._back;let p=a;a._elements.length===V-1&&(p={_elements:[],_next:void 0}),a._elements.push(o),p!==a&&(this._back=p,a._next=p),++this._size}shift(){const o=this._front;let a=o;const p=this._cursor;let g=p+1;const _=o._elements,S=_[p];return g===V&&(a=o._next,g=0),--this._size,this._cursor=g,o!==a&&(this._front=a),_[p]=void 0,S}forEach(o){let a=this._cursor,p=this._front,g=p._elements;for(;(a!==g.length||p._next!==void 0)&&!(a===g.length&&(p=p._next,g=p._elements,a=0,g.length===0));)o(g[a]),++a}peek(){const o=this._front,a=this._cursor;return o._elements[a]}}const rt=Symbol(\"[[AbortSteps]]\"),wr=Symbol(\"[[ErrorSteps]]\"),Ot=Symbol(\"[[CancelSteps]]\"),Ft=Symbol(\"[[PullSteps]]\"),It=Symbol(\"[[ReleaseSteps]]\");function Rr(n,o){n._ownerReadableStream=o,o._reader=n,o._state===\"readable\"?jt(n):o._state===\"closed\"?Dn(n):Tr(n,o._storedError)}u(Rr,\"ReadableStreamReaderGenericInitialize\");function zt(n,o){const a=n._ownerReadableStream;return ne(a,o)}u(zt,\"ReadableStreamReaderGenericCancel\");function ue(n){const o=n._ownerReadableStream;o._state===\"readable\"?Lt(n,new TypeError(\"Reader was released and can no longer be used to monitor the stream's closedness\")):$n(n,new TypeError(\"Reader was released and can no longer be used to monitor the stream's closedness\")),o._readableStreamController[It](),o._reader=void 0,n._ownerReadableStream=void 0}u(ue,\"ReadableStreamReaderGenericRelease\");function nt(n){return new TypeError(\"Cannot \"+n+\" a stream using a released reader\")}u(nt,\"readerLockException\");function jt(n){n._closedPromise=z((o,a)=>{n._closedPromise_resolve=o,n._closedPromise_reject=a})}u(jt,\"defaultReaderClosedPromiseInitialize\");function Tr(n,o){jt(n),Lt(n,o)}u(Tr,\"defaultReaderClosedPromiseInitializeAsRejected\");function Dn(n){jt(n),Cr(n)}u(Dn,\"defaultReaderClosedPromiseInitializeAsResolved\");function Lt(n,o){n._closedPromise_reject!==void 0&&(K(n._closedPromise),n._closedPromise_reject(o),n._closedPromise_resolve=void 0,n._closedPromise_reject=void 0)}u(Lt,\"defaultReaderClosedPromiseReject\");function $n(n,o){Tr(n,o)}u($n,\"defaultReaderClosedPromiseResetToRejected\");function Cr(n){n._closedPromise_resolve!==void 0&&(n._closedPromise_resolve(void 0),n._closedPromise_resolve=void 0,n._closedPromise_reject=void 0)}u(Cr,\"defaultReaderClosedPromiseResolve\");const Pr=Number.isFinite||function(n){return typeof n==\"number\"&&isFinite(n)},Mn=Math.trunc||function(n){return n<0?Math.ceil(n):Math.floor(n)};function xn(n){return typeof n==\"object\"||typeof n==\"function\"}u(xn,\"isDictionary\");function ie(n,o){if(n!==void 0&&!xn(n))throw new TypeError(`${o} is not an object.`)}u(ie,\"assertDictionary\");function X(n,o){if(typeof n!=\"function\")throw new TypeError(`${o} is not a function.`)}u(X,\"assertFunction\");function Un(n){return typeof n==\"object\"&&n!==null||typeof n==\"function\"}u(Un,\"isObject\");function Er(n,o){if(!Un(n))throw new TypeError(`${o} is not an object.`)}u(Er,\"assertObject\");function le(n,o,a){if(n===void 0)throw new TypeError(`Parameter ${o} is required in '${a}'.`)}u(le,\"assertRequiredArgument\");function Dt(n,o,a){if(n===void 0)throw new TypeError(`${o} is required in '${a}'.`)}u(Dt,\"assertRequiredField\");function $t(n){return Number(n)}u($t,\"convertUnrestrictedDouble\");function vr(n){return n===0?0:n}u(vr,\"censorNegativeZero\");function Nn(n){return vr(Mn(n))}u(Nn,\"integerPart\");function Mt(n,o){const p=Number.MAX_SAFE_INTEGER;let g=Number(n);if(g=vr(g),!Pr(g))throw new TypeError(`${o} is not a finite number`);if(g=Nn(g),g<0||g>p)throw new TypeError(`${o} is outside the accepted range of 0 to ${p}, inclusive`);return!Pr(g)||g===0?0:g}u(Mt,\"convertUnsignedLongLongWithEnforceRange\");function xt(n,o){if(!Re(n))throw new TypeError(`${o} is not a ReadableStream.`)}u(xt,\"assertReadableStream\");function Fe(n){return new me(n)}u(Fe,\"AcquireReadableStreamDefaultReader\");function Ar(n,o){n._reader._readRequests.push(o)}u(Ar,\"ReadableStreamAddReadRequest\");function Ut(n,o,a){const g=n._reader._readRequests.shift();a?g._closeSteps():g._chunkSteps(o)}u(Ut,\"ReadableStreamFulfillReadRequest\");function ot(n){return n._reader._readRequests.length}u(ot,\"ReadableStreamGetNumReadRequests\");function Br(n){const o=n._reader;return!(o===void 0||!ye(o))}u(Br,\"ReadableStreamHasDefaultReader\");class me{static{u(this,\"ReadableStreamDefaultReader\")}constructor(o){if(le(o,1,\"ReadableStreamDefaultReader\"),xt(o,\"First parameter\"),Te(o))throw new TypeError(\"This stream has already been locked for exclusive reading by another reader\");Rr(this,o),this._readRequests=new Q}get closed(){return ye(this)?this._closedPromise:T(it(\"closed\"))}cancel(o=void 0){return ye(this)?this._ownerReadableStream===void 0?T(nt(\"cancel\")):zt(this,o):T(it(\"cancel\"))}read(){if(!ye(this))return T(it(\"read\"));if(this._ownerReadableStream===void 0)return T(nt(\"read from\"));let o,a;const p=z((_,S)=>{o=_,a=S});return Ve(this,{_chunkSteps:u(_=>o({value:_,done:!1}),\"_chunkSteps\"),_closeSteps:u(()=>o({value:void 0,done:!0}),\"_closeSteps\"),_errorSteps:u(_=>a(_),\"_errorSteps\")}),p}releaseLock(){if(!ye(this))throw it(\"releaseLock\");this._ownerReadableStream!==void 0&&Hn(this)}}Object.defineProperties(me.prototype,{cancel:{enumerable:!0},read:{enumerable:!0},releaseLock:{enumerable:!0},closed:{enumerable:!0}}),w(me.prototype.cancel,\"cancel\"),w(me.prototype.read,\"read\"),w(me.prototype.releaseLock,\"releaseLock\"),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(me.prototype,Symbol.toStringTag,{value:\"ReadableStreamDefaultReader\",configurable:!0});function ye(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_readRequests\")?!1:n instanceof me}u(ye,\"IsReadableStreamDefaultReader\");function Ve(n,o){const a=n._ownerReadableStream;a._disturbed=!0,a._state===\"closed\"?o._closeSteps():a._state===\"errored\"?o._errorSteps(a._storedError):a._readableStreamController[Ft](o)}u(Ve,\"ReadableStreamDefaultReaderRead\");function Hn(n){ue(n);const o=new TypeError(\"Reader was released\");qr(n,o)}u(Hn,\"ReadableStreamDefaultReaderRelease\");function qr(n,o){const a=n._readRequests;n._readRequests=new Q,a.forEach(p=>{p._errorSteps(o)})}u(qr,\"ReadableStreamDefaultReaderErrorReadRequests\");function it(n){return new TypeError(`ReadableStreamDefaultReader.prototype.${n} can only be used on a ReadableStreamDefaultReader`)}u(it,\"defaultReaderBrandCheckException\");const Vn=Object.getPrototypeOf(Object.getPrototypeOf(async function*(){}).prototype);class Wr{static{u(this,\"ReadableStreamAsyncIteratorImpl\")}constructor(o,a){this._ongoingPromise=void 0,this._isFinished=!1,this._reader=o,this._preventCancel=a}next(){const o=u(()=>this._nextSteps(),\"nextSteps\");return this._ongoingPromise=this._ongoingPromise?U(this._ongoingPromise,o,o):o(),this._ongoingPromise}return(o){const a=u(()=>this._returnSteps(o),\"returnSteps\");return this._ongoingPromise?U(this._ongoingPromise,a,a):a()}_nextSteps(){if(this._isFinished)return Promise.resolve({value:void 0,done:!0});const o=this._reader;let a,p;const g=z((S,C)=>{a=S,p=C});return Ve(o,{_chunkSteps:u(S=>{this._ongoingPromise=void 0,se(()=>a({value:S,done:!1}))},\"_chunkSteps\"),_closeSteps:u(()=>{this._ongoingPromise=void 0,this._isFinished=!0,ue(o),a({value:void 0,done:!0})},\"_closeSteps\"),_errorSteps:u(S=>{this._ongoingPromise=void 0,this._isFinished=!0,ue(o),p(S)},\"_errorSteps\")}),g}_returnSteps(o){if(this._isFinished)return Promise.resolve({value:o,done:!0});this._isFinished=!0;const a=this._reader;if(!this._preventCancel){const p=zt(a,o);return ue(a),U(p,()=>({value:o,done:!0}))}return ue(a),W({value:o,done:!0})}}const kr={next(){return Or(this)?this._asyncIteratorImpl.next():T(Fr(\"next\"))},return(n){return Or(this)?this._asyncIteratorImpl.return(n):T(Fr(\"return\"))}};Object.setPrototypeOf(kr,Vn);function Qn(n,o){const a=Fe(n),p=new Wr(a,o),g=Object.create(kr);return g._asyncIteratorImpl=p,g}u(Qn,\"AcquireReadableStreamAsyncIterator\");function Or(n){if(!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_asyncIteratorImpl\"))return!1;try{return n._asyncIteratorImpl instanceof Wr}catch{return!1}}u(Or,\"IsReadableStreamAsyncIterator\");function Fr(n){return new TypeError(`ReadableStreamAsyncIterator.${n} can only be used on a ReadableSteamAsyncIterator`)}u(Fr,\"streamAsyncIteratorBrandCheckException\");const Ir=Number.isNaN||function(n){return n!==n};var Nt,Ht,Vt;function Qe(n){return n.slice()}u(Qe,\"CreateArrayFromList\");function zr(n,o,a,p,g){new Uint8Array(n).set(new Uint8Array(a,p,g),o)}u(zr,\"CopyDataBlockBytes\");let fe=u(n=>(typeof n.transfer==\"function\"?fe=u(o=>o.transfer(),\"TransferArrayBuffer\"):typeof structuredClone==\"function\"?fe=u(o=>structuredClone(o,{transfer:[o]}),\"TransferArrayBuffer\"):fe=u(o=>o,\"TransferArrayBuffer\"),fe(n)),\"TransferArrayBuffer\"),ge=u(n=>(typeof n.detached==\"boolean\"?ge=u(o=>o.detached,\"IsDetachedBuffer\"):ge=u(o=>o.byteLength===0,\"IsDetachedBuffer\"),ge(n)),\"IsDetachedBuffer\");function jr(n,o,a){if(n.slice)return n.slice(o,a);const p=a-o,g=new ArrayBuffer(p);return zr(g,0,n,o,p),g}u(jr,\"ArrayBufferSlice\");function at(n,o){const a=n[o];if(a!=null){if(typeof a!=\"function\")throw new TypeError(`${String(o)} is not a function`);return a}}u(at,\"GetMethod\");function Yn(n){const o={[Symbol.iterator]:()=>n.iterator},a=async function*(){return yield*o}(),p=a.next;return{iterator:a,nextMethod:p,done:!1}}u(Yn,\"CreateAsyncFromSyncIterator\");const Qt=(Vt=(Nt=Symbol.asyncIterator)!==null&&Nt!==void 0?Nt:(Ht=Symbol.for)===null||Ht===void 0?void 0:Ht.call(Symbol,\"Symbol.asyncIterator\"))!==null&&Vt!==void 0?Vt:\"@@asyncIterator\";function Lr(n,o=\"sync\",a){if(a===void 0)if(o===\"async\"){if(a=at(n,Qt),a===void 0){const _=at(n,Symbol.iterator),S=Lr(n,\"sync\",_);return Yn(S)}}else a=at(n,Symbol.iterator);if(a===void 0)throw new TypeError(\"The object is not iterable\");const p=$(a,n,[]);if(!b(p))throw new TypeError(\"The iterator method must return an object\");const g=p.next;return{iterator:p,nextMethod:g,done:!1}}u(Lr,\"GetIterator\");function Gn(n){const o=$(n.nextMethod,n.iterator,[]);if(!b(o))throw new TypeError(\"The iterator.next() method must return an object\");return o}u(Gn,\"IteratorNext\");function Zn(n){return!!n.done}u(Zn,\"IteratorComplete\");function Kn(n){return n.value}u(Kn,\"IteratorValue\");function Jn(n){return!(typeof n!=\"number\"||Ir(n)||n<0)}u(Jn,\"IsNonNegativeNumber\");function Dr(n){const o=jr(n.buffer,n.byteOffset,n.byteOffset+n.byteLength);return new Uint8Array(o)}u(Dr,\"CloneAsUint8Array\");function Yt(n){const o=n._queue.shift();return n._queueTotalSize-=o.size,n._queueTotalSize<0&&(n._queueTotalSize=0),o.value}u(Yt,\"DequeueValue\");function Gt(n,o,a){if(!Jn(a)||a===1/0)throw new RangeError(\"Size must be a finite, non-NaN, non-negative number.\");n._queue.push({value:o,size:a}),n._queueTotalSize+=a}u(Gt,\"EnqueueValueWithSize\");function Xn(n){return n._queue.peek().value}u(Xn,\"PeekQueueValue\");function _e(n){n._queue=new Q,n._queueTotalSize=0}u(_e,\"ResetQueue\");function $r(n){return n===DataView}u($r,\"isDataViewConstructor\");function eo(n){return $r(n.constructor)}u(eo,\"isDataView\");function to(n){return $r(n)?1:n.BYTES_PER_ELEMENT}u(to,\"arrayBufferViewElementSize\");class Ee{static{u(this,\"ReadableStreamBYOBRequest\")}constructor(){throw new TypeError(\"Illegal constructor\")}get view(){if(!Zt(this))throw tr(\"view\");return this._view}respond(o){if(!Zt(this))throw tr(\"respond\");if(le(o,1,\"respond\"),o=Mt(o,\"First parameter\"),this._associatedReadableByteStreamController===void 0)throw new TypeError(\"This BYOB request has been invalidated\");if(ge(this._view.buffer))throw new TypeError(\"The BYOB request's buffer has been detached and so cannot be used as a response\");ft(this._associatedReadableByteStreamController,o)}respondWithNewView(o){if(!Zt(this))throw tr(\"respondWithNewView\");if(le(o,1,\"respondWithNewView\"),!ArrayBuffer.isView(o))throw new TypeError(\"You can only respond with array buffer views\");if(this._associatedReadableByteStreamController===void 0)throw new TypeError(\"This BYOB request has been invalidated\");if(ge(o.buffer))throw new TypeError(\"The given view's buffer has been detached and so cannot be used as a response\");ct(this._associatedReadableByteStreamController,o)}}Object.defineProperties(Ee.prototype,{respond:{enumerable:!0},respondWithNewView:{enumerable:!0},view:{enumerable:!0}}),w(Ee.prototype.respond,\"respond\"),w(Ee.prototype.respondWithNewView,\"respondWithNewView\"),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(Ee.prototype,Symbol.toStringTag,{value:\"ReadableStreamBYOBRequest\",configurable:!0});class ce{static{u(this,\"ReadableByteStreamController\")}constructor(){throw new TypeError(\"Illegal constructor\")}get byobRequest(){if(!ve(this))throw Ge(\"byobRequest\");return er(this)}get desiredSize(){if(!ve(this))throw Ge(\"desiredSize\");return Zr(this)}close(){if(!ve(this))throw Ge(\"close\");if(this._closeRequested)throw new TypeError(\"The stream has already been closed; do not close it again!\");const o=this._controlledReadableByteStream._state;if(o!==\"readable\")throw new TypeError(`The stream (in ${o} state) is not in the readable state and cannot be closed`);Ye(this)}enqueue(o){if(!ve(this))throw Ge(\"enqueue\");if(le(o,1,\"enqueue\"),!ArrayBuffer.isView(o))throw new TypeError(\"chunk must be an array buffer view\");if(o.byteLength===0)throw new TypeError(\"chunk must have non-zero byteLength\");if(o.buffer.byteLength===0)throw new TypeError(\"chunk's buffer must have non-zero byteLength\");if(this._closeRequested)throw new TypeError(\"stream is closed or draining\");const a=this._controlledReadableByteStream._state;if(a!==\"readable\")throw new TypeError(`The stream (in ${a} state) is not in the readable state and cannot be enqueued to`);lt(this,o)}error(o=void 0){if(!ve(this))throw Ge(\"error\");ee(this,o)}[Ot](o){Mr(this),_e(this);const a=this._cancelAlgorithm(o);return ut(this),a}[Ft](o){const a=this._controlledReadableByteStream;if(this._queueTotalSize>0){Gr(this,o);return}const p=this._autoAllocateChunkSize;if(p!==void 0){let g;try{g=new ArrayBuffer(p)}catch(S){o._errorSteps(S);return}const _={buffer:g,bufferByteLength:p,byteOffset:0,byteLength:p,bytesFilled:0,minimumFill:1,elementSize:1,viewConstructor:Uint8Array,readerType:\"default\"};this._pendingPullIntos.push(_)}Ar(a,o),Ae(this)}[It](){if(this._pendingPullIntos.length>0){const o=this._pendingPullIntos.peek();o.readerType=\"none\",this._pendingPullIntos=new Q,this._pendingPullIntos.push(o)}}}Object.defineProperties(ce.prototype,{close:{enumerable:!0},enqueue:{enumerable:!0},error:{enumerable:!0},byobRequest:{enumerable:!0},desiredSize:{enumerable:!0}}),w(ce.prototype.close,\"close\"),w(ce.prototype.enqueue,\"enqueue\"),w(ce.prototype.error,\"error\"),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(ce.prototype,Symbol.toStringTag,{value:\"ReadableByteStreamController\",configurable:!0});function ve(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_controlledReadableByteStream\")?!1:n instanceof ce}u(ve,\"IsReadableByteStreamController\");function Zt(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_associatedReadableByteStreamController\")?!1:n instanceof Ee}u(Zt,\"IsReadableStreamBYOBRequest\");function Ae(n){if(!ao(n))return;if(n._pulling){n._pullAgain=!0;return}n._pulling=!0;const a=n._pullAlgorithm();E(a,()=>(n._pulling=!1,n._pullAgain&&(n._pullAgain=!1,Ae(n)),null),p=>(ee(n,p),null))}u(Ae,\"ReadableByteStreamControllerCallPullIfNeeded\");function Mr(n){Jt(n),n._pendingPullIntos=new Q}u(Mr,\"ReadableByteStreamControllerClearPendingPullIntos\");function Kt(n,o){let a=!1;n._state===\"closed\"&&(a=!0);const p=xr(o);o.readerType===\"default\"?Ut(n,p,a):ho(n,p,a)}u(Kt,\"ReadableByteStreamControllerCommitPullIntoDescriptor\");function xr(n){const o=n.bytesFilled,a=n.elementSize;return new n.viewConstructor(n.buffer,n.byteOffset,o/a)}u(xr,\"ReadableByteStreamControllerConvertPullIntoDescriptor\");function st(n,o,a,p){n._queue.push({buffer:o,byteOffset:a,byteLength:p}),n._queueTotalSize+=p}u(st,\"ReadableByteStreamControllerEnqueueChunkToQueue\");function Ur(n,o,a,p){let g;try{g=jr(o,a,a+p)}catch(_){throw ee(n,_),_}st(n,g,0,p)}u(Ur,\"ReadableByteStreamControllerEnqueueClonedChunkToQueue\");function Nr(n,o){o.bytesFilled>0&&Ur(n,o.buffer,o.byteOffset,o.bytesFilled),Ie(n)}u(Nr,\"ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue\");function Hr(n,o){const a=Math.min(n._queueTotalSize,o.byteLength-o.bytesFilled),p=o.bytesFilled+a;let g=a,_=!1;const S=p%o.elementSize,C=p-S;C>=o.minimumFill&&(g=C-o.bytesFilled,_=!0);const q=n._queue;for(;g>0;){const P=q.peek(),k=Math.min(g,P.byteLength),O=o.byteOffset+o.bytesFilled;zr(o.buffer,O,P.buffer,P.byteOffset,k),P.byteLength===k?q.shift():(P.byteOffset+=k,P.byteLength-=k),n._queueTotalSize-=k,Vr(n,k,o),g-=k}return _}u(Hr,\"ReadableByteStreamControllerFillPullIntoDescriptorFromQueue\");function Vr(n,o,a){a.bytesFilled+=o}u(Vr,\"ReadableByteStreamControllerFillHeadPullIntoDescriptor\");function Qr(n){n._queueTotalSize===0&&n._closeRequested?(ut(n),tt(n._controlledReadableByteStream)):Ae(n)}u(Qr,\"ReadableByteStreamControllerHandleQueueDrain\");function Jt(n){n._byobRequest!==null&&(n._byobRequest._associatedReadableByteStreamController=void 0,n._byobRequest._view=null,n._byobRequest=null)}u(Jt,\"ReadableByteStreamControllerInvalidateBYOBRequest\");function Xt(n){for(;n._pendingPullIntos.length>0;){if(n._queueTotalSize===0)return;const o=n._pendingPullIntos.peek();Hr(n,o)&&(Ie(n),Kt(n._controlledReadableByteStream,o))}}u(Xt,\"ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue\");function ro(n){const o=n._controlledReadableByteStream._reader;for(;o._readRequests.length>0;){if(n._queueTotalSize===0)return;const a=o._readRequests.shift();Gr(n,a)}}u(ro,\"ReadableByteStreamControllerProcessReadRequestsUsingQueue\");function no(n,o,a,p){const g=n._controlledReadableByteStream,_=o.constructor,S=to(_),{byteOffset:C,byteLength:q}=o,P=a*S;let k;try{k=fe(o.buffer)}catch(j){p._errorSteps(j);return}const O={buffer:k,bufferByteLength:k.byteLength,byteOffset:C,byteLength:q,bytesFilled:0,minimumFill:P,elementSize:S,viewConstructor:_,readerType:\"byob\"};if(n._pendingPullIntos.length>0){n._pendingPullIntos.push(O),Xr(g,p);return}if(g._state===\"closed\"){const j=new _(O.buffer,O.byteOffset,0);p._closeSteps(j);return}if(n._queueTotalSize>0){if(Hr(n,O)){const j=xr(O);Qr(n),p._chunkSteps(j);return}if(n._closeRequested){const j=new TypeError(\"Insufficient bytes to fill elements in the given buffer\");ee(n,j),p._errorSteps(j);return}}n._pendingPullIntos.push(O),Xr(g,p),Ae(n)}u(no,\"ReadableByteStreamControllerPullInto\");function oo(n,o){o.readerType===\"none\"&&Ie(n);const a=n._controlledReadableByteStream;if(rr(a))for(;en(a)>0;){const p=Ie(n);Kt(a,p)}}u(oo,\"ReadableByteStreamControllerRespondInClosedState\");function io(n,o,a){if(Vr(n,o,a),a.readerType===\"none\"){Nr(n,a),Xt(n);return}if(a.bytesFilled<a.minimumFill)return;Ie(n);const p=a.bytesFilled%a.elementSize;if(p>0){const g=a.byteOffset+a.bytesFilled;Ur(n,a.buffer,g-p,p)}a.bytesFilled-=p,Kt(n._controlledReadableByteStream,a),Xt(n)}u(io,\"ReadableByteStreamControllerRespondInReadableState\");function Yr(n,o){const a=n._pendingPullIntos.peek();Jt(n),n._controlledReadableByteStream._state===\"closed\"?oo(n,a):io(n,o,a),Ae(n)}u(Yr,\"ReadableByteStreamControllerRespondInternal\");function Ie(n){return n._pendingPullIntos.shift()}u(Ie,\"ReadableByteStreamControllerShiftPendingPullInto\");function ao(n){const o=n._controlledReadableByteStream;return o._state!==\"readable\"||n._closeRequested||!n._started?!1:!!(Br(o)&&ot(o)>0||rr(o)&&en(o)>0||Zr(n)>0)}u(ao,\"ReadableByteStreamControllerShouldCallPull\");function ut(n){n._pullAlgorithm=void 0,n._cancelAlgorithm=void 0}u(ut,\"ReadableByteStreamControllerClearAlgorithms\");function Ye(n){const o=n._controlledReadableByteStream;if(!(n._closeRequested||o._state!==\"readable\")){if(n._queueTotalSize>0){n._closeRequested=!0;return}if(n._pendingPullIntos.length>0){const a=n._pendingPullIntos.peek();if(a.bytesFilled%a.elementSize!==0){const p=new TypeError(\"Insufficient bytes to fill elements in the given buffer\");throw ee(n,p),p}}ut(n),tt(o)}}u(Ye,\"ReadableByteStreamControllerClose\");function lt(n,o){const a=n._controlledReadableByteStream;if(n._closeRequested||a._state!==\"readable\")return;const{buffer:p,byteOffset:g,byteLength:_}=o;if(ge(p))throw new TypeError(\"chunk's buffer is detached and so cannot be enqueued\");const S=fe(p);if(n._pendingPullIntos.length>0){const C=n._pendingPullIntos.peek();if(ge(C.buffer))throw new TypeError(\"The BYOB request's buffer has been detached and so cannot be filled with an enqueued chunk\");Jt(n),C.buffer=fe(C.buffer),C.readerType===\"none\"&&Nr(n,C)}if(Br(a))if(ro(n),ot(a)===0)st(n,S,g,_);else{n._pendingPullIntos.length>0&&Ie(n);const C=new Uint8Array(S,g,_);Ut(a,C,!1)}else rr(a)?(st(n,S,g,_),Xt(n)):st(n,S,g,_);Ae(n)}u(lt,\"ReadableByteStreamControllerEnqueue\");function ee(n,o){const a=n._controlledReadableByteStream;a._state===\"readable\"&&(Mr(n),_e(n),ut(n),Pn(a,o))}u(ee,\"ReadableByteStreamControllerError\");function Gr(n,o){const a=n._queue.shift();n._queueTotalSize-=a.byteLength,Qr(n);const p=new Uint8Array(a.buffer,a.byteOffset,a.byteLength);o._chunkSteps(p)}u(Gr,\"ReadableByteStreamControllerFillReadRequestFromQueue\");function er(n){if(n._byobRequest===null&&n._pendingPullIntos.length>0){const o=n._pendingPullIntos.peek(),a=new Uint8Array(o.buffer,o.byteOffset+o.bytesFilled,o.byteLength-o.bytesFilled),p=Object.create(Ee.prototype);uo(p,n,a),n._byobRequest=p}return n._byobRequest}u(er,\"ReadableByteStreamControllerGetBYOBRequest\");function Zr(n){const o=n._controlledReadableByteStream._state;return o===\"errored\"?null:o===\"closed\"?0:n._strategyHWM-n._queueTotalSize}u(Zr,\"ReadableByteStreamControllerGetDesiredSize\");function ft(n,o){const a=n._pendingPullIntos.peek();if(n._controlledReadableByteStream._state===\"closed\"){if(o!==0)throw new TypeError(\"bytesWritten must be 0 when calling respond() on a closed stream\")}else{if(o===0)throw new TypeError(\"bytesWritten must be greater than 0 when calling respond() on a readable stream\");if(a.bytesFilled+o>a.byteLength)throw new RangeError(\"bytesWritten out of range\")}a.buffer=fe(a.buffer),Yr(n,o)}u(ft,\"ReadableByteStreamControllerRespond\");function ct(n,o){const a=n._pendingPullIntos.peek();if(n._controlledReadableByteStream._state===\"closed\"){if(o.byteLength!==0)throw new TypeError(\"The view's length must be 0 when calling respondWithNewView() on a closed stream\")}else if(o.byteLength===0)throw new TypeError(\"The view's length must be greater than 0 when calling respondWithNewView() on a readable stream\");if(a.byteOffset+a.bytesFilled!==o.byteOffset)throw new RangeError(\"The region specified by view does not match byobRequest\");if(a.bufferByteLength!==o.buffer.byteLength)throw new RangeError(\"The buffer of view has different capacity than byobRequest\");if(a.bytesFilled+o.byteLength>a.byteLength)throw new RangeError(\"The region specified by view is larger than byobRequest\");const g=o.byteLength;a.buffer=fe(o.buffer),Yr(n,g)}u(ct,\"ReadableByteStreamControllerRespondWithNewView\");function Kr(n,o,a,p,g,_,S){o._controlledReadableByteStream=n,o._pullAgain=!1,o._pulling=!1,o._byobRequest=null,o._queue=o._queueTotalSize=void 0,_e(o),o._closeRequested=!1,o._started=!1,o._strategyHWM=_,o._pullAlgorithm=p,o._cancelAlgorithm=g,o._autoAllocateChunkSize=S,o._pendingPullIntos=new Q,n._readableStreamController=o;const C=a();E(W(C),()=>(o._started=!0,Ae(o),null),q=>(ee(o,q),null))}u(Kr,\"SetUpReadableByteStreamController\");function so(n,o,a){const p=Object.create(ce.prototype);let g,_,S;o.start!==void 0?g=u(()=>o.start(p),\"startAlgorithm\"):g=u(()=>{},\"startAlgorithm\"),o.pull!==void 0?_=u(()=>o.pull(p),\"pullAlgorithm\"):_=u(()=>W(void 0),\"pullAlgorithm\"),o.cancel!==void 0?S=u(q=>o.cancel(q),\"cancelAlgorithm\"):S=u(()=>W(void 0),\"cancelAlgorithm\");const C=o.autoAllocateChunkSize;if(C===0)throw new TypeError(\"autoAllocateChunkSize must be greater than 0\");Kr(n,p,g,_,S,a,C)}u(so,\"SetUpReadableByteStreamControllerFromUnderlyingSource\");function uo(n,o,a){n._associatedReadableByteStreamController=o,n._view=a}u(uo,\"SetUpReadableStreamBYOBRequest\");function tr(n){return new TypeError(`ReadableStreamBYOBRequest.prototype.${n} can only be used on a ReadableStreamBYOBRequest`)}u(tr,\"byobRequestBrandCheckException\");function Ge(n){return new TypeError(`ReadableByteStreamController.prototype.${n} can only be used on a ReadableByteStreamController`)}u(Ge,\"byteStreamControllerBrandCheckException\");function lo(n,o){ie(n,o);const a=n?.mode;return{mode:a===void 0?void 0:fo(a,`${o} has member 'mode' that`)}}u(lo,\"convertReaderOptions\");function fo(n,o){if(n=`${n}`,n!==\"byob\")throw new TypeError(`${o} '${n}' is not a valid enumeration value for ReadableStreamReaderMode`);return n}u(fo,\"convertReadableStreamReaderMode\");function co(n,o){var a;ie(n,o);const p=(a=n?.min)!==null&&a!==void 0?a:1;return{min:Mt(p,`${o} has member 'min' that`)}}u(co,\"convertByobReadOptions\");function Jr(n){return new Se(n)}u(Jr,\"AcquireReadableStreamBYOBReader\");function Xr(n,o){n._reader._readIntoRequests.push(o)}u(Xr,\"ReadableStreamAddReadIntoRequest\");function ho(n,o,a){const g=n._reader._readIntoRequests.shift();a?g._closeSteps(o):g._chunkSteps(o)}u(ho,\"ReadableStreamFulfillReadIntoRequest\");function en(n){return n._reader._readIntoRequests.length}u(en,\"ReadableStreamGetNumReadIntoRequests\");function rr(n){const o=n._reader;return!(o===void 0||!Be(o))}u(rr,\"ReadableStreamHasBYOBReader\");class Se{static{u(this,\"ReadableStreamBYOBReader\")}constructor(o){if(le(o,1,\"ReadableStreamBYOBReader\"),xt(o,\"First parameter\"),Te(o))throw new TypeError(\"This stream has already been locked for exclusive reading by another reader\");if(!ve(o._readableStreamController))throw new TypeError(\"Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source\");Rr(this,o),this._readIntoRequests=new Q}get closed(){return Be(this)?this._closedPromise:T(dt(\"closed\"))}cancel(o=void 0){return Be(this)?this._ownerReadableStream===void 0?T(nt(\"cancel\")):zt(this,o):T(dt(\"cancel\"))}read(o,a={}){if(!Be(this))return T(dt(\"read\"));if(!ArrayBuffer.isView(o))return T(new TypeError(\"view must be an array buffer view\"));if(o.byteLength===0)return T(new TypeError(\"view must have non-zero byteLength\"));if(o.buffer.byteLength===0)return T(new TypeError(\"view's buffer must have non-zero byteLength\"));if(ge(o.buffer))return T(new TypeError(\"view's buffer has been detached\"));let p;try{p=co(a,\"options\")}catch(P){return T(P)}const g=p.min;if(g===0)return T(new TypeError(\"options.min must be greater than 0\"));if(eo(o)){if(g>o.byteLength)return T(new RangeError(\"options.min must be less than or equal to view's byteLength\"))}else if(g>o.length)return T(new RangeError(\"options.min must be less than or equal to view's length\"));if(this._ownerReadableStream===void 0)return T(nt(\"read from\"));let _,S;const C=z((P,k)=>{_=P,S=k});return tn(this,o,g,{_chunkSteps:u(P=>_({value:P,done:!1}),\"_chunkSteps\"),_closeSteps:u(P=>_({value:P,done:!0}),\"_closeSteps\"),_errorSteps:u(P=>S(P),\"_errorSteps\")}),C}releaseLock(){if(!Be(this))throw dt(\"releaseLock\");this._ownerReadableStream!==void 0&&po(this)}}Object.defineProperties(Se.prototype,{cancel:{enumerable:!0},read:{enumerable:!0},releaseLock:{enumerable:!0},closed:{enumerable:!0}}),w(Se.prototype.cancel,\"cancel\"),w(Se.prototype.read,\"read\"),w(Se.prototype.releaseLock,\"releaseLock\"),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(Se.prototype,Symbol.toStringTag,{value:\"ReadableStreamBYOBReader\",configurable:!0});function Be(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_readIntoRequests\")?!1:n instanceof Se}u(Be,\"IsReadableStreamBYOBReader\");function tn(n,o,a,p){const g=n._ownerReadableStream;g._disturbed=!0,g._state===\"errored\"?p._errorSteps(g._storedError):no(g._readableStreamController,o,a,p)}u(tn,\"ReadableStreamBYOBReaderRead\");function po(n){ue(n);const o=new TypeError(\"Reader was released\");rn(n,o)}u(po,\"ReadableStreamBYOBReaderRelease\");function rn(n,o){const a=n._readIntoRequests;n._readIntoRequests=new Q,a.forEach(p=>{p._errorSteps(o)})}u(rn,\"ReadableStreamBYOBReaderErrorReadIntoRequests\");function dt(n){return new TypeError(`ReadableStreamBYOBReader.prototype.${n} can only be used on a ReadableStreamBYOBReader`)}u(dt,\"byobReaderBrandCheckException\");function Ze(n,o){const{highWaterMark:a}=n;if(a===void 0)return o;if(Ir(a)||a<0)throw new RangeError(\"Invalid highWaterMark\");return a}u(Ze,\"ExtractHighWaterMark\");function ht(n){const{size:o}=n;return o||(()=>1)}u(ht,\"ExtractSizeAlgorithm\");function pt(n,o){ie(n,o);const a=n?.highWaterMark,p=n?.size;return{highWaterMark:a===void 0?void 0:$t(a),size:p===void 0?void 0:bo(p,`${o} has member 'size' that`)}}u(pt,\"convertQueuingStrategy\");function bo(n,o){return X(n,o),a=>$t(n(a))}u(bo,\"convertQueuingStrategySize\");function mo(n,o){ie(n,o);const a=n?.abort,p=n?.close,g=n?.start,_=n?.type,S=n?.write;return{abort:a===void 0?void 0:yo(a,n,`${o} has member 'abort' that`),close:p===void 0?void 0:go(p,n,`${o} has member 'close' that`),start:g===void 0?void 0:_o(g,n,`${o} has member 'start' that`),write:S===void 0?void 0:So(S,n,`${o} has member 'write' that`),type:_}}u(mo,\"convertUnderlyingSink\");function yo(n,o,a){return X(n,a),p=>N(n,o,[p])}u(yo,\"convertUnderlyingSinkAbortCallback\");function go(n,o,a){return X(n,a),()=>N(n,o,[])}u(go,\"convertUnderlyingSinkCloseCallback\");function _o(n,o,a){return X(n,a),p=>$(n,o,[p])}u(_o,\"convertUnderlyingSinkStartCallback\");function So(n,o,a){return X(n,a),(p,g)=>N(n,o,[p,g])}u(So,\"convertUnderlyingSinkWriteCallback\");function nn(n,o){if(!ze(n))throw new TypeError(`${o} is not a WritableStream.`)}u(nn,\"assertWritableStream\");function wo(n){if(typeof n!=\"object\"||n===null)return!1;try{return typeof n.aborted==\"boolean\"}catch{return!1}}u(wo,\"isAbortSignal\");const Ro=typeof AbortController==\"function\";function To(){if(Ro)return new AbortController}u(To,\"createAbortController\");class we{static{u(this,\"WritableStream\")}constructor(o={},a={}){o===void 0?o=null:Er(o,\"First parameter\");const p=pt(a,\"Second parameter\"),g=mo(o,\"First parameter\");if(an(this),g.type!==void 0)throw new RangeError(\"Invalid type is specified\");const S=ht(p),C=Ze(p,1);jo(this,g,C,S)}get locked(){if(!ze(this))throw _t(\"locked\");return je(this)}abort(o=void 0){return ze(this)?je(this)?T(new TypeError(\"Cannot abort a stream that already has a writer\")):bt(this,o):T(_t(\"abort\"))}close(){return ze(this)?je(this)?T(new TypeError(\"Cannot close a stream that already has a writer\")):ae(this)?T(new TypeError(\"Cannot close an already-closing stream\")):sn(this):T(_t(\"close\"))}getWriter(){if(!ze(this))throw _t(\"getWriter\");return on(this)}}Object.defineProperties(we.prototype,{abort:{enumerable:!0},close:{enumerable:!0},getWriter:{enumerable:!0},locked:{enumerable:!0}}),w(we.prototype.abort,\"abort\"),w(we.prototype.close,\"close\"),w(we.prototype.getWriter,\"getWriter\"),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(we.prototype,Symbol.toStringTag,{value:\"WritableStream\",configurable:!0});function on(n){return new de(n)}u(on,\"AcquireWritableStreamDefaultWriter\");function Co(n,o,a,p,g=1,_=()=>1){const S=Object.create(we.prototype);an(S);const C=Object.create(Le.prototype);return hn(S,C,n,o,a,p,g,_),S}u(Co,\"CreateWritableStream\");function an(n){n._state=\"writable\",n._storedError=void 0,n._writer=void 0,n._writableStreamController=void 0,n._writeRequests=new Q,n._inFlightWriteRequest=void 0,n._closeRequest=void 0,n._inFlightCloseRequest=void 0,n._pendingAbortRequest=void 0,n._backpressure=!1}u(an,\"InitializeWritableStream\");function ze(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_writableStreamController\")?!1:n instanceof we}u(ze,\"IsWritableStream\");function je(n){return n._writer!==void 0}u(je,\"IsWritableStreamLocked\");function bt(n,o){var a;if(n._state===\"closed\"||n._state===\"errored\")return W(void 0);n._writableStreamController._abortReason=o,(a=n._writableStreamController._abortController)===null||a===void 0||a.abort(o);const p=n._state;if(p===\"closed\"||p===\"errored\")return W(void 0);if(n._pendingAbortRequest!==void 0)return n._pendingAbortRequest._promise;let g=!1;p===\"erroring\"&&(g=!0,o=void 0);const _=z((S,C)=>{n._pendingAbortRequest={_promise:void 0,_resolve:S,_reject:C,_reason:o,_wasAlreadyErroring:g}});return n._pendingAbortRequest._promise=_,g||or(n,o),_}u(bt,\"WritableStreamAbort\");function sn(n){const o=n._state;if(o===\"closed\"||o===\"errored\")return T(new TypeError(`The stream (in ${o} state) is not in the writable state and cannot be closed`));const a=z((g,_)=>{const S={_resolve:g,_reject:_};n._closeRequest=S}),p=n._writer;return p!==void 0&&n._backpressure&&o===\"writable\"&&dr(p),Lo(n._writableStreamController),a}u(sn,\"WritableStreamClose\");function Po(n){return z((a,p)=>{const g={_resolve:a,_reject:p};n._writeRequests.push(g)})}u(Po,\"WritableStreamAddWriteRequest\");function nr(n,o){if(n._state===\"writable\"){or(n,o);return}ir(n)}u(nr,\"WritableStreamDealWithRejection\");function or(n,o){const a=n._writableStreamController;n._state=\"erroring\",n._storedError=o;const p=n._writer;p!==void 0&&ln(p,o),!qo(n)&&a._started&&ir(n)}u(or,\"WritableStreamStartErroring\");function ir(n){n._state=\"errored\",n._writableStreamController[wr]();const o=n._storedError;if(n._writeRequests.forEach(g=>{g._reject(o)}),n._writeRequests=new Q,n._pendingAbortRequest===void 0){mt(n);return}const a=n._pendingAbortRequest;if(n._pendingAbortRequest=void 0,a._wasAlreadyErroring){a._reject(o),mt(n);return}const p=n._writableStreamController[rt](a._reason);E(p,()=>(a._resolve(),mt(n),null),g=>(a._reject(g),mt(n),null))}u(ir,\"WritableStreamFinishErroring\");function Eo(n){n._inFlightWriteRequest._resolve(void 0),n._inFlightWriteRequest=void 0}u(Eo,\"WritableStreamFinishInFlightWrite\");function vo(n,o){n._inFlightWriteRequest._reject(o),n._inFlightWriteRequest=void 0,nr(n,o)}u(vo,\"WritableStreamFinishInFlightWriteWithError\");function Ao(n){n._inFlightCloseRequest._resolve(void 0),n._inFlightCloseRequest=void 0,n._state===\"erroring\"&&(n._storedError=void 0,n._pendingAbortRequest!==void 0&&(n._pendingAbortRequest._resolve(),n._pendingAbortRequest=void 0)),n._state=\"closed\";const a=n._writer;a!==void 0&&yn(a)}u(Ao,\"WritableStreamFinishInFlightClose\");function Bo(n,o){n._inFlightCloseRequest._reject(o),n._inFlightCloseRequest=void 0,n._pendingAbortRequest!==void 0&&(n._pendingAbortRequest._reject(o),n._pendingAbortRequest=void 0),nr(n,o)}u(Bo,\"WritableStreamFinishInFlightCloseWithError\");function ae(n){return!(n._closeRequest===void 0&&n._inFlightCloseRequest===void 0)}u(ae,\"WritableStreamCloseQueuedOrInFlight\");function qo(n){return!(n._inFlightWriteRequest===void 0&&n._inFlightCloseRequest===void 0)}u(qo,\"WritableStreamHasOperationMarkedInFlight\");function Wo(n){n._inFlightCloseRequest=n._closeRequest,n._closeRequest=void 0}u(Wo,\"WritableStreamMarkCloseRequestInFlight\");function ko(n){n._inFlightWriteRequest=n._writeRequests.shift()}u(ko,\"WritableStreamMarkFirstWriteRequestInFlight\");function mt(n){n._closeRequest!==void 0&&(n._closeRequest._reject(n._storedError),n._closeRequest=void 0);const o=n._writer;o!==void 0&&fr(o,n._storedError)}u(mt,\"WritableStreamRejectCloseAndClosedPromiseIfNeeded\");function ar(n,o){const a=n._writer;a!==void 0&&o!==n._backpressure&&(o?Ho(a):dr(a)),n._backpressure=o}u(ar,\"WritableStreamUpdateBackpressure\");class de{static{u(this,\"WritableStreamDefaultWriter\")}constructor(o){if(le(o,1,\"WritableStreamDefaultWriter\"),nn(o,\"First parameter\"),je(o))throw new TypeError(\"This stream has already been locked for exclusive writing by another writer\");this._ownerWritableStream=o,o._writer=this;const a=o._state;if(a===\"writable\")!ae(o)&&o._backpressure?wt(this):gn(this),St(this);else if(a===\"erroring\")cr(this,o._storedError),St(this);else if(a===\"closed\")gn(this),Uo(this);else{const p=o._storedError;cr(this,p),mn(this,p)}}get closed(){return qe(this)?this._closedPromise:T(We(\"closed\"))}get desiredSize(){if(!qe(this))throw We(\"desiredSize\");if(this._ownerWritableStream===void 0)throw Je(\"desiredSize\");return zo(this)}get ready(){return qe(this)?this._readyPromise:T(We(\"ready\"))}abort(o=void 0){return qe(this)?this._ownerWritableStream===void 0?T(Je(\"abort\")):Oo(this,o):T(We(\"abort\"))}close(){if(!qe(this))return T(We(\"close\"));const o=this._ownerWritableStream;return o===void 0?T(Je(\"close\")):ae(o)?T(new TypeError(\"Cannot close an already-closing stream\")):un(this)}releaseLock(){if(!qe(this))throw We(\"releaseLock\");this._ownerWritableStream!==void 0&&fn(this)}write(o=void 0){return qe(this)?this._ownerWritableStream===void 0?T(Je(\"write to\")):cn(this,o):T(We(\"write\"))}}Object.defineProperties(de.prototype,{abort:{enumerable:!0},close:{enumerable:!0},releaseLock:{enumerable:!0},write:{enumerable:!0},closed:{enumerable:!0},desiredSize:{enumerable:!0},ready:{enumerable:!0}}),w(de.prototype.abort,\"abort\"),w(de.prototype.close,\"close\"),w(de.prototype.releaseLock,\"releaseLock\"),w(de.prototype.write,\"write\"),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(de.prototype,Symbol.toStringTag,{value:\"WritableStreamDefaultWriter\",configurable:!0});function qe(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_ownerWritableStream\")?!1:n instanceof de}u(qe,\"IsWritableStreamDefaultWriter\");function Oo(n,o){const a=n._ownerWritableStream;return bt(a,o)}u(Oo,\"WritableStreamDefaultWriterAbort\");function un(n){const o=n._ownerWritableStream;return sn(o)}u(un,\"WritableStreamDefaultWriterClose\");function Fo(n){const o=n._ownerWritableStream,a=o._state;return ae(o)||a===\"closed\"?W(void 0):a===\"errored\"?T(o._storedError):un(n)}u(Fo,\"WritableStreamDefaultWriterCloseWithErrorPropagation\");function Io(n,o){n._closedPromiseState===\"pending\"?fr(n,o):No(n,o)}u(Io,\"WritableStreamDefaultWriterEnsureClosedPromiseRejected\");function ln(n,o){n._readyPromiseState===\"pending\"?_n(n,o):Vo(n,o)}u(ln,\"WritableStreamDefaultWriterEnsureReadyPromiseRejected\");function zo(n){const o=n._ownerWritableStream,a=o._state;return a===\"errored\"||a===\"erroring\"?null:a===\"closed\"?0:pn(o._writableStreamController)}u(zo,\"WritableStreamDefaultWriterGetDesiredSize\");function fn(n){const o=n._ownerWritableStream,a=new TypeError(\"Writer was released and can no longer be used to monitor the stream's closedness\");ln(n,a),Io(n,a),o._writer=void 0,n._ownerWritableStream=void 0}u(fn,\"WritableStreamDefaultWriterRelease\");function cn(n,o){const a=n._ownerWritableStream,p=a._writableStreamController,g=Do(p,o);if(a!==n._ownerWritableStream)return T(Je(\"write to\"));const _=a._state;if(_===\"errored\")return T(a._storedError);if(ae(a)||_===\"closed\")return T(new TypeError(\"The stream is closing or closed and cannot be written to\"));if(_===\"erroring\")return T(a._storedError);const S=Po(a);return $o(p,o,g),S}u(cn,\"WritableStreamDefaultWriterWrite\");const dn={};class Le{static{u(this,\"WritableStreamDefaultController\")}constructor(){throw new TypeError(\"Illegal constructor\")}get abortReason(){if(!sr(this))throw lr(\"abortReason\");return this._abortReason}get signal(){if(!sr(this))throw lr(\"signal\");if(this._abortController===void 0)throw new TypeError(\"WritableStreamDefaultController.prototype.signal is not supported\");return this._abortController.signal}error(o=void 0){if(!sr(this))throw lr(\"error\");this._controlledWritableStream._state===\"writable\"&&bn(this,o)}[rt](o){const a=this._abortAlgorithm(o);return yt(this),a}[wr](){_e(this)}}Object.defineProperties(Le.prototype,{abortReason:{enumerable:!0},signal:{enumerable:!0},error:{enumerable:!0}}),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(Le.prototype,Symbol.toStringTag,{value:\"WritableStreamDefaultController\",configurable:!0});function sr(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_controlledWritableStream\")?!1:n instanceof Le}u(sr,\"IsWritableStreamDefaultController\");function hn(n,o,a,p,g,_,S,C){o._controlledWritableStream=n,n._writableStreamController=o,o._queue=void 0,o._queueTotalSize=void 0,_e(o),o._abortReason=void 0,o._abortController=To(),o._started=!1,o._strategySizeAlgorithm=C,o._strategyHWM=S,o._writeAlgorithm=p,o._closeAlgorithm=g,o._abortAlgorithm=_;const q=ur(o);ar(n,q);const P=a(),k=W(P);E(k,()=>(o._started=!0,gt(o),null),O=>(o._started=!0,nr(n,O),null))}u(hn,\"SetUpWritableStreamDefaultController\");function jo(n,o,a,p){const g=Object.create(Le.prototype);let _,S,C,q;o.start!==void 0?_=u(()=>o.start(g),\"startAlgorithm\"):_=u(()=>{},\"startAlgorithm\"),o.write!==void 0?S=u(P=>o.write(P,g),\"writeAlgorithm\"):S=u(()=>W(void 0),\"writeAlgorithm\"),o.close!==void 0?C=u(()=>o.close(),\"closeAlgorithm\"):C=u(()=>W(void 0),\"closeAlgorithm\"),o.abort!==void 0?q=u(P=>o.abort(P),\"abortAlgorithm\"):q=u(()=>W(void 0),\"abortAlgorithm\"),hn(n,g,_,S,C,q,a,p)}u(jo,\"SetUpWritableStreamDefaultControllerFromUnderlyingSink\");function yt(n){n._writeAlgorithm=void 0,n._closeAlgorithm=void 0,n._abortAlgorithm=void 0,n._strategySizeAlgorithm=void 0}u(yt,\"WritableStreamDefaultControllerClearAlgorithms\");function Lo(n){Gt(n,dn,0),gt(n)}u(Lo,\"WritableStreamDefaultControllerClose\");function Do(n,o){try{return n._strategySizeAlgorithm(o)}catch(a){return Ke(n,a),1}}u(Do,\"WritableStreamDefaultControllerGetChunkSize\");function pn(n){return n._strategyHWM-n._queueTotalSize}u(pn,\"WritableStreamDefaultControllerGetDesiredSize\");function $o(n,o,a){try{Gt(n,o,a)}catch(g){Ke(n,g);return}const p=n._controlledWritableStream;if(!ae(p)&&p._state===\"writable\"){const g=ur(n);ar(p,g)}gt(n)}u($o,\"WritableStreamDefaultControllerWrite\");function gt(n){const o=n._controlledWritableStream;if(!n._started||o._inFlightWriteRequest!==void 0)return;if(o._state===\"erroring\"){ir(o);return}if(n._queue.length===0)return;const p=Xn(n);p===dn?Mo(n):xo(n,p)}u(gt,\"WritableStreamDefaultControllerAdvanceQueueIfNeeded\");function Ke(n,o){n._controlledWritableStream._state===\"writable\"&&bn(n,o)}u(Ke,\"WritableStreamDefaultControllerErrorIfNeeded\");function Mo(n){const o=n._controlledWritableStream;Wo(o),Yt(n);const a=n._closeAlgorithm();yt(n),E(a,()=>(Ao(o),null),p=>(Bo(o,p),null))}u(Mo,\"WritableStreamDefaultControllerProcessClose\");function xo(n,o){const a=n._controlledWritableStream;ko(a);const p=n._writeAlgorithm(o);E(p,()=>{Eo(a);const g=a._state;if(Yt(n),!ae(a)&&g===\"writable\"){const _=ur(n);ar(a,_)}return gt(n),null},g=>(a._state===\"writable\"&&yt(n),vo(a,g),null))}u(xo,\"WritableStreamDefaultControllerProcessWrite\");function ur(n){return pn(n)<=0}u(ur,\"WritableStreamDefaultControllerGetBackpressure\");function bn(n,o){const a=n._controlledWritableStream;yt(n),or(a,o)}u(bn,\"WritableStreamDefaultControllerError\");function _t(n){return new TypeError(`WritableStream.prototype.${n} can only be used on a WritableStream`)}u(_t,\"streamBrandCheckException$2\");function lr(n){return new TypeError(`WritableStreamDefaultController.prototype.${n} can only be used on a WritableStreamDefaultController`)}u(lr,\"defaultControllerBrandCheckException$2\");function We(n){return new TypeError(`WritableStreamDefaultWriter.prototype.${n} can only be used on a WritableStreamDefaultWriter`)}u(We,\"defaultWriterBrandCheckException\");function Je(n){return new TypeError(\"Cannot \"+n+\" a stream using a released writer\")}u(Je,\"defaultWriterLockException\");function St(n){n._closedPromise=z((o,a)=>{n._closedPromise_resolve=o,n._closedPromise_reject=a,n._closedPromiseState=\"pending\"})}u(St,\"defaultWriterClosedPromiseInitialize\");function mn(n,o){St(n),fr(n,o)}u(mn,\"defaultWriterClosedPromiseInitializeAsRejected\");function Uo(n){St(n),yn(n)}u(Uo,\"defaultWriterClosedPromiseInitializeAsResolved\");function fr(n,o){n._closedPromise_reject!==void 0&&(K(n._closedPromise),n._closedPromise_reject(o),n._closedPromise_resolve=void 0,n._closedPromise_reject=void 0,n._closedPromiseState=\"rejected\")}u(fr,\"defaultWriterClosedPromiseReject\");function No(n,o){mn(n,o)}u(No,\"defaultWriterClosedPromiseResetToRejected\");function yn(n){n._closedPromise_resolve!==void 0&&(n._closedPromise_resolve(void 0),n._closedPromise_resolve=void 0,n._closedPromise_reject=void 0,n._closedPromiseState=\"resolved\")}u(yn,\"defaultWriterClosedPromiseResolve\");function wt(n){n._readyPromise=z((o,a)=>{n._readyPromise_resolve=o,n._readyPromise_reject=a}),n._readyPromiseState=\"pending\"}u(wt,\"defaultWriterReadyPromiseInitialize\");function cr(n,o){wt(n),_n(n,o)}u(cr,\"defaultWriterReadyPromiseInitializeAsRejected\");function gn(n){wt(n),dr(n)}u(gn,\"defaultWriterReadyPromiseInitializeAsResolved\");function _n(n,o){n._readyPromise_reject!==void 0&&(K(n._readyPromise),n._readyPromise_reject(o),n._readyPromise_resolve=void 0,n._readyPromise_reject=void 0,n._readyPromiseState=\"rejected\")}u(_n,\"defaultWriterReadyPromiseReject\");function Ho(n){wt(n)}u(Ho,\"defaultWriterReadyPromiseReset\");function Vo(n,o){cr(n,o)}u(Vo,\"defaultWriterReadyPromiseResetToRejected\");function dr(n){n._readyPromise_resolve!==void 0&&(n._readyPromise_resolve(void 0),n._readyPromise_resolve=void 0,n._readyPromise_reject=void 0,n._readyPromiseState=\"fulfilled\")}u(dr,\"defaultWriterReadyPromiseResolve\");function Qo(){if(typeof globalThis<\"u\")return globalThis;if(typeof self<\"u\")return self;if(typeof _commonjsHelpers.commonjsGlobal<\"u\")return _commonjsHelpers.commonjsGlobal}u(Qo,\"getGlobals\");const hr=Qo();function Yo(n){if(!(typeof n==\"function\"||typeof n==\"object\")||n.name!==\"DOMException\")return!1;try{return new n,!0}catch{return!1}}u(Yo,\"isDOMExceptionConstructor\");function Go(){const n=hr?.DOMException;return Yo(n)?n:void 0}u(Go,\"getFromGlobal\");function Zo(){const n=u(function(a,p){this.message=a||\"\",this.name=p||\"Error\",Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)},\"DOMException\");return w(n,\"DOMException\"),n.prototype=Object.create(Error.prototype),Object.defineProperty(n.prototype,\"constructor\",{value:n,writable:!0,configurable:!0}),n}u(Zo,\"createPolyfill\");const Ko=Go()||Zo();function Sn(n,o,a,p,g,_){const S=Fe(n),C=on(o);n._disturbed=!0;let q=!1,P=W(void 0);return z((k,O)=>{let j;if(_!==void 0){if(j=u(()=>{const v=_.reason!==void 0?_.reason:new Ko(\"Aborted\",\"AbortError\"),I=[];p||I.push(()=>o._state===\"writable\"?bt(o,v):W(void 0)),g||I.push(()=>n._state===\"readable\"?ne(n,v):W(void 0)),G(()=>Promise.all(I.map(L=>L())),!0,v)},\"abortAlgorithm\"),_.aborted){j();return}_.addEventListener(\"abort\",j)}function oe(){return z((v,I)=>{function L(J){J?v():D(xe(),L,I)}u(L,\"next\"),L(!1)})}u(oe,\"pipeLoop\");function xe(){return q?W(!0):D(C._readyPromise,()=>z((v,I)=>{Ve(S,{_chunkSteps:u(L=>{P=D(cn(C,L),void 0,y),v(!1)},\"_chunkSteps\"),_closeSteps:u(()=>v(!0),\"_closeSteps\"),_errorSteps:I})}))}if(u(xe,\"pipeStep\"),pe(n,S._closedPromise,v=>(p?te(!0,v):G(()=>bt(o,v),!0,v),null)),pe(o,C._closedPromise,v=>(g?te(!0,v):G(()=>ne(n,v),!0,v),null)),Y(n,S._closedPromise,()=>(a?te():G(()=>Fo(C)),null)),ae(o)||o._state===\"closed\"){const v=new TypeError(\"the destination writable stream closed before all data could be piped to it\");g?te(!0,v):G(()=>ne(n,v),!0,v)}K(oe());function Pe(){const v=P;return D(P,()=>v!==P?Pe():void 0)}u(Pe,\"waitForWritesToFinish\");function pe(v,I,L){v._state===\"errored\"?L(v._storedError):M(I,L)}u(pe,\"isOrBecomesErrored\");function Y(v,I,L){v._state===\"closed\"?L():Z(I,L)}u(Y,\"isOrBecomesClosed\");function G(v,I,L){if(q)return;q=!0,o._state===\"writable\"&&!ae(o)?Z(Pe(),J):J();function J(){return E(v(),()=>be(I,L),Ue=>be(!0,Ue)),null}u(J,\"doTheRest\")}u(G,\"shutdownWithAction\");function te(v,I){q||(q=!0,o._state===\"writable\"&&!ae(o)?Z(Pe(),()=>be(v,I)):be(v,I))}u(te,\"shutdown\");function be(v,I){return fn(C),ue(S),_!==void 0&&_.removeEventListener(\"abort\",j),v?O(I):k(void 0),null}u(be,\"finalize\")})}u(Sn,\"ReadableStreamPipeTo\");class he{static{u(this,\"ReadableStreamDefaultController\")}constructor(){throw new TypeError(\"Illegal constructor\")}get desiredSize(){if(!Rt(this))throw Ct(\"desiredSize\");return pr(this)}close(){if(!Rt(this))throw Ct(\"close\");if(!$e(this))throw new TypeError(\"The stream is not in a state that permits close\");ke(this)}enqueue(o=void 0){if(!Rt(this))throw Ct(\"enqueue\");if(!$e(this))throw new TypeError(\"The stream is not in a state that permits enqueue\");return De(this,o)}error(o=void 0){if(!Rt(this))throw Ct(\"error\");re(this,o)}[Ot](o){_e(this);const a=this._cancelAlgorithm(o);return Tt(this),a}[Ft](o){const a=this._controlledReadableStream;if(this._queue.length>0){const p=Yt(this);this._closeRequested&&this._queue.length===0?(Tt(this),tt(a)):Xe(this),o._chunkSteps(p)}else Ar(a,o),Xe(this)}[It](){}}Object.defineProperties(he.prototype,{close:{enumerable:!0},enqueue:{enumerable:!0},error:{enumerable:!0},desiredSize:{enumerable:!0}}),w(he.prototype.close,\"close\"),w(he.prototype.enqueue,\"enqueue\"),w(he.prototype.error,\"error\"),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(he.prototype,Symbol.toStringTag,{value:\"ReadableStreamDefaultController\",configurable:!0});function Rt(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_controlledReadableStream\")?!1:n instanceof he}u(Rt,\"IsReadableStreamDefaultController\");function Xe(n){if(!wn(n))return;if(n._pulling){n._pullAgain=!0;return}n._pulling=!0;const a=n._pullAlgorithm();E(a,()=>(n._pulling=!1,n._pullAgain&&(n._pullAgain=!1,Xe(n)),null),p=>(re(n,p),null))}u(Xe,\"ReadableStreamDefaultControllerCallPullIfNeeded\");function wn(n){const o=n._controlledReadableStream;return!$e(n)||!n._started?!1:!!(Te(o)&&ot(o)>0||pr(n)>0)}u(wn,\"ReadableStreamDefaultControllerShouldCallPull\");function Tt(n){n._pullAlgorithm=void 0,n._cancelAlgorithm=void 0,n._strategySizeAlgorithm=void 0}u(Tt,\"ReadableStreamDefaultControllerClearAlgorithms\");function ke(n){if(!$e(n))return;const o=n._controlledReadableStream;n._closeRequested=!0,n._queue.length===0&&(Tt(n),tt(o))}u(ke,\"ReadableStreamDefaultControllerClose\");function De(n,o){if(!$e(n))return;const a=n._controlledReadableStream;if(Te(a)&&ot(a)>0)Ut(a,o,!1);else{let p;try{p=n._strategySizeAlgorithm(o)}catch(g){throw re(n,g),g}try{Gt(n,o,p)}catch(g){throw re(n,g),g}}Xe(n)}u(De,\"ReadableStreamDefaultControllerEnqueue\");function re(n,o){const a=n._controlledReadableStream;a._state===\"readable\"&&(_e(n),Tt(n),Pn(a,o))}u(re,\"ReadableStreamDefaultControllerError\");function pr(n){const o=n._controlledReadableStream._state;return o===\"errored\"?null:o===\"closed\"?0:n._strategyHWM-n._queueTotalSize}u(pr,\"ReadableStreamDefaultControllerGetDesiredSize\");function Jo(n){return!wn(n)}u(Jo,\"ReadableStreamDefaultControllerHasBackpressure\");function $e(n){const o=n._controlledReadableStream._state;return!n._closeRequested&&o===\"readable\"}u($e,\"ReadableStreamDefaultControllerCanCloseOrEnqueue\");function Rn(n,o,a,p,g,_,S){o._controlledReadableStream=n,o._queue=void 0,o._queueTotalSize=void 0,_e(o),o._started=!1,o._closeRequested=!1,o._pullAgain=!1,o._pulling=!1,o._strategySizeAlgorithm=S,o._strategyHWM=_,o._pullAlgorithm=p,o._cancelAlgorithm=g,n._readableStreamController=o;const C=a();E(W(C),()=>(o._started=!0,Xe(o),null),q=>(re(o,q),null))}u(Rn,\"SetUpReadableStreamDefaultController\");function Xo(n,o,a,p){const g=Object.create(he.prototype);let _,S,C;o.start!==void 0?_=u(()=>o.start(g),\"startAlgorithm\"):_=u(()=>{},\"startAlgorithm\"),o.pull!==void 0?S=u(()=>o.pull(g),\"pullAlgorithm\"):S=u(()=>W(void 0),\"pullAlgorithm\"),o.cancel!==void 0?C=u(q=>o.cancel(q),\"cancelAlgorithm\"):C=u(()=>W(void 0),\"cancelAlgorithm\"),Rn(n,g,_,S,C,a,p)}u(Xo,\"SetUpReadableStreamDefaultControllerFromUnderlyingSource\");function Ct(n){return new TypeError(`ReadableStreamDefaultController.prototype.${n} can only be used on a ReadableStreamDefaultController`)}u(Ct,\"defaultControllerBrandCheckException$1\");function ei(n,o){return ve(n._readableStreamController)?ri(n):ti(n)}u(ei,\"ReadableStreamTee\");function ti(n,o){const a=Fe(n);let p=!1,g=!1,_=!1,S=!1,C,q,P,k,O;const j=z(Y=>{O=Y});function oe(){return p?(g=!0,W(void 0)):(p=!0,Ve(a,{_chunkSteps:u(G=>{se(()=>{g=!1;const te=G,be=G;_||De(P._readableStreamController,te),S||De(k._readableStreamController,be),p=!1,g&&oe()})},\"_chunkSteps\"),_closeSteps:u(()=>{p=!1,_||ke(P._readableStreamController),S||ke(k._readableStreamController),(!_||!S)&&O(void 0)},\"_closeSteps\"),_errorSteps:u(()=>{p=!1},\"_errorSteps\")}),W(void 0))}u(oe,\"pullAlgorithm\");function xe(Y){if(_=!0,C=Y,S){const G=Qe([C,q]),te=ne(n,G);O(te)}return j}u(xe,\"cancel1Algorithm\");function Pe(Y){if(S=!0,q=Y,_){const G=Qe([C,q]),te=ne(n,G);O(te)}return j}u(Pe,\"cancel2Algorithm\");function pe(){}return u(pe,\"startAlgorithm\"),P=et(pe,oe,xe),k=et(pe,oe,Pe),M(a._closedPromise,Y=>(re(P._readableStreamController,Y),re(k._readableStreamController,Y),(!_||!S)&&O(void 0),null)),[P,k]}u(ti,\"ReadableStreamDefaultTee\");function ri(n){let o=Fe(n),a=!1,p=!1,g=!1,_=!1,S=!1,C,q,P,k,O;const j=z(v=>{O=v});function oe(v){M(v._closedPromise,I=>(v!==o||(ee(P._readableStreamController,I),ee(k._readableStreamController,I),(!_||!S)&&O(void 0)),null))}u(oe,\"forwardReaderError\");function xe(){Be(o)&&(ue(o),o=Fe(n),oe(o)),Ve(o,{_chunkSteps:u(I=>{se(()=>{p=!1,g=!1;const L=I;let J=I;if(!_&&!S)try{J=Dr(I)}catch(Ue){ee(P._readableStreamController,Ue),ee(k._readableStreamController,Ue),O(ne(n,Ue));return}_||lt(P._readableStreamController,L),S||lt(k._readableStreamController,J),a=!1,p?pe():g&&Y()})},\"_chunkSteps\"),_closeSteps:u(()=>{a=!1,_||Ye(P._readableStreamController),S||Ye(k._readableStreamController),P._readableStreamController._pendingPullIntos.length>0&&ft(P._readableStreamController,0),k._readableStreamController._pendingPullIntos.length>0&&ft(k._readableStreamController,0),(!_||!S)&&O(void 0)},\"_closeSteps\"),_errorSteps:u(()=>{a=!1},\"_errorSteps\")})}u(xe,\"pullWithDefaultReader\");function Pe(v,I){ye(o)&&(ue(o),o=Jr(n),oe(o));const L=I?k:P,J=I?P:k;tn(o,v,1,{_chunkSteps:u(Ne=>{se(()=>{p=!1,g=!1;const He=I?S:_;if(I?_:S)He||ct(L._readableStreamController,Ne);else{let Ln;try{Ln=Dr(Ne)}catch(_r){ee(L._readableStreamController,_r),ee(J._readableStreamController,_r),O(ne(n,_r));return}He||ct(L._readableStreamController,Ne),lt(J._readableStreamController,Ln)}a=!1,p?pe():g&&Y()})},\"_chunkSteps\"),_closeSteps:u(Ne=>{a=!1;const He=I?S:_,kt=I?_:S;He||Ye(L._readableStreamController),kt||Ye(J._readableStreamController),Ne!==void 0&&(He||ct(L._readableStreamController,Ne),!kt&&J._readableStreamController._pendingPullIntos.length>0&&ft(J._readableStreamController,0)),(!He||!kt)&&O(void 0)},\"_closeSteps\"),_errorSteps:u(()=>{a=!1},\"_errorSteps\")})}u(Pe,\"pullWithBYOBReader\");function pe(){if(a)return p=!0,W(void 0);a=!0;const v=er(P._readableStreamController);return v===null?xe():Pe(v._view,!1),W(void 0)}u(pe,\"pull1Algorithm\");function Y(){if(a)return g=!0,W(void 0);a=!0;const v=er(k._readableStreamController);return v===null?xe():Pe(v._view,!0),W(void 0)}u(Y,\"pull2Algorithm\");function G(v){if(_=!0,C=v,S){const I=Qe([C,q]),L=ne(n,I);O(L)}return j}u(G,\"cancel1Algorithm\");function te(v){if(S=!0,q=v,_){const I=Qe([C,q]),L=ne(n,I);O(L)}return j}u(te,\"cancel2Algorithm\");function be(){}return u(be,\"startAlgorithm\"),P=Cn(be,pe,G),k=Cn(be,Y,te),oe(o),[P,k]}u(ri,\"ReadableByteStreamTee\");function ni(n){return b(n)&&typeof n.getReader<\"u\"}u(ni,\"isReadableStreamLike\");function oi(n){return ni(n)?ai(n.getReader()):ii(n)}u(oi,\"ReadableStreamFrom\");function ii(n){let o;const a=Lr(n,\"async\"),p=y;function g(){let S;try{S=Gn(a)}catch(q){return T(q)}const C=W(S);return U(C,q=>{if(!b(q))throw new TypeError(\"The promise returned by the iterator.next() method must fulfill with an object\");if(Zn(q))ke(o._readableStreamController);else{const k=Kn(q);De(o._readableStreamController,k)}})}u(g,\"pullAlgorithm\");function _(S){const C=a.iterator;let q;try{q=at(C,\"return\")}catch(O){return T(O)}if(q===void 0)return W(void 0);let P;try{P=$(q,C,[S])}catch(O){return T(O)}const k=W(P);return U(k,O=>{if(!b(O))throw new TypeError(\"The promise returned by the iterator.return() method must fulfill with an object\")})}return u(_,\"cancelAlgorithm\"),o=et(p,g,_,0),o}u(ii,\"ReadableStreamFromIterable\");function ai(n){let o;const a=y;function p(){let _;try{_=n.read()}catch(S){return T(S)}return U(_,S=>{if(!b(S))throw new TypeError(\"The promise returned by the reader.read() method must fulfill with an object\");if(S.done)ke(o._readableStreamController);else{const C=S.value;De(o._readableStreamController,C)}})}u(p,\"pullAlgorithm\");function g(_){try{return W(n.cancel(_))}catch(S){return T(S)}}return u(g,\"cancelAlgorithm\"),o=et(a,p,g,0),o}u(ai,\"ReadableStreamFromDefaultReader\");function si(n,o){ie(n,o);const a=n,p=a?.autoAllocateChunkSize,g=a?.cancel,_=a?.pull,S=a?.start,C=a?.type;return{autoAllocateChunkSize:p===void 0?void 0:Mt(p,`${o} has member 'autoAllocateChunkSize' that`),cancel:g===void 0?void 0:ui(g,a,`${o} has member 'cancel' that`),pull:_===void 0?void 0:li(_,a,`${o} has member 'pull' that`),start:S===void 0?void 0:fi(S,a,`${o} has member 'start' that`),type:C===void 0?void 0:ci(C,`${o} has member 'type' that`)}}u(si,\"convertUnderlyingDefaultOrByteSource\");function ui(n,o,a){return X(n,a),p=>N(n,o,[p])}u(ui,\"convertUnderlyingSourceCancelCallback\");function li(n,o,a){return X(n,a),p=>N(n,o,[p])}u(li,\"convertUnderlyingSourcePullCallback\");function fi(n,o,a){return X(n,a),p=>$(n,o,[p])}u(fi,\"convertUnderlyingSourceStartCallback\");function ci(n,o){if(n=`${n}`,n!==\"bytes\")throw new TypeError(`${o} '${n}' is not a valid enumeration value for ReadableStreamType`);return n}u(ci,\"convertReadableStreamType\");function di(n,o){return ie(n,o),{preventCancel:!!n?.preventCancel}}u(di,\"convertIteratorOptions\");function Tn(n,o){ie(n,o);const a=n?.preventAbort,p=n?.preventCancel,g=n?.preventClose,_=n?.signal;return _!==void 0&&hi(_,`${o} has member 'signal' that`),{preventAbort:!!a,preventCancel:!!p,preventClose:!!g,signal:_}}u(Tn,\"convertPipeOptions\");function hi(n,o){if(!wo(n))throw new TypeError(`${o} is not an AbortSignal.`)}u(hi,\"assertAbortSignal\");function pi(n,o){ie(n,o);const a=n?.readable;Dt(a,\"readable\",\"ReadableWritablePair\"),xt(a,`${o} has member 'readable' that`);const p=n?.writable;return Dt(p,\"writable\",\"ReadableWritablePair\"),nn(p,`${o} has member 'writable' that`),{readable:a,writable:p}}u(pi,\"convertReadableWritablePair\");class H{static{u(this,\"ReadableStream\")}constructor(o={},a={}){o===void 0?o=null:Er(o,\"First parameter\");const p=pt(a,\"Second parameter\"),g=si(o,\"First parameter\");if(br(this),g.type===\"bytes\"){if(p.size!==void 0)throw new RangeError(\"The strategy for a byte stream cannot have a size function\");const _=Ze(p,0);so(this,g,_)}else{const _=ht(p),S=Ze(p,1);Xo(this,g,S,_)}}get locked(){if(!Re(this))throw Oe(\"locked\");return Te(this)}cancel(o=void 0){return Re(this)?Te(this)?T(new TypeError(\"Cannot cancel a stream that already has a reader\")):ne(this,o):T(Oe(\"cancel\"))}getReader(o=void 0){if(!Re(this))throw Oe(\"getReader\");return lo(o,\"First parameter\").mode===void 0?Fe(this):Jr(this)}pipeThrough(o,a={}){if(!Re(this))throw Oe(\"pipeThrough\");le(o,1,\"pipeThrough\");const p=pi(o,\"First parameter\"),g=Tn(a,\"Second parameter\");if(Te(this))throw new TypeError(\"ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream\");if(je(p.writable))throw new TypeError(\"ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream\");const _=Sn(this,p.writable,g.preventClose,g.preventAbort,g.preventCancel,g.signal);return K(_),p.readable}pipeTo(o,a={}){if(!Re(this))return T(Oe(\"pipeTo\"));if(o===void 0)return T(\"Parameter 1 is required in 'pipeTo'.\");if(!ze(o))return T(new TypeError(\"ReadableStream.prototype.pipeTo's first argument must be a WritableStream\"));let p;try{p=Tn(a,\"Second parameter\")}catch(g){return T(g)}return Te(this)?T(new TypeError(\"ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream\")):je(o)?T(new TypeError(\"ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream\")):Sn(this,o,p.preventClose,p.preventAbort,p.preventCancel,p.signal)}tee(){if(!Re(this))throw Oe(\"tee\");const o=ei(this);return Qe(o)}values(o=void 0){if(!Re(this))throw Oe(\"values\");const a=di(o,\"First parameter\");return Qn(this,a.preventCancel)}[Qt](o){return this.values(o)}static from(o){return oi(o)}}Object.defineProperties(H,{from:{enumerable:!0}}),Object.defineProperties(H.prototype,{cancel:{enumerable:!0},getReader:{enumerable:!0},pipeThrough:{enumerable:!0},pipeTo:{enumerable:!0},tee:{enumerable:!0},values:{enumerable:!0},locked:{enumerable:!0}}),w(H.from,\"from\"),w(H.prototype.cancel,\"cancel\"),w(H.prototype.getReader,\"getReader\"),w(H.prototype.pipeThrough,\"pipeThrough\"),w(H.prototype.pipeTo,\"pipeTo\"),w(H.prototype.tee,\"tee\"),w(H.prototype.values,\"values\"),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(H.prototype,Symbol.toStringTag,{value:\"ReadableStream\",configurable:!0}),Object.defineProperty(H.prototype,Qt,{value:H.prototype.values,writable:!0,configurable:!0});function et(n,o,a,p=1,g=()=>1){const _=Object.create(H.prototype);br(_);const S=Object.create(he.prototype);return Rn(_,S,n,o,a,p,g),_}u(et,\"CreateReadableStream\");function Cn(n,o,a){const p=Object.create(H.prototype);br(p);const g=Object.create(ce.prototype);return Kr(p,g,n,o,a,0,void 0),p}u(Cn,\"CreateReadableByteStream\");function br(n){n._state=\"readable\",n._reader=void 0,n._storedError=void 0,n._disturbed=!1}u(br,\"InitializeReadableStream\");function Re(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_readableStreamController\")?!1:n instanceof H}u(Re,\"IsReadableStream\");function Te(n){return n._reader!==void 0}u(Te,\"IsReadableStreamLocked\");function ne(n,o){if(n._disturbed=!0,n._state===\"closed\")return W(void 0);if(n._state===\"errored\")return T(n._storedError);tt(n);const a=n._reader;if(a!==void 0&&Be(a)){const g=a._readIntoRequests;a._readIntoRequests=new Q,g.forEach(_=>{_._closeSteps(void 0)})}const p=n._readableStreamController[Ot](o);return U(p,y)}u(ne,\"ReadableStreamCancel\");function tt(n){n._state=\"closed\";const o=n._reader;if(o!==void 0&&(Cr(o),ye(o))){const a=o._readRequests;o._readRequests=new Q,a.forEach(p=>{p._closeSteps()})}}u(tt,\"ReadableStreamClose\");function Pn(n,o){n._state=\"errored\",n._storedError=o;const a=n._reader;a!==void 0&&(Lt(a,o),ye(a)?qr(a,o):rn(a,o))}u(Pn,\"ReadableStreamError\");function Oe(n){return new TypeError(`ReadableStream.prototype.${n} can only be used on a ReadableStream`)}u(Oe,\"streamBrandCheckException$1\");function En(n,o){ie(n,o);const a=n?.highWaterMark;return Dt(a,\"highWaterMark\",\"QueuingStrategyInit\"),{highWaterMark:$t(a)}}u(En,\"convertQueuingStrategyInit\");const vn=u(n=>n.byteLength,\"byteLengthSizeFunction\");w(vn,\"size\");class Pt{static{u(this,\"ByteLengthQueuingStrategy\")}constructor(o){le(o,1,\"ByteLengthQueuingStrategy\"),o=En(o,\"First parameter\"),this._byteLengthQueuingStrategyHighWaterMark=o.highWaterMark}get highWaterMark(){if(!Bn(this))throw An(\"highWaterMark\");return this._byteLengthQueuingStrategyHighWaterMark}get size(){if(!Bn(this))throw An(\"size\");return vn}}Object.defineProperties(Pt.prototype,{highWaterMark:{enumerable:!0},size:{enumerable:!0}}),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(Pt.prototype,Symbol.toStringTag,{value:\"ByteLengthQueuingStrategy\",configurable:!0});function An(n){return new TypeError(`ByteLengthQueuingStrategy.prototype.${n} can only be used on a ByteLengthQueuingStrategy`)}u(An,\"byteLengthBrandCheckException\");function Bn(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_byteLengthQueuingStrategyHighWaterMark\")?!1:n instanceof Pt}u(Bn,\"IsByteLengthQueuingStrategy\");const qn=u(()=>1,\"countSizeFunction\");w(qn,\"size\");class Et{static{u(this,\"CountQueuingStrategy\")}constructor(o){le(o,1,\"CountQueuingStrategy\"),o=En(o,\"First parameter\"),this._countQueuingStrategyHighWaterMark=o.highWaterMark}get highWaterMark(){if(!kn(this))throw Wn(\"highWaterMark\");return this._countQueuingStrategyHighWaterMark}get size(){if(!kn(this))throw Wn(\"size\");return qn}}Object.defineProperties(Et.prototype,{highWaterMark:{enumerable:!0},size:{enumerable:!0}}),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(Et.prototype,Symbol.toStringTag,{value:\"CountQueuingStrategy\",configurable:!0});function Wn(n){return new TypeError(`CountQueuingStrategy.prototype.${n} can only be used on a CountQueuingStrategy`)}u(Wn,\"countBrandCheckException\");function kn(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_countQueuingStrategyHighWaterMark\")?!1:n instanceof Et}u(kn,\"IsCountQueuingStrategy\");function bi(n,o){ie(n,o);const a=n?.cancel,p=n?.flush,g=n?.readableType,_=n?.start,S=n?.transform,C=n?.writableType;return{cancel:a===void 0?void 0:_i(a,n,`${o} has member 'cancel' that`),flush:p===void 0?void 0:mi(p,n,`${o} has member 'flush' that`),readableType:g,start:_===void 0?void 0:yi(_,n,`${o} has member 'start' that`),transform:S===void 0?void 0:gi(S,n,`${o} has member 'transform' that`),writableType:C}}u(bi,\"convertTransformer\");function mi(n,o,a){return X(n,a),p=>N(n,o,[p])}u(mi,\"convertTransformerFlushCallback\");function yi(n,o,a){return X(n,a),p=>$(n,o,[p])}u(yi,\"convertTransformerStartCallback\");function gi(n,o,a){return X(n,a),(p,g)=>N(n,o,[p,g])}u(gi,\"convertTransformerTransformCallback\");function _i(n,o,a){return X(n,a),p=>N(n,o,[p])}u(_i,\"convertTransformerCancelCallback\");class vt{static{u(this,\"TransformStream\")}constructor(o={},a={},p={}){o===void 0&&(o=null);const g=pt(a,\"Second parameter\"),_=pt(p,\"Third parameter\"),S=bi(o,\"First parameter\");if(S.readableType!==void 0)throw new RangeError(\"Invalid readableType specified\");if(S.writableType!==void 0)throw new RangeError(\"Invalid writableType specified\");const C=Ze(_,0),q=ht(_),P=Ze(g,1),k=ht(g);let O;const j=z(oe=>{O=oe});Si(this,j,P,k,C,q),Ri(this,S),S.start!==void 0?O(S.start(this._transformStreamController)):O(void 0)}get readable(){if(!On(this))throw jn(\"readable\");return this._readable}get writable(){if(!On(this))throw jn(\"writable\");return this._writable}}Object.defineProperties(vt.prototype,{readable:{enumerable:!0},writable:{enumerable:!0}}),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(vt.prototype,Symbol.toStringTag,{value:\"TransformStream\",configurable:!0});function Si(n,o,a,p,g,_){function S(){return o}u(S,\"startAlgorithm\");function C(j){return Pi(n,j)}u(C,\"writeAlgorithm\");function q(j){return Ei(n,j)}u(q,\"abortAlgorithm\");function P(){return vi(n)}u(P,\"closeAlgorithm\"),n._writable=Co(S,C,P,q,a,p);function k(){return Ai(n)}u(k,\"pullAlgorithm\");function O(j){return Bi(n,j)}u(O,\"cancelAlgorithm\"),n._readable=et(S,k,O,g,_),n._backpressure=void 0,n._backpressureChangePromise=void 0,n._backpressureChangePromise_resolve=void 0,At(n,!0),n._transformStreamController=void 0}u(Si,\"InitializeTransformStream\");function On(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_transformStreamController\")?!1:n instanceof vt}u(On,\"IsTransformStream\");function Fn(n,o){re(n._readable._readableStreamController,o),mr(n,o)}u(Fn,\"TransformStreamError\");function mr(n,o){qt(n._transformStreamController),Ke(n._writable._writableStreamController,o),yr(n)}u(mr,\"TransformStreamErrorWritableAndUnblockWrite\");function yr(n){n._backpressure&&At(n,!1)}u(yr,\"TransformStreamUnblockWrite\");function At(n,o){n._backpressureChangePromise!==void 0&&n._backpressureChangePromise_resolve(),n._backpressureChangePromise=z(a=>{n._backpressureChangePromise_resolve=a}),n._backpressure=o}u(At,\"TransformStreamSetBackpressure\");class Ce{static{u(this,\"TransformStreamDefaultController\")}constructor(){throw new TypeError(\"Illegal constructor\")}get desiredSize(){if(!Bt(this))throw Wt(\"desiredSize\");const o=this._controlledTransformStream._readable._readableStreamController;return pr(o)}enqueue(o=void 0){if(!Bt(this))throw Wt(\"enqueue\");In(this,o)}error(o=void 0){if(!Bt(this))throw Wt(\"error\");Ti(this,o)}terminate(){if(!Bt(this))throw Wt(\"terminate\");Ci(this)}}Object.defineProperties(Ce.prototype,{enqueue:{enumerable:!0},error:{enumerable:!0},terminate:{enumerable:!0},desiredSize:{enumerable:!0}}),w(Ce.prototype.enqueue,\"enqueue\"),w(Ce.prototype.error,\"error\"),w(Ce.prototype.terminate,\"terminate\"),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(Ce.prototype,Symbol.toStringTag,{value:\"TransformStreamDefaultController\",configurable:!0});function Bt(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_controlledTransformStream\")?!1:n instanceof Ce}u(Bt,\"IsTransformStreamDefaultController\");function wi(n,o,a,p,g){o._controlledTransformStream=n,n._transformStreamController=o,o._transformAlgorithm=a,o._flushAlgorithm=p,o._cancelAlgorithm=g,o._finishPromise=void 0,o._finishPromise_resolve=void 0,o._finishPromise_reject=void 0}u(wi,\"SetUpTransformStreamDefaultController\");function Ri(n,o){const a=Object.create(Ce.prototype);let p,g,_;o.transform!==void 0?p=u(S=>o.transform(S,a),\"transformAlgorithm\"):p=u(S=>{try{return In(a,S),W(void 0)}catch(C){return T(C)}},\"transformAlgorithm\"),o.flush!==void 0?g=u(()=>o.flush(a),\"flushAlgorithm\"):g=u(()=>W(void 0),\"flushAlgorithm\"),o.cancel!==void 0?_=u(S=>o.cancel(S),\"cancelAlgorithm\"):_=u(()=>W(void 0),\"cancelAlgorithm\"),wi(n,a,p,g,_)}u(Ri,\"SetUpTransformStreamDefaultControllerFromTransformer\");function qt(n){n._transformAlgorithm=void 0,n._flushAlgorithm=void 0,n._cancelAlgorithm=void 0}u(qt,\"TransformStreamDefaultControllerClearAlgorithms\");function In(n,o){const a=n._controlledTransformStream,p=a._readable._readableStreamController;if(!$e(p))throw new TypeError(\"Readable side is not in a state that permits enqueue\");try{De(p,o)}catch(_){throw mr(a,_),a._readable._storedError}Jo(p)!==a._backpressure&&At(a,!0)}u(In,\"TransformStreamDefaultControllerEnqueue\");function Ti(n,o){Fn(n._controlledTransformStream,o)}u(Ti,\"TransformStreamDefaultControllerError\");function zn(n,o){const a=n._transformAlgorithm(o);return U(a,void 0,p=>{throw Fn(n._controlledTransformStream,p),p})}u(zn,\"TransformStreamDefaultControllerPerformTransform\");function Ci(n){const o=n._controlledTransformStream,a=o._readable._readableStreamController;ke(a);const p=new TypeError(\"TransformStream terminated\");mr(o,p)}u(Ci,\"TransformStreamDefaultControllerTerminate\");function Pi(n,o){const a=n._transformStreamController;if(n._backpressure){const p=n._backpressureChangePromise;return U(p,()=>{const g=n._writable;if(g._state===\"erroring\")throw g._storedError;return zn(a,o)})}return zn(a,o)}u(Pi,\"TransformStreamDefaultSinkWriteAlgorithm\");function Ei(n,o){const a=n._transformStreamController;if(a._finishPromise!==void 0)return a._finishPromise;const p=n._readable;a._finishPromise=z((_,S)=>{a._finishPromise_resolve=_,a._finishPromise_reject=S});const g=a._cancelAlgorithm(o);return qt(a),E(g,()=>(p._state===\"errored\"?Me(a,p._storedError):(re(p._readableStreamController,o),gr(a)),null),_=>(re(p._readableStreamController,_),Me(a,_),null)),a._finishPromise}u(Ei,\"TransformStreamDefaultSinkAbortAlgorithm\");function vi(n){const o=n._transformStreamController;if(o._finishPromise!==void 0)return o._finishPromise;const a=n._readable;o._finishPromise=z((g,_)=>{o._finishPromise_resolve=g,o._finishPromise_reject=_});const p=o._flushAlgorithm();return qt(o),E(p,()=>(a._state===\"errored\"?Me(o,a._storedError):(ke(a._readableStreamController),gr(o)),null),g=>(re(a._readableStreamController,g),Me(o,g),null)),o._finishPromise}u(vi,\"TransformStreamDefaultSinkCloseAlgorithm\");function Ai(n){return At(n,!1),n._backpressureChangePromise}u(Ai,\"TransformStreamDefaultSourcePullAlgorithm\");function Bi(n,o){const a=n._transformStreamController;if(a._finishPromise!==void 0)return a._finishPromise;const p=n._writable;a._finishPromise=z((_,S)=>{a._finishPromise_resolve=_,a._finishPromise_reject=S});const g=a._cancelAlgorithm(o);return qt(a),E(g,()=>(p._state===\"errored\"?Me(a,p._storedError):(Ke(p._writableStreamController,o),yr(n),gr(a)),null),_=>(Ke(p._writableStreamController,_),yr(n),Me(a,_),null)),a._finishPromise}u(Bi,\"TransformStreamDefaultSourceCancelAlgorithm\");function Wt(n){return new TypeError(`TransformStreamDefaultController.prototype.${n} can only be used on a TransformStreamDefaultController`)}u(Wt,\"defaultControllerBrandCheckException\");function gr(n){n._finishPromise_resolve!==void 0&&(n._finishPromise_resolve(),n._finishPromise_resolve=void 0,n._finishPromise_reject=void 0)}u(gr,\"defaultControllerFinishPromiseResolve\");function Me(n,o){n._finishPromise_reject!==void 0&&(K(n._finishPromise),n._finishPromise_reject(o),n._finishPromise_resolve=void 0,n._finishPromise_reject=void 0)}u(Me,\"defaultControllerFinishPromiseReject\");function jn(n){return new TypeError(`TransformStream.prototype.${n} can only be used on a TransformStream`)}u(jn,\"streamBrandCheckException\"),d.ByteLengthQueuingStrategy=Pt,d.CountQueuingStrategy=Et,d.ReadableByteStreamController=ce,d.ReadableStream=H,d.ReadableStreamBYOBReader=Se,d.ReadableStreamBYOBRequest=Ee,d.ReadableStreamDefaultController=he,d.ReadableStreamDefaultReader=me,d.TransformStream=vt,d.TransformStreamDefaultController=Ce,d.WritableStream=we,d.WritableStreamDefaultController=Le,d.WritableStreamDefaultWriter=de})}(ponyfill_es2018$1,ponyfill_es2018$1.exports)),ponyfill_es2018$1.exports}u(requirePonyfill_es2018,\"requirePonyfill_es2018\");var hasRequiredStreams;function requireStreams(){if(hasRequiredStreams)return streams;hasRequiredStreams=1;const c=65536;if(!globalThis.ReadableStream)try{const l=__webpack_require__(/*! node:process */ \"node:process\"),{emitWarning:d}=l;try{l.emitWarning=()=>{},Object.assign(globalThis,__webpack_require__(/*! node:stream/web */ \"node:stream/web\")),l.emitWarning=d}catch(y){throw l.emitWarning=d,y}}catch{Object.assign(globalThis,requirePonyfill_es2018())}try{const{Blob:l}=__webpack_require__(/*! buffer */ \"buffer\");l&&!l.prototype.stream&&(l.prototype.stream=u(function(y){let b=0;const R=this;return new ReadableStream({type:\"bytes\",async pull(w){const F=await R.slice(b,Math.min(R.size,b+c)).arrayBuffer();b+=F.byteLength,w.enqueue(new Uint8Array(F)),b===R.size&&w.close()}})},\"name\"))}catch{}return streams}u(requireStreams,\"requireStreams\"),requireStreams();/*! fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */const POOL_SIZE=65536;async function*toIterator(c,l=!0){for(const d of c)if(\"stream\"in d)yield*d.stream();else if(ArrayBuffer.isView(d))if(l){let y=d.byteOffset;const b=d.byteOffset+d.byteLength;for(;y!==b;){const R=Math.min(b-y,POOL_SIZE),w=d.buffer.slice(y,y+R);y+=w.byteLength,yield new Uint8Array(w)}}else yield d;else{let y=0,b=d;for(;y!==b.size;){const w=await b.slice(y,Math.min(b.size,y+POOL_SIZE)).arrayBuffer();y+=w.byteLength,yield new Uint8Array(w)}}}u(toIterator,\"toIterator\");const _Blob=class Sr{static{u(this,\"Blob\")}#e=[];#t=\"\";#r=0;#n=\"transparent\";constructor(l=[],d={}){if(typeof l!=\"object\"||l===null)throw new TypeError(\"Failed to construct 'Blob': The provided value cannot be converted to a sequence.\");if(typeof l[Symbol.iterator]!=\"function\")throw new TypeError(\"Failed to construct 'Blob': The object must have a callable @@iterator property.\");if(typeof d!=\"object\"&&typeof d!=\"function\")throw new TypeError(\"Failed to construct 'Blob': parameter 2 cannot convert to dictionary.\");d===null&&(d={});const y=new TextEncoder;for(const R of l){let w;ArrayBuffer.isView(R)?w=new Uint8Array(R.buffer.slice(R.byteOffset,R.byteOffset+R.byteLength)):R instanceof ArrayBuffer?w=new Uint8Array(R.slice(0)):R instanceof Sr?w=R:w=y.encode(`${R}`),this.#r+=ArrayBuffer.isView(w)?w.byteLength:w.size,this.#e.push(w)}this.#n=`${d.endings===void 0?\"transparent\":d.endings}`;const b=d.type===void 0?\"\":String(d.type);this.#t=/^[\\x20-\\x7E]*$/.test(b)?b:\"\"}get size(){return this.#r}get type(){return this.#t}async text(){const l=new TextDecoder;let d=\"\";for await(const y of toIterator(this.#e,!1))d+=l.decode(y,{stream:!0});return d+=l.decode(),d}async arrayBuffer(){const l=new Uint8Array(this.size);let d=0;for await(const y of toIterator(this.#e,!1))l.set(y,d),d+=y.length;return l.buffer}stream(){const l=toIterator(this.#e,!0);return new globalThis.ReadableStream({type:\"bytes\",async pull(d){const y=await l.next();y.done?d.close():d.enqueue(y.value)},async cancel(){await l.return()}})}slice(l=0,d=this.size,y=\"\"){const{size:b}=this;let R=l<0?Math.max(b+l,0):Math.min(l,b),w=d<0?Math.max(b+d,0):Math.min(d,b);const A=Math.max(w-R,0),F=this.#e,B=[];let z=0;for(const T of F){if(z>=A)break;const D=ArrayBuffer.isView(T)?T.byteLength:T.size;if(R&&D<=R)R-=D,w-=D;else{let E;ArrayBuffer.isView(T)?(E=T.subarray(R,Math.min(D,w)),z+=E.byteLength):(E=T.slice(R,Math.min(D,w)),z+=E.size),w-=D,B.push(E),R=0}}const W=new Sr([],{type:String(y).toLowerCase()});return W.#r=A,W.#e=B,W}get[Symbol.toStringTag](){return\"Blob\"}static[Symbol.hasInstance](l){return l&&typeof l==\"object\"&&typeof l.constructor==\"function\"&&(typeof l.stream==\"function\"||typeof l.arrayBuffer==\"function\")&&/^(Blob|File)$/.test(l[Symbol.toStringTag])}};Object.defineProperties(_Blob.prototype,{size:{enumerable:!0},type:{enumerable:!0},slice:{enumerable:!0}});const Blob=_Blob,_File=class extends Blob{static{u(this,\"File\")}#e=0;#t=\"\";constructor(l,d,y={}){if(arguments.length<2)throw new TypeError(`Failed to construct 'File': 2 arguments required, but only ${arguments.length} present.`);super(l,y),y===null&&(y={});const b=y.lastModified===void 0?Date.now():Number(y.lastModified);Number.isNaN(b)||(this.#e=b),this.#t=String(d)}get name(){return this.#t}get lastModified(){return this.#e}get[Symbol.toStringTag](){return\"File\"}static[Symbol.hasInstance](l){return!!l&&l instanceof Blob&&/^(File)$/.test(l[Symbol.toStringTag])}},File=_File;/*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */var{toStringTag:t$1,iterator:i,hasInstance:h}=Symbol,r=Math.random,m=\"append,set,get,getAll,delete,keys,values,entries,forEach,constructor\".split(\",\"),f=u((c,l,d)=>(c+=\"\",/^(Blob|File)$/.test(l&&l[t$1])?[(d=d!==void 0?d+\"\":l[t$1]==\"File\"?l.name:\"blob\",c),l.name!==d||l[t$1]==\"blob\"?new File([l],d,l):l]:[c,l+\"\"]),\"f\"),e$1=u((c,l)=>(l?c:c.replace(/\\r?\\n|\\r/g,`\\r\n`)).replace(/\\n/g,\"%0A\").replace(/\\r/g,\"%0D\").replace(/\"/g,\"%22\"),\"e$1\"),x=u((c,l,d)=>{if(l.length<d)throw new TypeError(`Failed to execute '${c}' on 'FormData': ${d} arguments required, but only ${l.length} present.`)},\"x\");const FormData=class{static{u(this,\"FormData\")}#e=[];constructor(...l){if(l.length)throw new TypeError(\"Failed to construct 'FormData': parameter 1 is not of type 'HTMLFormElement'.\")}get[t$1](){return\"FormData\"}[i](){return this.entries()}static[h](l){return l&&typeof l==\"object\"&&l[t$1]===\"FormData\"&&!m.some(d=>typeof l[d]!=\"function\")}append(...l){x(\"append\",arguments,2),this.#e.push(f(...l))}delete(l){x(\"delete\",arguments,1),l+=\"\",this.#e=this.#e.filter(([d])=>d!==l)}get(l){x(\"get\",arguments,1),l+=\"\";for(var d=this.#e,y=d.length,b=0;b<y;b++)if(d[b][0]===l)return d[b][1];return null}getAll(l,d){return x(\"getAll\",arguments,1),d=[],l+=\"\",this.#e.forEach(y=>y[0]===l&&d.push(y[1])),d}has(l){return x(\"has\",arguments,1),l+=\"\",this.#e.some(d=>d[0]===l)}forEach(l,d){x(\"forEach\",arguments,1);for(var[y,b]of this)l.call(d,b,y,this)}set(...l){x(\"set\",arguments,2);var d=[],y=!0;l=f(...l),this.#e.forEach(b=>{b[0]===l[0]?y&&(y=!d.push(l)):d.push(b)}),y&&d.push(l),this.#e=d}*entries(){yield*this.#e}*keys(){for(var[l]of this)yield l}*values(){for(var[,l]of this)yield l}};function formDataToBlob(c,l=Blob){var d=`${r()}${r()}`.replace(/\\./g,\"\").slice(-28).padStart(32,\"-\"),y=[],b=`--${d}\\r\nContent-Disposition: form-data; name=\"`;return c.forEach((R,w)=>typeof R==\"string\"?y.push(b+e$1(w)+`\"\\r\n\\r\n${R.replace(/\\r(?!\\n)|(?<!\\r)\\n/g,`\\r\n`)}\\r\n`):y.push(b+e$1(w)+`\"; filename=\"${e$1(R.name,1)}\"\\r\nContent-Type: ${R.type||\"application/octet-stream\"}\\r\n\\r\n`,R,`\\r\n`)),y.push(`--${d}--`),new l(y,{type:\"multipart/form-data; boundary=\"+d})}u(formDataToBlob,\"formDataToBlob\");class FetchBaseError extends Error{static{u(this,\"FetchBaseError\")}constructor(l,d){super(l),Error.captureStackTrace(this,this.constructor),this.type=d}get name(){return this.constructor.name}get[Symbol.toStringTag](){return this.constructor.name}}class FetchError extends FetchBaseError{static{u(this,\"FetchError\")}constructor(l,d,y){super(l,d),y&&(this.code=this.errno=y.code,this.erroredSysCall=y.syscall)}}const NAME=Symbol.toStringTag,isURLSearchParameters=u(c=>typeof c==\"object\"&&typeof c.append==\"function\"&&typeof c.delete==\"function\"&&typeof c.get==\"function\"&&typeof c.getAll==\"function\"&&typeof c.has==\"function\"&&typeof c.set==\"function\"&&typeof c.sort==\"function\"&&c[NAME]===\"URLSearchParams\",\"isURLSearchParameters\"),isBlob=u(c=>c&&typeof c==\"object\"&&typeof c.arrayBuffer==\"function\"&&typeof c.type==\"string\"&&typeof c.stream==\"function\"&&typeof c.constructor==\"function\"&&/^(Blob|File)$/.test(c[NAME]),\"isBlob\"),isAbortSignal=u(c=>typeof c==\"object\"&&(c[NAME]===\"AbortSignal\"||c[NAME]===\"EventTarget\"),\"isAbortSignal\"),isDomainOrSubdomain=u((c,l)=>{const d=new URL(l).hostname,y=new URL(c).hostname;return d===y||d.endsWith(`.${y}`)},\"isDomainOrSubdomain\"),isSameProtocol=u((c,l)=>{const d=new URL(l).protocol,y=new URL(c).protocol;return d===y},\"isSameProtocol\"),pipeline=require$$0$1.promisify(Stream__default.pipeline),INTERNALS$2=Symbol(\"Body internals\");class Body{static{u(this,\"Body\")}constructor(l,{size:d=0}={}){let y=null;l===null?l=null:isURLSearchParameters(l)?l=require$$0.Buffer.from(l.toString()):isBlob(l)||require$$0.Buffer.isBuffer(l)||(require$$0$1.types.isAnyArrayBuffer(l)?l=require$$0.Buffer.from(l):ArrayBuffer.isView(l)?l=require$$0.Buffer.from(l.buffer,l.byteOffset,l.byteLength):l instanceof Stream__default||(l instanceof FormData?(l=formDataToBlob(l),y=l.type.split(\"=\")[1]):l=require$$0.Buffer.from(String(l))));let b=l;require$$0.Buffer.isBuffer(l)?b=Stream__default.Readable.from(l):isBlob(l)&&(b=Stream__default.Readable.from(l.stream())),this[INTERNALS$2]={body:l,stream:b,boundary:y,disturbed:!1,error:null},this.size=d,l instanceof Stream__default&&l.on(\"error\",R=>{const w=R instanceof FetchBaseError?R:new FetchError(`Invalid response body while trying to fetch ${this.url}: ${R.message}`,\"system\",R);this[INTERNALS$2].error=w})}get body(){return this[INTERNALS$2].stream}get bodyUsed(){return this[INTERNALS$2].disturbed}async arrayBuffer(){const{buffer:l,byteOffset:d,byteLength:y}=await consumeBody(this);return l.slice(d,d+y)}async formData(){const l=this.headers.get(\"content-type\");if(l.startsWith(\"application/x-www-form-urlencoded\")){const y=new FormData,b=new URLSearchParams(await this.text());for(const[R,w]of b)y.append(R,w);return y}const{toFormData:d}=await __webpack_require__.e(/*! import() */ \"vendor-chunks/node-fetch-native\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./chunks/multipart-parser.cjs */ \"(rsc)/./node_modules/node-fetch-native/dist/chunks/multipart-parser.cjs\", 19));return d(this.body,l)}async blob(){const l=this.headers&&this.headers.get(\"content-type\")||this[INTERNALS$2].body&&this[INTERNALS$2].body.type||\"\",d=await this.arrayBuffer();return new Blob([d],{type:l})}async json(){const l=await this.text();return JSON.parse(l)}async text(){const l=await consumeBody(this);return new TextDecoder().decode(l)}buffer(){return consumeBody(this)}}Body.prototype.buffer=require$$0$1.deprecate(Body.prototype.buffer,\"Please use 'response.arrayBuffer()' instead of 'response.buffer()'\",\"node-fetch#buffer\"),Object.defineProperties(Body.prototype,{body:{enumerable:!0},bodyUsed:{enumerable:!0},arrayBuffer:{enumerable:!0},blob:{enumerable:!0},json:{enumerable:!0},text:{enumerable:!0},data:{get:require$$0$1.deprecate(()=>{},\"data doesn't exist, use json(), text(), arrayBuffer(), or body instead\",\"https://github.com/node-fetch/node-fetch/issues/1000 (response)\")}});async function consumeBody(c){if(c[INTERNALS$2].disturbed)throw new TypeError(`body used already for: ${c.url}`);if(c[INTERNALS$2].disturbed=!0,c[INTERNALS$2].error)throw c[INTERNALS$2].error;const{body:l}=c;if(l===null||!(l instanceof Stream__default))return require$$0.Buffer.alloc(0);const d=[];let y=0;try{for await(const b of l){if(c.size>0&&y+b.length>c.size){const R=new FetchError(`content size at ${c.url} over limit: ${c.size}`,\"max-size\");throw l.destroy(R),R}y+=b.length,d.push(b)}}catch(b){throw b instanceof FetchBaseError?b:new FetchError(`Invalid response body while trying to fetch ${c.url}: ${b.message}`,\"system\",b)}if(l.readableEnded===!0||l._readableState.ended===!0)try{return d.every(b=>typeof b==\"string\")?require$$0.Buffer.from(d.join(\"\")):require$$0.Buffer.concat(d,y)}catch(b){throw new FetchError(`Could not create Buffer from response body for ${c.url}: ${b.message}`,\"system\",b)}else throw new FetchError(`Premature close of server response while trying to fetch ${c.url}`)}u(consumeBody,\"consumeBody\");const clone=u((c,l)=>{let d,y,{body:b}=c[INTERNALS$2];if(c.bodyUsed)throw new Error(\"cannot clone body after it is used\");return b instanceof Stream__default&&typeof b.getBoundary!=\"function\"&&(d=new Stream.PassThrough({highWaterMark:l}),y=new Stream.PassThrough({highWaterMark:l}),b.pipe(d),b.pipe(y),c[INTERNALS$2].stream=d,b=y),b},\"clone\"),getNonSpecFormDataBoundary=require$$0$1.deprecate(c=>c.getBoundary(),\"form-data doesn't follow the spec and requires special treatment. Use alternative package\",\"https://github.com/node-fetch/node-fetch/issues/1167\"),extractContentType=u((c,l)=>c===null?null:typeof c==\"string\"?\"text/plain;charset=UTF-8\":isURLSearchParameters(c)?\"application/x-www-form-urlencoded;charset=UTF-8\":isBlob(c)?c.type||null:require$$0.Buffer.isBuffer(c)||require$$0$1.types.isAnyArrayBuffer(c)||ArrayBuffer.isView(c)?null:c instanceof FormData?`multipart/form-data; boundary=${l[INTERNALS$2].boundary}`:c&&typeof c.getBoundary==\"function\"?`multipart/form-data;boundary=${getNonSpecFormDataBoundary(c)}`:c instanceof Stream__default?null:\"text/plain;charset=UTF-8\",\"extractContentType\"),getTotalBytes=u(c=>{const{body:l}=c[INTERNALS$2];return l===null?0:isBlob(l)?l.size:require$$0.Buffer.isBuffer(l)?l.length:l&&typeof l.getLengthSync==\"function\"&&l.hasKnownLength&&l.hasKnownLength()?l.getLengthSync():null},\"getTotalBytes\"),writeToStream=u(async(c,{body:l})=>{l===null?c.end():await pipeline(l,c)},\"writeToStream\"),validateHeaderName=typeof http__default.validateHeaderName==\"function\"?http__default.validateHeaderName:c=>{if(!/^[\\^`\\-\\w!#$%&'*+.|~]+$/.test(c)){const l=new TypeError(`Header name must be a valid HTTP token [${c}]`);throw Object.defineProperty(l,\"code\",{value:\"ERR_INVALID_HTTP_TOKEN\"}),l}},validateHeaderValue=typeof http__default.validateHeaderValue==\"function\"?http__default.validateHeaderValue:(c,l)=>{if(/[^\\t\\u0020-\\u007E\\u0080-\\u00FF]/.test(l)){const d=new TypeError(`Invalid character in header content [\"${c}\"]`);throw Object.defineProperty(d,\"code\",{value:\"ERR_INVALID_CHAR\"}),d}};class Headers extends URLSearchParams{static{u(this,\"Headers\")}constructor(l){let d=[];if(l instanceof Headers){const y=l.raw();for(const[b,R]of Object.entries(y))d.push(...R.map(w=>[b,w]))}else if(l!=null)if(typeof l==\"object\"&&!require$$0$1.types.isBoxedPrimitive(l)){const y=l[Symbol.iterator];if(y==null)d.push(...Object.entries(l));else{if(typeof y!=\"function\")throw new TypeError(\"Header pairs must be iterable\");d=[...l].map(b=>{if(typeof b!=\"object\"||require$$0$1.types.isBoxedPrimitive(b))throw new TypeError(\"Each header pair must be an iterable object\");return[...b]}).map(b=>{if(b.length!==2)throw new TypeError(\"Each header pair must be a name/value tuple\");return[...b]})}}else throw new TypeError(\"Failed to construct 'Headers': The provided value is not of type '(sequence<sequence<ByteString>> or record<ByteString, ByteString>)\");return d=d.length>0?d.map(([y,b])=>(validateHeaderName(y),validateHeaderValue(y,String(b)),[String(y).toLowerCase(),String(b)])):void 0,super(d),new Proxy(this,{get(y,b,R){switch(b){case\"append\":case\"set\":return(w,A)=>(validateHeaderName(w),validateHeaderValue(w,String(A)),URLSearchParams.prototype[b].call(y,String(w).toLowerCase(),String(A)));case\"delete\":case\"has\":case\"getAll\":return w=>(validateHeaderName(w),URLSearchParams.prototype[b].call(y,String(w).toLowerCase()));case\"keys\":return()=>(y.sort(),new Set(URLSearchParams.prototype.keys.call(y)).keys());default:return Reflect.get(y,b,R)}}})}get[Symbol.toStringTag](){return this.constructor.name}toString(){return Object.prototype.toString.call(this)}get(l){const d=this.getAll(l);if(d.length===0)return null;let y=d.join(\", \");return/^content-encoding$/i.test(l)&&(y=y.toLowerCase()),y}forEach(l,d=void 0){for(const y of this.keys())Reflect.apply(l,d,[this.get(y),y,this])}*values(){for(const l of this.keys())yield this.get(l)}*entries(){for(const l of this.keys())yield[l,this.get(l)]}[Symbol.iterator](){return this.entries()}raw(){return[...this.keys()].reduce((l,d)=>(l[d]=this.getAll(d),l),{})}[Symbol.for(\"nodejs.util.inspect.custom\")](){return[...this.keys()].reduce((l,d)=>{const y=this.getAll(d);return d===\"host\"?l[d]=y[0]:l[d]=y.length>1?y:y[0],l},{})}}Object.defineProperties(Headers.prototype,[\"get\",\"entries\",\"forEach\",\"values\"].reduce((c,l)=>(c[l]={enumerable:!0},c),{}));function fromRawHeaders(c=[]){return new Headers(c.reduce((l,d,y,b)=>(y%2===0&&l.push(b.slice(y,y+2)),l),[]).filter(([l,d])=>{try{return validateHeaderName(l),validateHeaderValue(l,String(d)),!0}catch{return!1}}))}u(fromRawHeaders,\"fromRawHeaders\");const redirectStatus=new Set([301,302,303,307,308]),isRedirect=u(c=>redirectStatus.has(c),\"isRedirect\"),INTERNALS$1=Symbol(\"Response internals\");class Response extends Body{static{u(this,\"Response\")}constructor(l=null,d={}){super(l,d);const y=d.status!=null?d.status:200,b=new Headers(d.headers);if(l!==null&&!b.has(\"Content-Type\")){const R=extractContentType(l,this);R&&b.append(\"Content-Type\",R)}this[INTERNALS$1]={type:\"default\",url:d.url,status:y,statusText:d.statusText||\"\",headers:b,counter:d.counter,highWaterMark:d.highWaterMark}}get type(){return this[INTERNALS$1].type}get url(){return this[INTERNALS$1].url||\"\"}get status(){return this[INTERNALS$1].status}get ok(){return this[INTERNALS$1].status>=200&&this[INTERNALS$1].status<300}get redirected(){return this[INTERNALS$1].counter>0}get statusText(){return this[INTERNALS$1].statusText}get headers(){return this[INTERNALS$1].headers}get highWaterMark(){return this[INTERNALS$1].highWaterMark}clone(){return new Response(clone(this,this.highWaterMark),{type:this.type,url:this.url,status:this.status,statusText:this.statusText,headers:this.headers,ok:this.ok,redirected:this.redirected,size:this.size,highWaterMark:this.highWaterMark})}static redirect(l,d=302){if(!isRedirect(d))throw new RangeError('Failed to execute \"redirect\" on \"response\": Invalid status code');return new Response(null,{headers:{location:new URL(l).toString()},status:d})}static error(){const l=new Response(null,{status:0,statusText:\"\"});return l[INTERNALS$1].type=\"error\",l}static json(l=void 0,d={}){const y=JSON.stringify(l);if(y===void 0)throw new TypeError(\"data is not JSON serializable\");const b=new Headers(d&&d.headers);return b.has(\"content-type\")||b.set(\"content-type\",\"application/json\"),new Response(y,{...d,headers:b})}get[Symbol.toStringTag](){return\"Response\"}}Object.defineProperties(Response.prototype,{type:{enumerable:!0},url:{enumerable:!0},status:{enumerable:!0},ok:{enumerable:!0},redirected:{enumerable:!0},statusText:{enumerable:!0},headers:{enumerable:!0},clone:{enumerable:!0}});const getSearch=u(c=>{if(c.search)return c.search;const l=c.href.length-1,d=c.hash||(c.href[l]===\"#\"?\"#\":\"\");return c.href[l-d.length]===\"?\"?\"?\":\"\"},\"getSearch\");function stripURLForUseAsAReferrer(c,l=!1){return c==null||(c=new URL(c),/^(about|blob|data):$/.test(c.protocol))?\"no-referrer\":(c.username=\"\",c.password=\"\",c.hash=\"\",l&&(c.pathname=\"\",c.search=\"\"),c)}u(stripURLForUseAsAReferrer,\"stripURLForUseAsAReferrer\");const ReferrerPolicy=new Set([\"\",\"no-referrer\",\"no-referrer-when-downgrade\",\"same-origin\",\"origin\",\"strict-origin\",\"origin-when-cross-origin\",\"strict-origin-when-cross-origin\",\"unsafe-url\"]),DEFAULT_REFERRER_POLICY=\"strict-origin-when-cross-origin\";function validateReferrerPolicy(c){if(!ReferrerPolicy.has(c))throw new TypeError(`Invalid referrerPolicy: ${c}`);return c}u(validateReferrerPolicy,\"validateReferrerPolicy\");function isOriginPotentiallyTrustworthy(c){if(/^(http|ws)s:$/.test(c.protocol))return!0;const l=c.host.replace(/(^\\[)|(]$)/g,\"\"),d=require$$0$2.isIP(l);return d===4&&/^127\\./.test(l)||d===6&&/^(((0+:){7})|(::(0+:){0,6}))0*1$/.test(l)?!0:c.host===\"localhost\"||c.host.endsWith(\".localhost\")?!1:c.protocol===\"file:\"}u(isOriginPotentiallyTrustworthy,\"isOriginPotentiallyTrustworthy\");function isUrlPotentiallyTrustworthy(c){return/^about:(blank|srcdoc)$/.test(c)||c.protocol===\"data:\"||/^(blob|filesystem):$/.test(c.protocol)?!0:isOriginPotentiallyTrustworthy(c)}u(isUrlPotentiallyTrustworthy,\"isUrlPotentiallyTrustworthy\");function determineRequestsReferrer(c,{referrerURLCallback:l,referrerOriginCallback:d}={}){if(c.referrer===\"no-referrer\"||c.referrerPolicy===\"\")return null;const y=c.referrerPolicy;if(c.referrer===\"about:client\")return\"no-referrer\";const b=c.referrer;let R=stripURLForUseAsAReferrer(b),w=stripURLForUseAsAReferrer(b,!0);R.toString().length>4096&&(R=w),l&&(R=l(R)),d&&(w=d(w));const A=new URL(c.url);switch(y){case\"no-referrer\":return\"no-referrer\";case\"origin\":return w;case\"unsafe-url\":return R;case\"strict-origin\":return isUrlPotentiallyTrustworthy(R)&&!isUrlPotentiallyTrustworthy(A)?\"no-referrer\":w.toString();case\"strict-origin-when-cross-origin\":return R.origin===A.origin?R:isUrlPotentiallyTrustworthy(R)&&!isUrlPotentiallyTrustworthy(A)?\"no-referrer\":w;case\"same-origin\":return R.origin===A.origin?R:\"no-referrer\";case\"origin-when-cross-origin\":return R.origin===A.origin?R:w;case\"no-referrer-when-downgrade\":return isUrlPotentiallyTrustworthy(R)&&!isUrlPotentiallyTrustworthy(A)?\"no-referrer\":R;default:throw new TypeError(`Invalid referrerPolicy: ${y}`)}}u(determineRequestsReferrer,\"determineRequestsReferrer\");function parseReferrerPolicyFromHeader(c){const l=(c.get(\"referrer-policy\")||\"\").split(/[,\\s]+/);let d=\"\";for(const y of l)y&&ReferrerPolicy.has(y)&&(d=y);return d}u(parseReferrerPolicyFromHeader,\"parseReferrerPolicyFromHeader\");const INTERNALS=Symbol(\"Request internals\"),isRequest=u(c=>typeof c==\"object\"&&typeof c[INTERNALS]==\"object\",\"isRequest\"),doBadDataWarn=require$$0$1.deprecate(()=>{},\".data is not a valid RequestInit property, use .body instead\",\"https://github.com/node-fetch/node-fetch/issues/1000 (request)\");class Request extends Body{static{u(this,\"Request\")}constructor(l,d={}){let y;if(isRequest(l)?y=new URL(l.url):(y=new URL(l),l={}),y.username!==\"\"||y.password!==\"\")throw new TypeError(`${y} is an url with embedded credentials.`);let b=d.method||l.method||\"GET\";if(/^(delete|get|head|options|post|put)$/i.test(b)&&(b=b.toUpperCase()),!isRequest(d)&&\"data\"in d&&doBadDataWarn(),(d.body!=null||isRequest(l)&&l.body!==null)&&(b===\"GET\"||b===\"HEAD\"))throw new TypeError(\"Request with GET/HEAD method cannot have body\");const R=d.body?d.body:isRequest(l)&&l.body!==null?clone(l):null;super(R,{size:d.size||l.size||0});const w=new Headers(d.headers||l.headers||{});if(R!==null&&!w.has(\"Content-Type\")){const B=extractContentType(R,this);B&&w.set(\"Content-Type\",B)}let A=isRequest(l)?l.signal:null;if(\"signal\"in d&&(A=d.signal),A!=null&&!isAbortSignal(A))throw new TypeError(\"Expected signal to be an instanceof AbortSignal or EventTarget\");let F=d.referrer==null?l.referrer:d.referrer;if(F===\"\")F=\"no-referrer\";else if(F){const B=new URL(F);F=/^about:(\\/\\/)?client$/.test(B)?\"client\":B}else F=void 0;this[INTERNALS]={method:b,redirect:d.redirect||l.redirect||\"follow\",headers:w,parsedURL:y,signal:A,referrer:F},this.follow=d.follow===void 0?l.follow===void 0?20:l.follow:d.follow,this.compress=d.compress===void 0?l.compress===void 0?!0:l.compress:d.compress,this.counter=d.counter||l.counter||0,this.agent=d.agent||l.agent,this.highWaterMark=d.highWaterMark||l.highWaterMark||16384,this.insecureHTTPParser=d.insecureHTTPParser||l.insecureHTTPParser||!1,this.referrerPolicy=d.referrerPolicy||l.referrerPolicy||\"\"}get method(){return this[INTERNALS].method}get url(){return require$$1.format(this[INTERNALS].parsedURL)}get headers(){return this[INTERNALS].headers}get redirect(){return this[INTERNALS].redirect}get signal(){return this[INTERNALS].signal}get referrer(){if(this[INTERNALS].referrer===\"no-referrer\")return\"\";if(this[INTERNALS].referrer===\"client\")return\"about:client\";if(this[INTERNALS].referrer)return this[INTERNALS].referrer.toString()}get referrerPolicy(){return this[INTERNALS].referrerPolicy}set referrerPolicy(l){this[INTERNALS].referrerPolicy=validateReferrerPolicy(l)}clone(){return new Request(this)}get[Symbol.toStringTag](){return\"Request\"}}Object.defineProperties(Request.prototype,{method:{enumerable:!0},url:{enumerable:!0},headers:{enumerable:!0},redirect:{enumerable:!0},clone:{enumerable:!0},signal:{enumerable:!0},referrer:{enumerable:!0},referrerPolicy:{enumerable:!0}});const getNodeRequestOptions=u(c=>{const{parsedURL:l}=c[INTERNALS],d=new Headers(c[INTERNALS].headers);d.has(\"Accept\")||d.set(\"Accept\",\"*/*\");let y=null;if(c.body===null&&/^(post|put)$/i.test(c.method)&&(y=\"0\"),c.body!==null){const A=getTotalBytes(c);typeof A==\"number\"&&!Number.isNaN(A)&&(y=String(A))}y&&d.set(\"Content-Length\",y),c.referrerPolicy===\"\"&&(c.referrerPolicy=DEFAULT_REFERRER_POLICY),c.referrer&&c.referrer!==\"no-referrer\"?c[INTERNALS].referrer=determineRequestsReferrer(c):c[INTERNALS].referrer=\"no-referrer\",c[INTERNALS].referrer instanceof URL&&d.set(\"Referer\",c.referrer),d.has(\"User-Agent\")||d.set(\"User-Agent\",\"node-fetch\"),c.compress&&!d.has(\"Accept-Encoding\")&&d.set(\"Accept-Encoding\",\"gzip, deflate, br\");let{agent:b}=c;typeof b==\"function\"&&(b=b(l));const R=getSearch(l),w={path:l.pathname+R,method:c.method,headers:d[Symbol.for(\"nodejs.util.inspect.custom\")](),insecureHTTPParser:c.insecureHTTPParser,agent:b};return{parsedURL:l,options:w}},\"getNodeRequestOptions\");class AbortError extends FetchBaseError{static{u(this,\"AbortError\")}constructor(l,d=\"aborted\"){super(l,d)}}/*! node-domexception. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */var nodeDomexception,hasRequiredNodeDomexception;function requireNodeDomexception(){if(hasRequiredNodeDomexception)return nodeDomexception;if(hasRequiredNodeDomexception=1,!globalThis.DOMException)try{const{MessageChannel:c}=__webpack_require__(/*! worker_threads */ \"worker_threads\"),l=new c().port1,d=new ArrayBuffer;l.postMessage(d,[d,d])}catch(c){c.constructor.name===\"DOMException\"&&(globalThis.DOMException=c.constructor)}return nodeDomexception=globalThis.DOMException,nodeDomexception}u(requireNodeDomexception,\"requireNodeDomexception\");var nodeDomexceptionExports=requireNodeDomexception();const DOMException=_commonjsHelpers.getDefaultExportFromCjs(nodeDomexceptionExports),{stat}=node_fs.promises,blobFromSync=u((c,l)=>fromBlob(node_fs.statSync(c),c,l),\"blobFromSync\"),blobFrom=u((c,l)=>stat(c).then(d=>fromBlob(d,c,l)),\"blobFrom\"),fileFrom=u((c,l)=>stat(c).then(d=>fromFile(d,c,l)),\"fileFrom\"),fileFromSync=u((c,l)=>fromFile(node_fs.statSync(c),c,l),\"fileFromSync\"),fromBlob=u((c,l,d=\"\")=>new Blob([new BlobDataItem({path:l,size:c.size,lastModified:c.mtimeMs,start:0})],{type:d}),\"fromBlob\"),fromFile=u((c,l,d=\"\")=>new File([new BlobDataItem({path:l,size:c.size,lastModified:c.mtimeMs,start:0})],node_path.basename(l),{type:d,lastModified:c.mtimeMs}),\"fromFile\");class BlobDataItem{static{u(this,\"BlobDataItem\")}#e;#t;constructor(l){this.#e=l.path,this.#t=l.start,this.size=l.size,this.lastModified=l.lastModified}slice(l,d){return new BlobDataItem({path:this.#e,lastModified:this.lastModified,size:d-l,start:this.#t+l})}async*stream(){const{mtimeMs:l}=await stat(this.#e);if(l>this.lastModified)throw new DOMException(\"The requested file could not be read, typically due to permission problems that have occurred after a reference to a file was acquired.\",\"NotReadableError\");yield*node_fs.createReadStream(this.#e,{start:this.#t,end:this.#t+this.size-1})}get[Symbol.toStringTag](){return\"Blob\"}}const supportedSchemas=new Set([\"data:\",\"http:\",\"https:\"]);async function fetch$1(c,l){return new Promise((d,y)=>{const b=new Request(c,l),{parsedURL:R,options:w}=getNodeRequestOptions(b);if(!supportedSchemas.has(R.protocol))throw new TypeError(`node-fetch cannot load ${c}. URL scheme \"${R.protocol.replace(/:$/,\"\")}\" is not supported.`);if(R.protocol===\"data:\"){const E=dataUriToBuffer(b.url),Z=new Response(E,{headers:{\"Content-Type\":E.typeFull}});d(Z);return}const A=(R.protocol===\"https:\"?https__default:http__default).request,{signal:F}=b;let B=null;const z=u(()=>{const E=new AbortError(\"The operation was aborted.\");y(E),b.body&&b.body instanceof Stream__default.Readable&&b.body.destroy(E),!(!B||!B.body)&&B.body.emit(\"error\",E)},\"abort\");if(F&&F.aborted){z();return}const W=u(()=>{z(),D()},\"abortAndFinalize\"),T=A(R.toString(),w);F&&F.addEventListener(\"abort\",W);const D=u(()=>{T.abort(),F&&F.removeEventListener(\"abort\",W)},\"finalize\");T.on(\"error\",E=>{y(new FetchError(`request to ${b.url} failed, reason: ${E.message}`,\"system\",E)),D()}),fixResponseChunkedTransferBadEnding(T,E=>{B&&B.body&&B.body.destroy(E)}),process.version<\"v14\"&&T.on(\"socket\",E=>{let Z;E.prependListener(\"end\",()=>{Z=E._eventsCount}),E.prependListener(\"close\",M=>{if(B&&Z<E._eventsCount&&!M){const U=new Error(\"Premature close\");U.code=\"ERR_STREAM_PREMATURE_CLOSE\",B.body.emit(\"error\",U)}})}),T.on(\"response\",E=>{T.setTimeout(0);const Z=fromRawHeaders(E.rawHeaders);if(isRedirect(E.statusCode)){const $=Z.get(\"Location\");let N=null;try{N=$===null?null:new URL($,b.url)}catch{if(b.redirect!==\"manual\"){y(new FetchError(`uri requested responds with an invalid redirect URL: ${$}`,\"invalid-redirect\")),D();return}}switch(b.redirect){case\"error\":y(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${b.url}`,\"no-redirect\")),D();return;case\"manual\":break;case\"follow\":{if(N===null)break;if(b.counter>=b.follow){y(new FetchError(`maximum redirect reached at: ${b.url}`,\"max-redirect\")),D();return}const V={headers:new Headers(b.headers),follow:b.follow,counter:b.counter+1,agent:b.agent,compress:b.compress,method:b.method,body:clone(b),signal:b.signal,size:b.size,referrer:b.referrer,referrerPolicy:b.referrerPolicy};if(!isDomainOrSubdomain(b.url,N)||!isSameProtocol(b.url,N))for(const rt of[\"authorization\",\"www-authenticate\",\"cookie\",\"cookie2\"])V.headers.delete(rt);if(E.statusCode!==303&&b.body&&l.body instanceof Stream__default.Readable){y(new FetchError(\"Cannot follow redirect with body being a readable stream\",\"unsupported-redirect\")),D();return}(E.statusCode===303||(E.statusCode===301||E.statusCode===302)&&b.method===\"POST\")&&(V.method=\"GET\",V.body=void 0,V.headers.delete(\"content-length\"));const Q=parseReferrerPolicyFromHeader(Z);Q&&(V.referrerPolicy=Q),d(fetch$1(new Request(N,V))),D();return}default:return y(new TypeError(`Redirect option '${b.redirect}' is not a valid value of RequestRedirect`))}}F&&E.once(\"end\",()=>{F.removeEventListener(\"abort\",W)});let M=Stream.pipeline(E,new Stream.PassThrough,$=>{$&&y($)});process.version<\"v12.10\"&&E.on(\"aborted\",W);const U={url:b.url,status:E.statusCode,statusText:E.statusMessage,headers:Z,size:b.size,counter:b.counter,highWaterMark:b.highWaterMark},K=Z.get(\"Content-Encoding\");if(!b.compress||b.method===\"HEAD\"||K===null||E.statusCode===204||E.statusCode===304){B=new Response(M,U),d(B);return}const se={flush:zlib__default.Z_SYNC_FLUSH,finishFlush:zlib__default.Z_SYNC_FLUSH};if(K===\"gzip\"||K===\"x-gzip\"){M=Stream.pipeline(M,zlib__default.createGunzip(se),$=>{$&&y($)}),B=new Response(M,U),d(B);return}if(K===\"deflate\"||K===\"x-deflate\"){const $=Stream.pipeline(E,new Stream.PassThrough,N=>{N&&y(N)});$.once(\"data\",N=>{(N[0]&15)===8?M=Stream.pipeline(M,zlib__default.createInflate(),V=>{V&&y(V)}):M=Stream.pipeline(M,zlib__default.createInflateRaw(),V=>{V&&y(V)}),B=new Response(M,U),d(B)}),$.once(\"end\",()=>{B||(B=new Response(M,U),d(B))});return}if(K===\"br\"){M=Stream.pipeline(M,zlib__default.createBrotliDecompress(),$=>{$&&y($)}),B=new Response(M,U),d(B);return}B=new Response(M,U),d(B)}),writeToStream(T,b).catch(y)})}u(fetch$1,\"fetch$1\");function fixResponseChunkedTransferBadEnding(c,l){const d=require$$0.Buffer.from(`0\\r\n\\r\n`);let y=!1,b=!1,R;c.on(\"response\",w=>{const{headers:A}=w;y=A[\"transfer-encoding\"]===\"chunked\"&&!A[\"content-length\"]}),c.on(\"socket\",w=>{const A=u(()=>{if(y&&!b){const B=new Error(\"Premature close\");B.code=\"ERR_STREAM_PREMATURE_CLOSE\",l(B)}},\"onSocketClose\"),F=u(B=>{b=require$$0.Buffer.compare(B.slice(-5),d)===0,!b&&R&&(b=require$$0.Buffer.compare(R.slice(-3),d.slice(0,3))===0&&require$$0.Buffer.compare(B.slice(-2),d.slice(3))===0),R=B},\"onData\");w.prependListener(\"close\",A),w.on(\"data\",F),c.on(\"close\",()=>{w.removeListener(\"close\",A),w.removeListener(\"data\",F)})})}u(fixResponseChunkedTransferBadEnding,\"fixResponseChunkedTransferBadEnding\");const privateData=new WeakMap,wrappers=new WeakMap;function pd(c){const l=privateData.get(c);return console.assert(l!=null,\"'this' is expected an Event object, but got\",c),l}u(pd,\"pd\");function setCancelFlag(c){if(c.passiveListener!=null){typeof console<\"u\"&&typeof console.error==\"function\"&&console.error(\"Unable to preventDefault inside passive event listener invocation.\",c.passiveListener);return}c.event.cancelable&&(c.canceled=!0,typeof c.event.preventDefault==\"function\"&&c.event.preventDefault())}u(setCancelFlag,\"setCancelFlag\");function Event(c,l){privateData.set(this,{eventTarget:c,event:l,eventPhase:2,currentTarget:c,canceled:!1,stopped:!1,immediateStopped:!1,passiveListener:null,timeStamp:l.timeStamp||Date.now()}),Object.defineProperty(this,\"isTrusted\",{value:!1,enumerable:!0});const d=Object.keys(l);for(let y=0;y<d.length;++y){const b=d[y];b in this||Object.defineProperty(this,b,defineRedirectDescriptor(b))}}u(Event,\"Event\"),Event.prototype={get type(){return pd(this).event.type},get target(){return pd(this).eventTarget},get currentTarget(){return pd(this).currentTarget},composedPath(){const c=pd(this).currentTarget;return c==null?[]:[c]},get NONE(){return 0},get CAPTURING_PHASE(){return 1},get AT_TARGET(){return 2},get BUBBLING_PHASE(){return 3},get eventPhase(){return pd(this).eventPhase},stopPropagation(){const c=pd(this);c.stopped=!0,typeof c.event.stopPropagation==\"function\"&&c.event.stopPropagation()},stopImmediatePropagation(){const c=pd(this);c.stopped=!0,c.immediateStopped=!0,typeof c.event.stopImmediatePropagation==\"function\"&&c.event.stopImmediatePropagation()},get bubbles(){return!!pd(this).event.bubbles},get cancelable(){return!!pd(this).event.cancelable},preventDefault(){setCancelFlag(pd(this))},get defaultPrevented(){return pd(this).canceled},get composed(){return!!pd(this).event.composed},get timeStamp(){return pd(this).timeStamp},get srcElement(){return pd(this).eventTarget},get cancelBubble(){return pd(this).stopped},set cancelBubble(c){if(!c)return;const l=pd(this);l.stopped=!0,typeof l.event.cancelBubble==\"boolean\"&&(l.event.cancelBubble=!0)},get returnValue(){return!pd(this).canceled},set returnValue(c){c||setCancelFlag(pd(this))},initEvent(){}},Object.defineProperty(Event.prototype,\"constructor\",{value:Event,configurable:!0,writable:!0}),typeof window<\"u\"&&typeof window.Event<\"u\"&&(Object.setPrototypeOf(Event.prototype,window.Event.prototype),wrappers.set(window.Event.prototype,Event));function defineRedirectDescriptor(c){return{get(){return pd(this).event[c]},set(l){pd(this).event[c]=l},configurable:!0,enumerable:!0}}u(defineRedirectDescriptor,\"defineRedirectDescriptor\");function defineCallDescriptor(c){return{value(){const l=pd(this).event;return l[c].apply(l,arguments)},configurable:!0,enumerable:!0}}u(defineCallDescriptor,\"defineCallDescriptor\");function defineWrapper(c,l){const d=Object.keys(l);if(d.length===0)return c;function y(b,R){c.call(this,b,R)}u(y,\"CustomEvent\"),y.prototype=Object.create(c.prototype,{constructor:{value:y,configurable:!0,writable:!0}});for(let b=0;b<d.length;++b){const R=d[b];if(!(R in c.prototype)){const A=typeof Object.getOwnPropertyDescriptor(l,R).value==\"function\";Object.defineProperty(y.prototype,R,A?defineCallDescriptor(R):defineRedirectDescriptor(R))}}return y}u(defineWrapper,\"defineWrapper\");function getWrapper(c){if(c==null||c===Object.prototype)return Event;let l=wrappers.get(c);return l==null&&(l=defineWrapper(getWrapper(Object.getPrototypeOf(c)),c),wrappers.set(c,l)),l}u(getWrapper,\"getWrapper\");function wrapEvent(c,l){const d=getWrapper(Object.getPrototypeOf(l));return new d(c,l)}u(wrapEvent,\"wrapEvent\");function isStopped(c){return pd(c).immediateStopped}u(isStopped,\"isStopped\");function setEventPhase(c,l){pd(c).eventPhase=l}u(setEventPhase,\"setEventPhase\");function setCurrentTarget(c,l){pd(c).currentTarget=l}u(setCurrentTarget,\"setCurrentTarget\");function setPassiveListener(c,l){pd(c).passiveListener=l}u(setPassiveListener,\"setPassiveListener\");const listenersMap=new WeakMap,CAPTURE=1,BUBBLE=2,ATTRIBUTE=3;function isObject(c){return c!==null&&typeof c==\"object\"}u(isObject,\"isObject\");function getListeners(c){const l=listenersMap.get(c);if(l==null)throw new TypeError(\"'this' is expected an EventTarget object, but got another value.\");return l}u(getListeners,\"getListeners\");function defineEventAttributeDescriptor(c){return{get(){let d=getListeners(this).get(c);for(;d!=null;){if(d.listenerType===ATTRIBUTE)return d.listener;d=d.next}return null},set(l){typeof l!=\"function\"&&!isObject(l)&&(l=null);const d=getListeners(this);let y=null,b=d.get(c);for(;b!=null;)b.listenerType===ATTRIBUTE?y!==null?y.next=b.next:b.next!==null?d.set(c,b.next):d.delete(c):y=b,b=b.next;if(l!==null){const R={listener:l,listenerType:ATTRIBUTE,passive:!1,once:!1,next:null};y===null?d.set(c,R):y.next=R}},configurable:!0,enumerable:!0}}u(defineEventAttributeDescriptor,\"defineEventAttributeDescriptor\");function defineEventAttribute(c,l){Object.defineProperty(c,`on${l}`,defineEventAttributeDescriptor(l))}u(defineEventAttribute,\"defineEventAttribute\");function defineCustomEventTarget(c){function l(){EventTarget.call(this)}u(l,\"CustomEventTarget\"),l.prototype=Object.create(EventTarget.prototype,{constructor:{value:l,configurable:!0,writable:!0}});for(let d=0;d<c.length;++d)defineEventAttribute(l.prototype,c[d]);return l}u(defineCustomEventTarget,\"defineCustomEventTarget\");function EventTarget(){if(this instanceof EventTarget){listenersMap.set(this,new Map);return}if(arguments.length===1&&Array.isArray(arguments[0]))return defineCustomEventTarget(arguments[0]);if(arguments.length>0){const c=new Array(arguments.length);for(let l=0;l<arguments.length;++l)c[l]=arguments[l];return defineCustomEventTarget(c)}throw new TypeError(\"Cannot call a class as a function\")}u(EventTarget,\"EventTarget\"),EventTarget.prototype={addEventListener(c,l,d){if(l==null)return;if(typeof l!=\"function\"&&!isObject(l))throw new TypeError(\"'listener' should be a function or an object.\");const y=getListeners(this),b=isObject(d),w=(b?!!d.capture:!!d)?CAPTURE:BUBBLE,A={listener:l,listenerType:w,passive:b&&!!d.passive,once:b&&!!d.once,next:null};let F=y.get(c);if(F===void 0){y.set(c,A);return}let B=null;for(;F!=null;){if(F.listener===l&&F.listenerType===w)return;B=F,F=F.next}B.next=A},removeEventListener(c,l,d){if(l==null)return;const y=getListeners(this),R=(isObject(d)?!!d.capture:!!d)?CAPTURE:BUBBLE;let w=null,A=y.get(c);for(;A!=null;){if(A.listener===l&&A.listenerType===R){w!==null?w.next=A.next:A.next!==null?y.set(c,A.next):y.delete(c);return}w=A,A=A.next}},dispatchEvent(c){if(c==null||typeof c.type!=\"string\")throw new TypeError('\"event.type\" should be a string.');const l=getListeners(this),d=c.type;let y=l.get(d);if(y==null)return!0;const b=wrapEvent(this,c);let R=null;for(;y!=null;){if(y.once?R!==null?R.next=y.next:y.next!==null?l.set(d,y.next):l.delete(d):R=y,setPassiveListener(b,y.passive?y.listener:null),typeof y.listener==\"function\")try{y.listener.call(this,b)}catch(w){typeof console<\"u\"&&typeof console.error==\"function\"&&console.error(w)}else y.listenerType!==ATTRIBUTE&&typeof y.listener.handleEvent==\"function\"&&y.listener.handleEvent(b);if(isStopped(b))break;y=y.next}return setPassiveListener(b,null),setEventPhase(b,0),setCurrentTarget(b,null),!b.defaultPrevented}},Object.defineProperty(EventTarget.prototype,\"constructor\",{value:EventTarget,configurable:!0,writable:!0}),typeof window<\"u\"&&typeof window.EventTarget<\"u\"&&Object.setPrototypeOf(EventTarget.prototype,window.EventTarget.prototype);class AbortSignal extends EventTarget{static{u(this,\"AbortSignal\")}constructor(){throw super(),new TypeError(\"AbortSignal cannot be constructed directly\")}get aborted(){const l=abortedFlags.get(this);if(typeof l!=\"boolean\")throw new TypeError(`Expected 'this' to be an 'AbortSignal' object, but got ${this===null?\"null\":typeof this}`);return l}}defineEventAttribute(AbortSignal.prototype,\"abort\");function createAbortSignal(){const c=Object.create(AbortSignal.prototype);return EventTarget.call(c),abortedFlags.set(c,!1),c}u(createAbortSignal,\"createAbortSignal\");function abortSignal(c){abortedFlags.get(c)===!1&&(abortedFlags.set(c,!0),c.dispatchEvent({type:\"abort\"}))}u(abortSignal,\"abortSignal\");const abortedFlags=new WeakMap;Object.defineProperties(AbortSignal.prototype,{aborted:{enumerable:!0}}),typeof Symbol==\"function\"&&typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(AbortSignal.prototype,Symbol.toStringTag,{configurable:!0,value:\"AbortSignal\"});let AbortController$1=class{static{u(this,\"AbortController\")}constructor(){signals.set(this,createAbortSignal())}get signal(){return getSignal(this)}abort(){abortSignal(getSignal(this))}};const signals=new WeakMap;function getSignal(c){const l=signals.get(c);if(l==null)throw new TypeError(`Expected 'this' to be an 'AbortController' object, but got ${c===null?\"null\":typeof c}`);return l}u(getSignal,\"getSignal\"),Object.defineProperties(AbortController$1.prototype,{signal:{enumerable:!0},abort:{enumerable:!0}}),typeof Symbol==\"function\"&&typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(AbortController$1.prototype,Symbol.toStringTag,{configurable:!0,value:\"AbortController\"});var t=Object.defineProperty,e=u((c,l)=>t(c,\"name\",{value:l,configurable:!0}),\"e\");const fetch=fetch$1;s();function s(){!globalThis.process?.versions?.node&&!globalThis.process?.env?.DISABLE_NODE_FETCH_NATIVE_WARN&&console.warn(\"[node-fetch-native] Node.js compatible build of `node-fetch-native` is being used in a non-Node.js environment. Please make sure you are using proper export conditions or report this issue to https://github.com/unjs/node-fetch-native. You can set `process.env.DISABLE_NODE_FETCH_NATIVE_WARN` to disable this warning.\")}u(s,\"s\"),e(s,\"checkNodeEnvironment\"),exports.AbortController=AbortController$1,exports.AbortError=AbortError,exports.Blob=Blob,exports.FetchError=FetchError,exports.File=File,exports.FormData=FormData,exports.Headers=Headers,exports.Request=Request,exports.Response=Response,exports.blobFrom=blobFrom,exports.blobFromSync=blobFromSync,exports[\"default\"]=fetch,exports.fetch=fetch,exports.fileFrom=fileFrom,exports.fileFromSync=fileFromSync,exports.isRedirect=isRedirect;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch-native/dist/node.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-fetch-native/dist/shared/node-fetch-native.DhEqb06g.cjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/node-fetch-native/dist/shared/node-fetch-native.DhEqb06g.cjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("var l=Object.defineProperty;var o=(e,t)=>l(e,\"name\",{value:t,configurable:!0});var commonjsGlobal=typeof globalThis<\"u\"?globalThis:typeof window<\"u\"?window:typeof global<\"u\"?global:typeof self<\"u\"?self:{};function getDefaultExportFromCjs(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,\"default\")?e.default:e}o(getDefaultExportFromCjs,\"getDefaultExportFromCjs\"),exports.commonjsGlobal=commonjsGlobal,exports.getDefaultExportFromCjs=getDefaultExportFromCjs;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC1uYXRpdmUvZGlzdC9zaGFyZWQvbm9kZS1mZXRjaC1uYXRpdmUuRGhFcWIwNmcuY2pzIiwibWFwcGluZ3MiOiJBQUFhLDRCQUE0Qix5QkFBeUIsd0JBQXdCLEVBQUUsOEhBQThILG9DQUFvQyxzRkFBc0YscURBQXFELHNCQUFzQixnQkFBZ0IsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2RwLXRlc3QtYWdlbnQvLi9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC1uYXRpdmUvZGlzdC9zaGFyZWQvbm9kZS1mZXRjaC1uYXRpdmUuRGhFcWIwNmcuY2pzPzJhYmEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7dmFyIGw9T2JqZWN0LmRlZmluZVByb3BlcnR5O3ZhciBvPShlLHQpPT5sKGUsXCJuYW1lXCIse3ZhbHVlOnQsY29uZmlndXJhYmxlOiEwfSk7dmFyIGNvbW1vbmpzR2xvYmFsPXR5cGVvZiBnbG9iYWxUaGlzPFwidVwiP2dsb2JhbFRoaXM6dHlwZW9mIHdpbmRvdzxcInVcIj93aW5kb3c6dHlwZW9mIGdsb2JhbDxcInVcIj9nbG9iYWw6dHlwZW9mIHNlbGY8XCJ1XCI/c2VsZjp7fTtmdW5jdGlvbiBnZXREZWZhdWx0RXhwb3J0RnJvbUNqcyhlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlJiZPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxcImRlZmF1bHRcIik/ZS5kZWZhdWx0OmV9byhnZXREZWZhdWx0RXhwb3J0RnJvbUNqcyxcImdldERlZmF1bHRFeHBvcnRGcm9tQ2pzXCIpLGV4cG9ydHMuY29tbW9uanNHbG9iYWw9Y29tbW9uanNHbG9iYWwsZXhwb3J0cy5nZXREZWZhdWx0RXhwb3J0RnJvbUNqcz1nZXREZWZhdWx0RXhwb3J0RnJvbUNqcztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch-native/dist/shared/node-fetch-native.DhEqb06g.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-fetch-native/lib/index.cjs":
/*!******************************************************!*\
  !*** ./node_modules/node-fetch-native/lib/index.cjs ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const nodeFetch = __webpack_require__(/*! ../dist/index.cjs */ \"(rsc)/./node_modules/node-fetch-native/dist/index.cjs\");\n\nfunction fetch(input, options) {\n  return nodeFetch.fetch(input, options);\n}\n\nfor (const key in nodeFetch) {\n  fetch[key] = nodeFetch[key];\n}\n\nmodule.exports = fetch;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC1uYXRpdmUvbGliL2luZGV4LmNqcyIsIm1hcHBpbmdzIjoiQUFBQSxrQkFBa0IsbUJBQU8sQ0FBQyxnRkFBbUI7O0FBRTdDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZHAtdGVzdC1hZ2VudC8uL25vZGVfbW9kdWxlcy9ub2RlLWZldGNoLW5hdGl2ZS9saWIvaW5kZXguY2pzPzIwNGIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgbm9kZUZldGNoID0gcmVxdWlyZShcIi4uL2Rpc3QvaW5kZXguY2pzXCIpO1xuXG5mdW5jdGlvbiBmZXRjaChpbnB1dCwgb3B0aW9ucykge1xuICByZXR1cm4gbm9kZUZldGNoLmZldGNoKGlucHV0LCBvcHRpb25zKTtcbn1cblxuZm9yIChjb25zdCBrZXkgaW4gbm9kZUZldGNoKSB7XG4gIGZldGNoW2tleV0gPSBub2RlRmV0Y2hba2V5XTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmZXRjaDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch-native/lib/index.cjs\n");

/***/ })

};
;